
407Rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000406c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d8  080042d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042e0  080042e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080042e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004094  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004108  20004108  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001039e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028f2  00000000  00000000  00030442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00032d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd8  00000000  00000000  00033c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002361b  00000000  00000000  00034a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001082d  00000000  00000000  0005804b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2f62  00000000  00000000  00068878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b7da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004414  00000000  00000000  0013b82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080041e4 	.word	0x080041e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080041e4 	.word	0x080041e4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000094 	.word	0x20000094
 8000504:	20000148 	.word	0x20000148

08000508 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <MX_FREERTOS_Init+0x30>)
 8000510:	1d3c      	adds	r4, r7, #4
 8000512:	461d      	mov	r5, r3
 8000514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000518:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800051c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f001 fe6a 	bl	80021fe <osThreadCreate>
 800052a:	4603      	mov	r3, r0
 800052c:	4a03      	ldr	r2, [pc, #12]	; (800053c <MX_FREERTOS_Init+0x34>)
 800052e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bdb0      	pop	{r4, r5, r7, pc}
 8000538:	08004208 	.word	0x08004208
 800053c:	20000090 	.word	0x20000090

08000540 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000548:	2001      	movs	r0, #1
 800054a:	f001 fea4 	bl	8002296 <osDelay>
 800054e:	e7fb      	b.n	8000548 <StartDefaultTask+0x8>

08000550 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08c      	sub	sp, #48	; 0x30
 8000554:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	61bb      	str	r3, [r7, #24]
 800056a:	4ba2      	ldr	r3, [pc, #648]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4aa1      	ldr	r2, [pc, #644]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 8000570:	f043 0310 	orr.w	r3, r3, #16
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b9f      	ldr	r3, [pc, #636]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0310 	and.w	r3, r3, #16
 800057e:	61bb      	str	r3, [r7, #24]
 8000580:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	4b9b      	ldr	r3, [pc, #620]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a9a      	ldr	r2, [pc, #616]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b98      	ldr	r3, [pc, #608]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
 80005a2:	4b94      	ldr	r3, [pc, #592]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a93      	ldr	r2, [pc, #588]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b91      	ldr	r3, [pc, #580]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	4b8d      	ldr	r3, [pc, #564]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a8c      	ldr	r2, [pc, #560]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b8a      	ldr	r3, [pc, #552]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	4b86      	ldr	r3, [pc, #536]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a85      	ldr	r2, [pc, #532]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b83      	ldr	r3, [pc, #524]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b7f      	ldr	r3, [pc, #508]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a7e      	ldr	r2, [pc, #504]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 80005fc:	f043 0308 	orr.w	r3, r3, #8
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b7c      	ldr	r3, [pc, #496]	; (80007f4 <MX_GPIO_Init+0x2a4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0308 	and.w	r3, r3, #8
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2108      	movs	r1, #8
 8000612:	4879      	ldr	r0, [pc, #484]	; (80007f8 <MX_GPIO_Init+0x2a8>)
 8000614:	f000 fe56 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2101      	movs	r1, #1
 800061c:	4877      	ldr	r0, [pc, #476]	; (80007fc <MX_GPIO_Init+0x2ac>)
 800061e:	f000 fe51 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000622:	2200      	movs	r2, #0
 8000624:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000628:	4875      	ldr	r0, [pc, #468]	; (8000800 <MX_GPIO_Init+0x2b0>)
 800062a:	f000 fe4b 	bl	80012c4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800062e:	2308      	movs	r3, #8
 8000630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	4619      	mov	r1, r3
 8000644:	486c      	ldr	r0, [pc, #432]	; (80007f8 <MX_GPIO_Init+0x2a8>)
 8000646:	f000 fca1 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800064a:	2301      	movs	r3, #1
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	4619      	mov	r1, r3
 8000660:	4866      	ldr	r0, [pc, #408]	; (80007fc <MX_GPIO_Init+0x2ac>)
 8000662:	f000 fc93 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000666:	2308      	movs	r3, #8
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	2302      	movs	r3, #2
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2300      	movs	r3, #0
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000676:	2305      	movs	r3, #5
 8000678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	485e      	ldr	r0, [pc, #376]	; (80007fc <MX_GPIO_Init+0x2ac>)
 8000682:	f000 fc83 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000686:	2301      	movs	r3, #1
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800068a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	485a      	ldr	r0, [pc, #360]	; (8000804 <MX_GPIO_Init+0x2b4>)
 800069c:	f000 fc76 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80006a0:	2310      	movs	r3, #16
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006b0:	2306      	movs	r3, #6
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	4852      	ldr	r0, [pc, #328]	; (8000804 <MX_GPIO_Init+0x2b4>)
 80006bc:	f000 fc66 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80006c0:	23e0      	movs	r3, #224	; 0xe0
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006d0:	2305      	movs	r3, #5
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	484a      	ldr	r0, [pc, #296]	; (8000804 <MX_GPIO_Init+0x2b4>)
 80006dc:	f000 fc56 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006e0:	2304      	movs	r3, #4
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	4845      	ldr	r0, [pc, #276]	; (8000808 <MX_GPIO_Init+0x2b8>)
 80006f4:	f000 fc4a 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fe:	2302      	movs	r3, #2
 8000700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800070a:	2305      	movs	r3, #5
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	483c      	ldr	r0, [pc, #240]	; (8000808 <MX_GPIO_Init+0x2b8>)
 8000716:	f000 fc39 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800071a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800071e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4833      	ldr	r0, [pc, #204]	; (8000800 <MX_GPIO_Init+0x2b0>)
 8000734:	f000 fc2a 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000738:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800074a:	2306      	movs	r3, #6
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4829      	ldr	r0, [pc, #164]	; (80007fc <MX_GPIO_Init+0x2ac>)
 8000756:	f000 fc19 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800075a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	4825      	ldr	r0, [pc, #148]	; (8000804 <MX_GPIO_Init+0x2b4>)
 8000770:	f000 fc0c 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000774:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000786:	230a      	movs	r3, #10
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	481c      	ldr	r0, [pc, #112]	; (8000804 <MX_GPIO_Init+0x2b4>)
 8000792:	f000 fbfb 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000796:	2320      	movs	r3, #32
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4619      	mov	r1, r3
 80007a8:	4815      	ldr	r0, [pc, #84]	; (8000800 <MX_GPIO_Init+0x2b0>)
 80007aa:	f000 fbef 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b4:	2312      	movs	r3, #18
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007c0:	2304      	movs	r3, #4
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	480f      	ldr	r0, [pc, #60]	; (8000808 <MX_GPIO_Init+0x2b8>)
 80007cc:	f000 fbde 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80007d0:	2302      	movs	r3, #2
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_GPIO_Init+0x2a8>)
 80007e6:	f000 fbd1 	bl	8000f8c <HAL_GPIO_Init>

}
 80007ea:	bf00      	nop
 80007ec:	3730      	adds	r7, #48	; 0x30
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40020800 	.word	0x40020800
 8000800:	40020c00 	.word	0x40020c00
 8000804:	40020000 	.word	0x40020000
 8000808:	40020400 	.word	0x40020400

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000812:	f000 fa97 	bl	8000d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000816:	f000 f833 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f7ff fe99 	bl	8000550 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task-1", 100, "Hello Cac ban 1", 2, &task1Handler);
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <main+0x50>)
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	2302      	movs	r3, #2
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <main+0x54>)
 8000828:	2264      	movs	r2, #100	; 0x64
 800082a:	490e      	ldr	r1, [pc, #56]	; (8000864 <main+0x58>)
 800082c:	480e      	ldr	r0, [pc, #56]	; (8000868 <main+0x5c>)
 800082e:	f001 fe57 	bl	80024e0 <xTaskCreate>
 8000832:	4603      	mov	r3, r0
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <main+0x60>)
 8000836:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(task2_handler, "Task-2", 100, "Hello Cac ban 2", 2, &task2Handler);
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <main+0x64>)
 800083a:	9301      	str	r3, [sp, #4]
 800083c:	2302      	movs	r3, #2
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <main+0x68>)
 8000842:	2264      	movs	r2, #100	; 0x64
 8000844:	490c      	ldr	r1, [pc, #48]	; (8000878 <main+0x6c>)
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <main+0x70>)
 8000848:	f001 fe4a 	bl	80024e0 <xTaskCreate>
 800084c:	4603      	mov	r3, r0
 800084e:	4a07      	ldr	r2, [pc, #28]	; (800086c <main+0x60>)
 8000850:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000852:	f7ff fe59 	bl	8000508 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000856:	f001 fccb 	bl	80021f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085a:	e7fe      	b.n	800085a <main+0x4e>
 800085c:	20000348 	.word	0x20000348
 8000860:	08004224 	.word	0x08004224
 8000864:	08004234 	.word	0x08004234
 8000868:	08000955 	.word	0x08000955
 800086c:	20000350 	.word	0x20000350
 8000870:	2000034c 	.word	0x2000034c
 8000874:	0800423c 	.word	0x0800423c
 8000878:	0800424c 	.word	0x0800424c
 800087c:	08000965 	.word	0x08000965

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	; 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2230      	movs	r2, #48	; 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f003 f82f 	bl	80038f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b28      	ldr	r3, [pc, #160]	; (800094c <SystemClock_Config+0xcc>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a27      	ldr	r2, [pc, #156]	; (800094c <SystemClock_Config+0xcc>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
 80008b4:	4b25      	ldr	r3, [pc, #148]	; (800094c <SystemClock_Config+0xcc>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <SystemClock_Config+0xd0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a21      	ldr	r2, [pc, #132]	; (8000950 <SystemClock_Config+0xd0>)
 80008ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <SystemClock_Config+0xd0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e6:	2302      	movs	r3, #2
 80008e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f0:	2308      	movs	r3, #8
 80008f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008fe:	2307      	movs	r3, #7
 8000900:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fcf6 	bl	80012f8 <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000912:	f000 f841 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	230f      	movs	r3, #15
 8000918:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091a:	2302      	movs	r3, #2
 800091c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000922:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000926:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2105      	movs	r1, #5
 8000934:	4618      	mov	r0, r3
 8000936:	f000 ff57 	bl	80017e8 <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000940:	f000 f82a 	bl	8000998 <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3750      	adds	r7, #80	; 0x50
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40007000 	.word	0x40007000

08000954 <task1_handler>:

/* USER CODE BEGIN 4 */
void task1_handler(void *parm)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parm );
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f003 f8d3 	bl	8003b08 <puts>
 8000962:	e7fb      	b.n	800095c <task1_handler+0x8>

08000964 <task2_handler>:
	}
}
void task2_handler(void *parm)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parm );
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f003 f8cb 	bl	8003b08 <puts>
 8000972:	e7fb      	b.n	800096c <task2_handler+0x8>

08000974 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d101      	bne.n	800098a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000986:	f000 f9ff 	bl	8000d88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40001000 	.word	0x40001000

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <Error_Handler+0x8>
	...

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_MspInit+0x54>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <HAL_MspInit+0x54>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_MspInit+0x54>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <HAL_MspInit+0x54>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_MspInit+0x54>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_MspInit+0x54>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	210f      	movs	r1, #15
 80009e6:	f06f 0001 	mvn.w	r0, #1
 80009ea:	f000 faa5 	bl	8000f38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08e      	sub	sp, #56	; 0x38
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	4b33      	ldr	r3, [pc, #204]	; (8000ae0 <HAL_InitTick+0xe4>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	4a32      	ldr	r2, [pc, #200]	; (8000ae0 <HAL_InitTick+0xe4>)
 8000a16:	f043 0310 	orr.w	r3, r3, #16
 8000a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1c:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <HAL_InitTick+0xe4>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f003 0310 	and.w	r3, r3, #16
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a28:	f107 0210 	add.w	r2, r7, #16
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 f8e4 	bl	8001c00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d103      	bne.n	8000a4a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a42:	f001 f8c9 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8000a46:	6378      	str	r0, [r7, #52]	; 0x34
 8000a48:	e004      	b.n	8000a54 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a4a:	f001 f8c5 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a56:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <HAL_InitTick+0xe8>)
 8000a58:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5c:	0c9b      	lsrs	r3, r3, #18
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a64:	4a21      	ldr	r2, [pc, #132]	; (8000aec <HAL_InitTick+0xf0>)
 8000a66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a6e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a70:	4a1d      	ldr	r2, [pc, #116]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a74:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a88:	4817      	ldr	r0, [pc, #92]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a8a:	f001 f8eb 	bl	8001c64 <HAL_TIM_Base_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d11b      	bne.n	8000ad4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a9c:	4812      	ldr	r0, [pc, #72]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a9e:	f001 f93b 	bl	8001d18 <HAL_TIM_Base_Start_IT>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000aa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d111      	bne.n	8000ad4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ab0:	2036      	movs	r0, #54	; 0x36
 8000ab2:	f000 fa5d 	bl	8000f70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d808      	bhi.n	8000ace <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	2036      	movs	r0, #54	; 0x36
 8000ac2:	f000 fa39 	bl	8000f38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_InitTick+0xf4>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	e002      	b.n	8000ad4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3738      	adds	r7, #56	; 0x38
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	431bde83 	.word	0x431bde83
 8000ae8:	20000354 	.word	0x20000354
 8000aec:	40001000 	.word	0x40001000
 8000af0:	20000004 	.word	0x20000004

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <TIM6_DAC_IRQHandler+0x10>)
 8000b26:	f001 f967 	bl	8001df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000354 	.word	0x20000354

08000b34 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <ITM_SendChar+0x48>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <ITM_SendChar+0x48>)
 8000b44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b48:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <ITM_SendChar+0x4c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a0c      	ldr	r2, [pc, #48]	; (8000b80 <ITM_SendChar+0x4c>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b56:	bf00      	nop
 8000b58:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0f8      	beq.n	8000b58 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	6013      	str	r3, [r2, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000edfc 	.word	0xe000edfc
 8000b80:	e0000e00 	.word	0xe0000e00

08000b84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e00a      	b.n	8000bac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b96:	f3af 8000 	nop.w
 8000b9a:	4601      	mov	r1, r0
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	60ba      	str	r2, [r7, #8]
 8000ba2:	b2ca      	uxtb	r2, r1
 8000ba4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbf0      	blt.n	8000b96 <_read+0x12>
  }

  return len;
 8000bb4:	687b      	ldr	r3, [r7, #4]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	e009      	b.n	8000be4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	60ba      	str	r2, [r7, #8]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ffab 	bl	8000b34 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dbf1      	blt.n	8000bd0 <_write+0x12>
  }
  return len;
 8000bec:	687b      	ldr	r3, [r7, #4]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <_close>:

int _close(int file)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c1e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <_isatty>:

int _isatty(int file)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c68:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <_sbrk+0x5c>)
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <_sbrk+0x60>)
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d102      	bne.n	8000c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <_sbrk+0x64>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <_sbrk+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d207      	bcs.n	8000ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c90:	f002 fd0c 	bl	80036ac <__errno>
 8000c94:	4603      	mov	r3, r0
 8000c96:	220c      	movs	r2, #12
 8000c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	e009      	b.n	8000cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <_sbrk+0x64>)
 8000cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20020000 	.word	0x20020000
 8000cc0:	00000400 	.word	0x00000400
 8000cc4:	2000039c 	.word	0x2000039c
 8000cc8:	20004108 	.word	0x20004108

08000ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <SystemInit+0x20>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <SystemInit+0x20>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cf6:	490e      	ldr	r1, [pc, #56]	; (8000d30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d0c:	4c0b      	ldr	r4, [pc, #44]	; (8000d3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d1a:	f7ff ffd7 	bl	8000ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1e:	f002 fdc1 	bl	80038a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d22:	f7ff fd73 	bl	800080c <main>
  bx  lr    
 8000d26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d30:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d34:	080042e8 	.word	0x080042e8
  ldr r2, =_sbss
 8000d38:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d3c:	20004108 	.word	0x20004108

08000d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC_IRQHandler>
	...

08000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <HAL_Init+0x40>)
 8000d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_Init+0x40>)
 8000d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <HAL_Init+0x40>)
 8000d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f8d8 	bl	8000f22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	200f      	movs	r0, #15
 8000d74:	f7ff fe42 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d78:	f7ff fe14 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023c00 	.word	0x40023c00

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008
 8000dac:	200003a0 	.word	0x200003a0

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	200003a0 	.word	0x200003a0

08000dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db0b      	blt.n	8000e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 021f 	and.w	r2, r3, #31
 8000e44:	4907      	ldr	r1, [pc, #28]	; (8000e64 <__NVIC_EnableIRQ+0x38>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	; 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ff4c 	bl	8000dc8 <__NVIC_SetPriorityGrouping>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4a:	f7ff ff61 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8000f4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	68b9      	ldr	r1, [r7, #8]
 8000f54:	6978      	ldr	r0, [r7, #20]
 8000f56:	f7ff ffb1 	bl	8000ebc <NVIC_EncodePriority>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff80 	bl	8000e68 <__NVIC_SetPriority>
}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff54 	bl	8000e2c <__NVIC_EnableIRQ>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	e16b      	b.n	8001280 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 815a 	bne.w	800127a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d005      	beq.n	8000fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d130      	bne.n	8001040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001014:	2201      	movs	r2, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	f003 0201 	and.w	r2, r3, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b03      	cmp	r3, #3
 800104a:	d017      	beq.n	800107c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d123      	bne.n	80010d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	69b9      	ldr	r1, [r7, #24]
 80010cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0203 	and.w	r2, r3, #3
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80b4 	beq.w	800127a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b60      	ldr	r3, [pc, #384]	; (8001298 <HAL_GPIO_Init+0x30c>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a5f      	ldr	r2, [pc, #380]	; (8001298 <HAL_GPIO_Init+0x30c>)
 800111c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <HAL_GPIO_Init+0x30c>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112e:	4a5b      	ldr	r2, [pc, #364]	; (800129c <HAL_GPIO_Init+0x310>)
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a52      	ldr	r2, [pc, #328]	; (80012a0 <HAL_GPIO_Init+0x314>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d02b      	beq.n	80011b2 <HAL_GPIO_Init+0x226>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a51      	ldr	r2, [pc, #324]	; (80012a4 <HAL_GPIO_Init+0x318>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d025      	beq.n	80011ae <HAL_GPIO_Init+0x222>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a50      	ldr	r2, [pc, #320]	; (80012a8 <HAL_GPIO_Init+0x31c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d01f      	beq.n	80011aa <HAL_GPIO_Init+0x21e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4f      	ldr	r2, [pc, #316]	; (80012ac <HAL_GPIO_Init+0x320>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d019      	beq.n	80011a6 <HAL_GPIO_Init+0x21a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4e      	ldr	r2, [pc, #312]	; (80012b0 <HAL_GPIO_Init+0x324>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0x216>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4d      	ldr	r2, [pc, #308]	; (80012b4 <HAL_GPIO_Init+0x328>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00d      	beq.n	800119e <HAL_GPIO_Init+0x212>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4c      	ldr	r2, [pc, #304]	; (80012b8 <HAL_GPIO_Init+0x32c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x20e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4b      	ldr	r2, [pc, #300]	; (80012bc <HAL_GPIO_Init+0x330>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_GPIO_Init+0x20a>
 8001192:	2307      	movs	r3, #7
 8001194:	e00e      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 8001196:	2308      	movs	r3, #8
 8001198:	e00c      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 800119a:	2306      	movs	r3, #6
 800119c:	e00a      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 800119e:	2305      	movs	r3, #5
 80011a0:	e008      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 80011a2:	2304      	movs	r3, #4
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 80011a6:	2303      	movs	r3, #3
 80011a8:	e004      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e002      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 80011b2:	2300      	movs	r3, #0
 80011b4:	69fa      	ldr	r2, [r7, #28]
 80011b6:	f002 0203 	and.w	r2, r2, #3
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	4093      	lsls	r3, r2
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c4:	4935      	ldr	r1, [pc, #212]	; (800129c <HAL_GPIO_Init+0x310>)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d2:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <HAL_GPIO_Init+0x334>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f6:	4a32      	ldr	r2, [pc, #200]	; (80012c0 <HAL_GPIO_Init+0x334>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011fc:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <HAL_GPIO_Init+0x334>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001220:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <HAL_GPIO_Init+0x334>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <HAL_GPIO_Init+0x334>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124a:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <HAL_GPIO_Init+0x334>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <HAL_GPIO_Init+0x334>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001274:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <HAL_GPIO_Init+0x334>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3301      	adds	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	2b0f      	cmp	r3, #15
 8001284:	f67f ae90 	bls.w	8000fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40013800 	.word	0x40013800
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40021400 	.word	0x40021400
 80012b8:	40021800 	.word	0x40021800
 80012bc:	40021c00 	.word	0x40021c00
 80012c0:	40013c00 	.word	0x40013c00

080012c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d4:	787b      	ldrb	r3, [r7, #1]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e0:	e003      	b.n	80012ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	619a      	str	r2, [r3, #24]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e267      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d075      	beq.n	8001402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001316:	4b88      	ldr	r3, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b04      	cmp	r3, #4
 8001320:	d00c      	beq.n	800133c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001322:	4b85      	ldr	r3, [pc, #532]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800132a:	2b08      	cmp	r3, #8
 800132c:	d112      	bne.n	8001354 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132e:	4b82      	ldr	r3, [pc, #520]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800133a:	d10b      	bne.n	8001354 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	4b7e      	ldr	r3, [pc, #504]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d05b      	beq.n	8001400 <HAL_RCC_OscConfig+0x108>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d157      	bne.n	8001400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e242      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800135c:	d106      	bne.n	800136c <HAL_RCC_OscConfig+0x74>
 800135e:	4b76      	ldr	r3, [pc, #472]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a75      	ldr	r2, [pc, #468]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e01d      	b.n	80013a8 <HAL_RCC_OscConfig+0xb0>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0x98>
 8001376:	4b70      	ldr	r3, [pc, #448]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a6f      	ldr	r2, [pc, #444]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800137c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	4b6d      	ldr	r3, [pc, #436]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a6c      	ldr	r2, [pc, #432]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e00b      	b.n	80013a8 <HAL_RCC_OscConfig+0xb0>
 8001390:	4b69      	ldr	r3, [pc, #420]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a68      	ldr	r2, [pc, #416]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b66      	ldr	r3, [pc, #408]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a65      	ldr	r2, [pc, #404]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 80013a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d013      	beq.n	80013d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fcfe 	bl	8000db0 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fcfa 	bl	8000db0 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	; 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e207      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	4b5b      	ldr	r3, [pc, #364]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0xc0>
 80013d6:	e014      	b.n	8001402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fcea 	bl	8000db0 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff fce6 	bl	8000db0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e1f3      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f2:	4b51      	ldr	r3, [pc, #324]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0xe8>
 80013fe:	e000      	b.n	8001402 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d063      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800140e:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141a:	4b47      	ldr	r3, [pc, #284]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001422:	2b08      	cmp	r3, #8
 8001424:	d11c      	bne.n	8001460 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001426:	4b44      	ldr	r3, [pc, #272]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d116      	bne.n	8001460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001432:	4b41      	ldr	r3, [pc, #260]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_RCC_OscConfig+0x152>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d001      	beq.n	800144a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e1c7      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144a:	4b3b      	ldr	r3, [pc, #236]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4937      	ldr	r1, [pc, #220]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145e:	e03a      	b.n	80014d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d020      	beq.n	80014aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001468:	4b34      	ldr	r3, [pc, #208]	; (800153c <HAL_RCC_OscConfig+0x244>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff fc9f 	bl	8000db0 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff fc9b 	bl	8000db0 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e1a8      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4b28      	ldr	r3, [pc, #160]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4925      	ldr	r1, [pc, #148]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
 80014a8:	e015      	b.n	80014d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <HAL_RCC_OscConfig+0x244>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fc7e 	bl	8000db0 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff fc7a 	bl	8000db0 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e187      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d036      	beq.n	8001550 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d016      	beq.n	8001518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_RCC_OscConfig+0x248>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f0:	f7ff fc5e 	bl	8000db0 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff fc5a 	bl	8000db0 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e167      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800150c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x200>
 8001516:	e01b      	b.n	8001550 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_RCC_OscConfig+0x248>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7ff fc47 	bl	8000db0 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001524:	e00e      	b.n	8001544 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001526:	f7ff fc43 	bl	8000db0 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d907      	bls.n	8001544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e150      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
 8001538:	40023800 	.word	0x40023800
 800153c:	42470000 	.word	0x42470000
 8001540:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001544:	4b88      	ldr	r3, [pc, #544]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1ea      	bne.n	8001526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8097 	beq.w	800168c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10f      	bne.n	800158e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b7d      	ldr	r3, [pc, #500]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a7c      	ldr	r2, [pc, #496]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b7a      	ldr	r3, [pc, #488]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158a:	2301      	movs	r3, #1
 800158c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	4b77      	ldr	r3, [pc, #476]	; (800176c <HAL_RCC_OscConfig+0x474>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d118      	bne.n	80015cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159a:	4b74      	ldr	r3, [pc, #464]	; (800176c <HAL_RCC_OscConfig+0x474>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a73      	ldr	r2, [pc, #460]	; (800176c <HAL_RCC_OscConfig+0x474>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fc03 	bl	8000db0 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7ff fbff 	bl	8000db0 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e10c      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	4b6a      	ldr	r3, [pc, #424]	; (800176c <HAL_RCC_OscConfig+0x474>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x2ea>
 80015d4:	4b64      	ldr	r3, [pc, #400]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a63      	ldr	r2, [pc, #396]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	e01c      	b.n	800161c <HAL_RCC_OscConfig+0x324>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x30c>
 80015ea:	4b5f      	ldr	r3, [pc, #380]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	4a5e      	ldr	r2, [pc, #376]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6713      	str	r3, [r2, #112]	; 0x70
 80015f6:	4b5c      	ldr	r3, [pc, #368]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	4a5b      	ldr	r2, [pc, #364]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6713      	str	r3, [r2, #112]	; 0x70
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0x324>
 8001604:	4b58      	ldr	r3, [pc, #352]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001608:	4a57      	ldr	r2, [pc, #348]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	6713      	str	r3, [r2, #112]	; 0x70
 8001610:	4b55      	ldr	r3, [pc, #340]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	4a54      	ldr	r2, [pc, #336]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001616:	f023 0304 	bic.w	r3, r3, #4
 800161a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d015      	beq.n	8001650 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fbc4 	bl	8000db0 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162a:	e00a      	b.n	8001642 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162c:	f7ff fbc0 	bl	8000db0 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	; 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e0cb      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001642:	4b49      	ldr	r3, [pc, #292]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0ee      	beq.n	800162c <HAL_RCC_OscConfig+0x334>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff fbae 	bl	8000db0 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001656:	e00a      	b.n	800166e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001658:	f7ff fbaa 	bl	8000db0 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e0b5      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166e:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1ee      	bne.n	8001658 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800167a:	7dfb      	ldrb	r3, [r7, #23]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d105      	bne.n	800168c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	4a38      	ldr	r2, [pc, #224]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800168a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80a1 	beq.w	80017d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001696:	4b34      	ldr	r3, [pc, #208]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d05c      	beq.n	800175c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d141      	bne.n	800172e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016aa:	4b31      	ldr	r3, [pc, #196]	; (8001770 <HAL_RCC_OscConfig+0x478>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb7e 	bl	8000db0 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff fb7a 	bl	8000db0 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e087      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69da      	ldr	r2, [r3, #28]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	019b      	lsls	r3, r3, #6
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	3b01      	subs	r3, #1
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	061b      	lsls	r3, r3, #24
 80016fa:	491b      	ldr	r1, [pc, #108]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_RCC_OscConfig+0x478>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fb53 	bl	8000db0 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff fb4f 	bl	8000db0 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e05c      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x416>
 800172c:	e054      	b.n	80017d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_RCC_OscConfig+0x478>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fb3c 	bl	8000db0 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff fb38 	bl	8000db0 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e045      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x444>
 800175a:	e03d      	b.n	80017d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d107      	bne.n	8001774 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e038      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
 8001768:	40023800 	.word	0x40023800
 800176c:	40007000 	.word	0x40007000
 8001770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_RCC_OscConfig+0x4ec>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d028      	beq.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d121      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d11a      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d111      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	085b      	lsrs	r3, r3, #1
 80017bc:	3b01      	subs	r3, #1
 80017be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800

080017e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0cc      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017fc:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d90c      	bls.n	8001824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b65      	ldr	r3, [pc, #404]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0b8      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800183c:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4a58      	ldr	r2, [pc, #352]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001846:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800185e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001860:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	494d      	ldr	r1, [pc, #308]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d044      	beq.n	8001908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d119      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e07f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d003      	beq.n	80018a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a6:	4b3f      	ldr	r3, [pc, #252]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e06f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b6:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e067      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f023 0203 	bic.w	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4934      	ldr	r1, [pc, #208]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d8:	f7ff fa6a 	bl	8000db0 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e0:	f7ff fa66 	bl	8000db0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e04f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 020c 	and.w	r2, r3, #12
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	429a      	cmp	r2, r3
 8001906:	d1eb      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d20c      	bcs.n	8001930 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e032      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4916      	ldr	r1, [pc, #88]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	490e      	ldr	r1, [pc, #56]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800196e:	f000 f821 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 8001972:	4602      	mov	r2, r0
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	490a      	ldr	r1, [pc, #40]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	5ccb      	ldrb	r3, [r1, r3]
 8001982:	fa22 f303 	lsr.w	r3, r2, r3
 8001986:	4a09      	ldr	r2, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_RCC_ClockConfig+0x1c8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f834 	bl	80009fc <HAL_InitTick>

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00
 80019a4:	40023800 	.word	0x40023800
 80019a8:	0800425c 	.word	0x0800425c
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000004 	.word	0x20000004

080019b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b8:	b094      	sub	sp, #80	; 0x50
 80019ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	647b      	str	r3, [r7, #68]	; 0x44
 80019c0:	2300      	movs	r3, #0
 80019c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019c4:	2300      	movs	r3, #0
 80019c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019cc:	4b79      	ldr	r3, [pc, #484]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d00d      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x40>
 80019d8:	2b08      	cmp	r3, #8
 80019da:	f200 80e1 	bhi.w	8001ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x34>
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d003      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0x3a>
 80019e6:	e0db      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e8:	4b73      	ldr	r3, [pc, #460]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019ec:	e0db      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ee:	4b73      	ldr	r3, [pc, #460]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x208>)
 80019f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019f2:	e0d8      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f4:	4b6f      	ldr	r3, [pc, #444]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019fe:	4b6d      	ldr	r3, [pc, #436]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d063      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0a:	4b6a      	ldr	r3, [pc, #424]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	099b      	lsrs	r3, r3, #6
 8001a10:	2200      	movs	r2, #0
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
 8001a22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a26:	4622      	mov	r2, r4
 8001a28:	462b      	mov	r3, r5
 8001a2a:	f04f 0000 	mov.w	r0, #0
 8001a2e:	f04f 0100 	mov.w	r1, #0
 8001a32:	0159      	lsls	r1, r3, #5
 8001a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a38:	0150      	lsls	r0, r2, #5
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4621      	mov	r1, r4
 8001a40:	1a51      	subs	r1, r2, r1
 8001a42:	6139      	str	r1, [r7, #16]
 8001a44:	4629      	mov	r1, r5
 8001a46:	eb63 0301 	sbc.w	r3, r3, r1
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a58:	4659      	mov	r1, fp
 8001a5a:	018b      	lsls	r3, r1, #6
 8001a5c:	4651      	mov	r1, sl
 8001a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a62:	4651      	mov	r1, sl
 8001a64:	018a      	lsls	r2, r1, #6
 8001a66:	4651      	mov	r1, sl
 8001a68:	ebb2 0801 	subs.w	r8, r2, r1
 8001a6c:	4659      	mov	r1, fp
 8001a6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a86:	4690      	mov	r8, r2
 8001a88:	4699      	mov	r9, r3
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	eb18 0303 	adds.w	r3, r8, r3
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	462b      	mov	r3, r5
 8001a94:	eb49 0303 	adc.w	r3, r9, r3
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	024b      	lsls	r3, r1, #9
 8001aaa:	4621      	mov	r1, r4
 8001aac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	024a      	lsls	r2, r1, #9
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aba:	2200      	movs	r2, #0
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001abe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ac0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ac4:	f7fe fb84 	bl	80001d0 <__aeabi_uldivmod>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4613      	mov	r3, r2
 8001ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ad0:	e058      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad2:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	099b      	lsrs	r3, r3, #6
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	4611      	mov	r1, r2
 8001ade:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ae2:	623b      	str	r3, [r7, #32]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aec:	4642      	mov	r2, r8
 8001aee:	464b      	mov	r3, r9
 8001af0:	f04f 0000 	mov.w	r0, #0
 8001af4:	f04f 0100 	mov.w	r1, #0
 8001af8:	0159      	lsls	r1, r3, #5
 8001afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001afe:	0150      	lsls	r0, r2, #5
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4641      	mov	r1, r8
 8001b06:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b0a:	4649      	mov	r1, r9
 8001b0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b24:	ebb2 040a 	subs.w	r4, r2, sl
 8001b28:	eb63 050b 	sbc.w	r5, r3, fp
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	00eb      	lsls	r3, r5, #3
 8001b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b3a:	00e2      	lsls	r2, r4, #3
 8001b3c:	4614      	mov	r4, r2
 8001b3e:	461d      	mov	r5, r3
 8001b40:	4643      	mov	r3, r8
 8001b42:	18e3      	adds	r3, r4, r3
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	464b      	mov	r3, r9
 8001b48:	eb45 0303 	adc.w	r3, r5, r3
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	028b      	lsls	r3, r1, #10
 8001b5e:	4621      	mov	r1, r4
 8001b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b64:	4621      	mov	r1, r4
 8001b66:	028a      	lsls	r2, r1, #10
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	61fa      	str	r2, [r7, #28]
 8001b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b78:	f7fe fb2a 	bl	80001d0 <__aeabi_uldivmod>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4613      	mov	r3, r2
 8001b82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b9e:	e002      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3750      	adds	r7, #80	; 0x50
 8001bac:	46bd      	mov	sp, r7
 8001bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	00f42400 	.word	0x00f42400
 8001bbc:	007a1200 	.word	0x007a1200

08001bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000000 	.word	0x20000000

08001bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bdc:	f7ff fff0 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001be0:	4602      	mov	r2, r0
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	0a9b      	lsrs	r3, r3, #10
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	4903      	ldr	r1, [pc, #12]	; (8001bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bee:	5ccb      	ldrb	r3, [r1, r3]
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	0800426c 	.word	0x0800426c

08001c00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_GetClockConfig+0x5c>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0203 	and.w	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_RCC_GetClockConfig+0x5c>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <HAL_RCC_GetClockConfig+0x5c>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_GetClockConfig+0x5c>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	08db      	lsrs	r3, r3, #3
 8001c3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_RCC_GetClockConfig+0x60>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0207 	and.w	r2, r3, #7
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	601a      	str	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e041      	b.n	8001cfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d106      	bne.n	8001c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f839 	bl	8001d02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2202      	movs	r2, #2
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	f000 f9d8 	bl	8002058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d001      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e04e      	b.n	8001dce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <HAL_TIM_Base_Start_IT+0xc4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d022      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x80>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5a:	d01d      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x80>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d018      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x80>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d013      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x80>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00e      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x80>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <HAL_TIM_Base_Start_IT+0xd4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d009      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x80>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d004      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x80>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a18      	ldr	r2, [pc, #96]	; (8001df4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d111      	bne.n	8001dbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d010      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0201 	orr.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dba:	e007      	b.n	8001dcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40000800 	.word	0x40000800
 8001de8:	40000c00 	.word	0x40000c00
 8001dec:	40010400 	.word	0x40010400
 8001df0:	40014000 	.word	0x40014000
 8001df4:	40001800 	.word	0x40001800

08001df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d122      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d11b      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0202 	mvn.w	r2, #2
 8001e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8ee 	bl	800201c <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8e0 	bl	8002008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f8f1 	bl	8002030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d122      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0204 	mvn.w	r2, #4
 8001e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f8c4 	bl	800201c <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8b6 	bl	8002008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f8c7 	bl	8002030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d122      	bne.n	8001efc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d11b      	bne.n	8001efc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0208 	mvn.w	r2, #8
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f89a 	bl	800201c <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f88c 	bl	8002008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f89d 	bl	8002030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d122      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d11b      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0210 	mvn.w	r2, #16
 8001f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2208      	movs	r2, #8
 8001f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f870 	bl	800201c <HAL_TIM_IC_CaptureCallback>
 8001f3c:	e005      	b.n	8001f4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f862 	bl	8002008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f873 	bl	8002030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d10e      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d107      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0201 	mvn.w	r2, #1
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe fcfc 	bl	8000974 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f86:	2b80      	cmp	r3, #128	; 0x80
 8001f88:	d10e      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f94:	2b80      	cmp	r3, #128	; 0x80
 8001f96:	d107      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f902 	bl	80021ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb2:	2b40      	cmp	r3, #64	; 0x40
 8001fb4:	d10e      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc0:	2b40      	cmp	r3, #64	; 0x40
 8001fc2:	d107      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f838 	bl	8002044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	2b20      	cmp	r3, #32
 8001fe0:	d10e      	bne.n	8002000 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b20      	cmp	r3, #32
 8001fee:	d107      	bne.n	8002000 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0220 	mvn.w	r2, #32
 8001ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f8cc 	bl	8002198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a40      	ldr	r2, [pc, #256]	; (800216c <TIM_Base_SetConfig+0x114>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d013      	beq.n	8002098 <TIM_Base_SetConfig+0x40>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002076:	d00f      	beq.n	8002098 <TIM_Base_SetConfig+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3d      	ldr	r2, [pc, #244]	; (8002170 <TIM_Base_SetConfig+0x118>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d00b      	beq.n	8002098 <TIM_Base_SetConfig+0x40>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a3c      	ldr	r2, [pc, #240]	; (8002174 <TIM_Base_SetConfig+0x11c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d007      	beq.n	8002098 <TIM_Base_SetConfig+0x40>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a3b      	ldr	r2, [pc, #236]	; (8002178 <TIM_Base_SetConfig+0x120>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d003      	beq.n	8002098 <TIM_Base_SetConfig+0x40>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a3a      	ldr	r2, [pc, #232]	; (800217c <TIM_Base_SetConfig+0x124>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d108      	bne.n	80020aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a2f      	ldr	r2, [pc, #188]	; (800216c <TIM_Base_SetConfig+0x114>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d02b      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b8:	d027      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a2c      	ldr	r2, [pc, #176]	; (8002170 <TIM_Base_SetConfig+0x118>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d023      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a2b      	ldr	r2, [pc, #172]	; (8002174 <TIM_Base_SetConfig+0x11c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01f      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a2a      	ldr	r2, [pc, #168]	; (8002178 <TIM_Base_SetConfig+0x120>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d01b      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a29      	ldr	r2, [pc, #164]	; (800217c <TIM_Base_SetConfig+0x124>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d017      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a28      	ldr	r2, [pc, #160]	; (8002180 <TIM_Base_SetConfig+0x128>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d013      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a27      	ldr	r2, [pc, #156]	; (8002184 <TIM_Base_SetConfig+0x12c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00f      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a26      	ldr	r2, [pc, #152]	; (8002188 <TIM_Base_SetConfig+0x130>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00b      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a25      	ldr	r2, [pc, #148]	; (800218c <TIM_Base_SetConfig+0x134>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d007      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a24      	ldr	r2, [pc, #144]	; (8002190 <TIM_Base_SetConfig+0x138>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d003      	beq.n	800210a <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a23      	ldr	r2, [pc, #140]	; (8002194 <TIM_Base_SetConfig+0x13c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d108      	bne.n	800211c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a0a      	ldr	r2, [pc, #40]	; (800216c <TIM_Base_SetConfig+0x114>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d003      	beq.n	8002150 <TIM_Base_SetConfig+0xf8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a0c      	ldr	r2, [pc, #48]	; (800217c <TIM_Base_SetConfig+0x124>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d103      	bne.n	8002158 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	615a      	str	r2, [r3, #20]
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40010000 	.word	0x40010000
 8002170:	40000400 	.word	0x40000400
 8002174:	40000800 	.word	0x40000800
 8002178:	40000c00 	.word	0x40000c00
 800217c:	40010400 	.word	0x40010400
 8002180:	40014000 	.word	0x40014000
 8002184:	40014400 	.word	0x40014400
 8002188:	40014800 	.word	0x40014800
 800218c:	40001800 	.word	0x40001800
 8002190:	40001c00 	.word	0x40001c00
 8002194:	40002000 	.word	0x40002000

08002198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80021ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021d2:	2b84      	cmp	r3, #132	; 0x84
 80021d4:	d005      	beq.n	80021e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80021d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	3303      	adds	r3, #3
 80021e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80021e2:	68fb      	ldr	r3, [r7, #12]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80021f4:	f000 faf6 	bl	80027e4 <vTaskStartScheduler>
  
  return osOK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	bd80      	pop	{r7, pc}

080021fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80021fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002200:	b089      	sub	sp, #36	; 0x24
 8002202:	af04      	add	r7, sp, #16
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <osThreadCreate+0x54>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01c      	beq.n	8002252 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685c      	ldr	r4, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681d      	ldr	r5, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691e      	ldr	r6, [r3, #16]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ffc8 	bl	80021c0 <makeFreeRtosPriority>
 8002230:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800223a:	9202      	str	r2, [sp, #8]
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	9100      	str	r1, [sp, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4632      	mov	r2, r6
 8002244:	4629      	mov	r1, r5
 8002246:	4620      	mov	r0, r4
 8002248:	f000 f8ed 	bl	8002426 <xTaskCreateStatic>
 800224c:	4603      	mov	r3, r0
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e01c      	b.n	800228c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685c      	ldr	r4, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800225e:	b29e      	uxth	r6, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ffaa 	bl	80021c0 <makeFreeRtosPriority>
 800226c:	4602      	mov	r2, r0
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	9200      	str	r2, [sp, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	4632      	mov	r2, r6
 800227a:	4629      	mov	r1, r5
 800227c:	4620      	mov	r0, r4
 800227e:	f000 f92f 	bl	80024e0 <xTaskCreate>
 8002282:	4603      	mov	r3, r0
 8002284:	2b01      	cmp	r3, #1
 8002286:	d001      	beq.n	800228c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002288:	2300      	movs	r3, #0
 800228a:	e000      	b.n	800228e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800228c:	68fb      	ldr	r3, [r7, #12]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002296 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <osDelay+0x16>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	e000      	b.n	80022ae <osDelay+0x18>
 80022ac:	2301      	movs	r3, #1
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fa64 	bl	800277c <vTaskDelay>
  
  return osOK;
 80022b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f103 0208 	add.w	r2, r3, #8
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f04f 32ff 	mov.w	r2, #4294967295
 80022d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f103 0208 	add.w	r2, r3, #8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f103 0208 	add.w	r2, r3, #8
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	601a      	str	r2, [r3, #0]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002376:	d103      	bne.n	8002380 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e00c      	b.n	800239a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3308      	adds	r3, #8
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	e002      	b.n	800238e <vListInsert+0x2e>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	429a      	cmp	r2, r3
 8002398:	d2f6      	bcs.n	8002388 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	601a      	str	r2, [r3, #0]
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023d2:	b480      	push	{r7}
 80023d4:	b085      	sub	sp, #20
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6892      	ldr	r2, [r2, #8]
 80023e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6852      	ldr	r2, [r2, #4]
 80023f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d103      	bne.n	8002406 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	1e5a      	subs	r2, r3, #1
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002426:	b580      	push	{r7, lr}
 8002428:	b08e      	sub	sp, #56	; 0x38
 800242a:	af04      	add	r7, sp, #16
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10a      	bne.n	8002450 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800243a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800244c:	bf00      	nop
 800244e:	e7fe      	b.n	800244e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10a      	bne.n	800246c <xTaskCreateStatic+0x46>
	__asm volatile
 8002456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245a:	f383 8811 	msr	BASEPRI, r3
 800245e:	f3bf 8f6f 	isb	sy
 8002462:	f3bf 8f4f 	dsb	sy
 8002466:	61fb      	str	r3, [r7, #28]
}
 8002468:	bf00      	nop
 800246a:	e7fe      	b.n	800246a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800246c:	23b4      	movs	r3, #180	; 0xb4
 800246e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2bb4      	cmp	r3, #180	; 0xb4
 8002474:	d00a      	beq.n	800248c <xTaskCreateStatic+0x66>
	__asm volatile
 8002476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	61bb      	str	r3, [r7, #24]
}
 8002488:	bf00      	nop
 800248a:	e7fe      	b.n	800248a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800248c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800248e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01e      	beq.n	80024d2 <xTaskCreateStatic+0xac>
 8002494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002496:	2b00      	cmp	r3, #0
 8002498:	d01b      	beq.n	80024d2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800249a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80024ac:	2300      	movs	r3, #0
 80024ae:	9303      	str	r3, [sp, #12]
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	9302      	str	r3, [sp, #8]
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f851 	bl	800256c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024cc:	f000 f8ec 	bl	80026a8 <prvAddNewTaskToReadyList>
 80024d0:	e001      	b.n	80024d6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80024d6:	697b      	ldr	r3, [r7, #20]
	}
 80024d8:	4618      	mov	r0, r3
 80024da:	3728      	adds	r7, #40	; 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	; 0x30
 80024e4:	af04      	add	r7, sp, #16
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 feef 	bl	80032d8 <pvPortMalloc>
 80024fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00e      	beq.n	8002520 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002502:	20b4      	movs	r0, #180	; 0xb4
 8002504:	f000 fee8 	bl	80032d8 <pvPortMalloc>
 8002508:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
 8002516:	e005      	b.n	8002524 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002518:	6978      	ldr	r0, [r7, #20]
 800251a:	f000 ffa9 	bl	8003470 <vPortFree>
 800251e:	e001      	b.n	8002524 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d017      	beq.n	800255a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	2300      	movs	r3, #0
 8002536:	9303      	str	r3, [sp, #12]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	9302      	str	r3, [sp, #8]
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f80f 	bl	800256c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800254e:	69f8      	ldr	r0, [r7, #28]
 8002550:	f000 f8aa 	bl	80026a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002554:	2301      	movs	r3, #1
 8002556:	61bb      	str	r3, [r7, #24]
 8002558:	e002      	b.n	8002560 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
 800255e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002560:	69bb      	ldr	r3, [r7, #24]
	}
 8002562:	4618      	mov	r0, r3
 8002564:	3720      	adds	r7, #32
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002584:	3b01      	subs	r3, #1
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	f023 0307 	bic.w	r3, r3, #7
 8002592:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800259e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a2:	f383 8811 	msr	BASEPRI, r3
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	617b      	str	r3, [r7, #20]
}
 80025b0:	bf00      	nop
 80025b2:	e7fe      	b.n	80025b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d01f      	beq.n	80025fa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	e012      	b.n	80025e6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	4413      	add	r3, r2
 80025c6:	7819      	ldrb	r1, [r3, #0]
 80025c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	3334      	adds	r3, #52	; 0x34
 80025d0:	460a      	mov	r2, r1
 80025d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	4413      	add	r3, r2
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d006      	beq.n	80025ee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	3301      	adds	r3, #1
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	2b0f      	cmp	r3, #15
 80025ea:	d9e9      	bls.n	80025c0 <prvInitialiseNewTask+0x54>
 80025ec:	e000      	b.n	80025f0 <prvInitialiseNewTask+0x84>
			{
				break;
 80025ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025f8:	e003      	b.n	8002602 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002604:	2b06      	cmp	r3, #6
 8002606:	d901      	bls.n	800260c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002608:	2306      	movs	r3, #6
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002610:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002616:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261a:	2200      	movs	r2, #0
 800261c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	3304      	adds	r3, #4
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fe6b 	bl	80022fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	3318      	adds	r3, #24
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fe66 	bl	80022fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002636:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263a:	f1c3 0207 	rsb	r2, r3, #7
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002646:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	2200      	movs	r2, #0
 800264c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	2200      	movs	r2, #0
 8002654:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265a:	334c      	adds	r3, #76	; 0x4c
 800265c:	2260      	movs	r2, #96	; 0x60
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f001 f946 	bl	80038f2 <memset>
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	4a0c      	ldr	r2, [pc, #48]	; (800269c <prvInitialiseNewTask+0x130>)
 800266a:	651a      	str	r2, [r3, #80]	; 0x50
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <prvInitialiseNewTask+0x134>)
 8002670:	655a      	str	r2, [r3, #84]	; 0x54
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	4a0b      	ldr	r2, [pc, #44]	; (80026a4 <prvInitialiseNewTask+0x138>)
 8002676:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	68f9      	ldr	r1, [r7, #12]
 800267c:	69b8      	ldr	r0, [r7, #24]
 800267e:	f000 fc1f 	bl	8002ec0 <pxPortInitialiseStack>
 8002682:	4602      	mov	r2, r0
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002692:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002694:	bf00      	nop
 8002696:	3720      	adds	r7, #32
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	08004294 	.word	0x08004294
 80026a0:	080042b4 	.word	0x080042b4
 80026a4:	08004274 	.word	0x08004274

080026a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80026b0:	f000 fd30 	bl	8003114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80026b4:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <prvAddNewTaskToReadyList+0xb8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	4a29      	ldr	r2, [pc, #164]	; (8002760 <prvAddNewTaskToReadyList+0xb8>)
 80026bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <prvAddNewTaskToReadyList+0xbc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80026c6:	4a27      	ldr	r2, [pc, #156]	; (8002764 <prvAddNewTaskToReadyList+0xbc>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026cc:	4b24      	ldr	r3, [pc, #144]	; (8002760 <prvAddNewTaskToReadyList+0xb8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d110      	bne.n	80026f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80026d4:	f000 facc 	bl	8002c70 <prvInitialiseTaskLists>
 80026d8:	e00d      	b.n	80026f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80026da:	4b23      	ldr	r3, [pc, #140]	; (8002768 <prvAddNewTaskToReadyList+0xc0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <prvAddNewTaskToReadyList+0xbc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d802      	bhi.n	80026f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80026f0:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <prvAddNewTaskToReadyList+0xbc>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80026f6:	4b1d      	ldr	r3, [pc, #116]	; (800276c <prvAddNewTaskToReadyList+0xc4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	3301      	adds	r3, #1
 80026fc:	4a1b      	ldr	r2, [pc, #108]	; (800276c <prvAddNewTaskToReadyList+0xc4>)
 80026fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	2201      	movs	r2, #1
 8002706:	409a      	lsls	r2, r3
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <prvAddNewTaskToReadyList+0xc8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4313      	orrs	r3, r2
 800270e:	4a18      	ldr	r2, [pc, #96]	; (8002770 <prvAddNewTaskToReadyList+0xc8>)
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4a15      	ldr	r2, [pc, #84]	; (8002774 <prvAddNewTaskToReadyList+0xcc>)
 8002720:	441a      	add	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3304      	adds	r3, #4
 8002726:	4619      	mov	r1, r3
 8002728:	4610      	mov	r0, r2
 800272a:	f7ff fdf5 	bl	8002318 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800272e:	f000 fd21 	bl	8003174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <prvAddNewTaskToReadyList+0xc0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00e      	beq.n	8002758 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <prvAddNewTaskToReadyList+0xbc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	429a      	cmp	r2, r3
 8002746:	d207      	bcs.n	8002758 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <prvAddNewTaskToReadyList+0xd0>)
 800274a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	200004a4 	.word	0x200004a4
 8002764:	200003a4 	.word	0x200003a4
 8002768:	200004b0 	.word	0x200004b0
 800276c:	200004c0 	.word	0x200004c0
 8002770:	200004ac 	.word	0x200004ac
 8002774:	200003a8 	.word	0x200003a8
 8002778:	e000ed04 	.word	0xe000ed04

0800277c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d017      	beq.n	80027be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <vTaskDelay+0x60>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <vTaskDelay+0x30>
	__asm volatile
 8002796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	60bb      	str	r3, [r7, #8]
}
 80027a8:	bf00      	nop
 80027aa:	e7fe      	b.n	80027aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80027ac:	f000 f884 	bl	80028b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80027b0:	2100      	movs	r1, #0
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fb1e 	bl	8002df4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80027b8:	f000 f88c 	bl	80028d4 <xTaskResumeAll>
 80027bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d107      	bne.n	80027d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <vTaskDelay+0x64>)
 80027c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80027d4:	bf00      	nop
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200004cc 	.word	0x200004cc
 80027e0:	e000ed04 	.word	0xe000ed04

080027e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	; 0x28
 80027e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80027f2:	463a      	mov	r2, r7
 80027f4:	1d39      	adds	r1, r7, #4
 80027f6:	f107 0308 	add.w	r3, r7, #8
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd fe6a 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002800:	6839      	ldr	r1, [r7, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	9202      	str	r2, [sp, #8]
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	2300      	movs	r3, #0
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2300      	movs	r3, #0
 8002810:	460a      	mov	r2, r1
 8002812:	4921      	ldr	r1, [pc, #132]	; (8002898 <vTaskStartScheduler+0xb4>)
 8002814:	4821      	ldr	r0, [pc, #132]	; (800289c <vTaskStartScheduler+0xb8>)
 8002816:	f7ff fe06 	bl	8002426 <xTaskCreateStatic>
 800281a:	4603      	mov	r3, r0
 800281c:	4a20      	ldr	r2, [pc, #128]	; (80028a0 <vTaskStartScheduler+0xbc>)
 800281e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002820:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <vTaskStartScheduler+0xbc>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002828:	2301      	movs	r3, #1
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	e001      	b.n	8002832 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d11b      	bne.n	8002870 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283c:	f383 8811 	msr	BASEPRI, r3
 8002840:	f3bf 8f6f 	isb	sy
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	613b      	str	r3, [r7, #16]
}
 800284a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800284c:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <vTaskStartScheduler+0xc0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	334c      	adds	r3, #76	; 0x4c
 8002852:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <vTaskStartScheduler+0xc4>)
 8002854:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <vTaskStartScheduler+0xc8>)
 8002858:	f04f 32ff 	mov.w	r2, #4294967295
 800285c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800285e:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <vTaskStartScheduler+0xcc>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <vTaskStartScheduler+0xd0>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800286a:	f000 fbb1 	bl	8002fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800286e:	e00e      	b.n	800288e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002876:	d10a      	bne.n	800288e <vTaskStartScheduler+0xaa>
	__asm volatile
 8002878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	60fb      	str	r3, [r7, #12]
}
 800288a:	bf00      	nop
 800288c:	e7fe      	b.n	800288c <vTaskStartScheduler+0xa8>
}
 800288e:	bf00      	nop
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	08004254 	.word	0x08004254
 800289c:	08002c41 	.word	0x08002c41
 80028a0:	200004c8 	.word	0x200004c8
 80028a4:	200003a4 	.word	0x200003a4
 80028a8:	20000010 	.word	0x20000010
 80028ac:	200004c4 	.word	0x200004c4
 80028b0:	200004b0 	.word	0x200004b0
 80028b4:	200004a8 	.word	0x200004a8

080028b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <vTaskSuspendAll+0x18>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	4a03      	ldr	r2, [pc, #12]	; (80028d0 <vTaskSuspendAll+0x18>)
 80028c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80028c6:	bf00      	nop
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	200004cc 	.word	0x200004cc

080028d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80028e2:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <xTaskResumeAll+0x114>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10a      	bne.n	8002900 <xTaskResumeAll+0x2c>
	__asm volatile
 80028ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ee:	f383 8811 	msr	BASEPRI, r3
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	603b      	str	r3, [r7, #0]
}
 80028fc:	bf00      	nop
 80028fe:	e7fe      	b.n	80028fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002900:	f000 fc08 	bl	8003114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002904:	4b38      	ldr	r3, [pc, #224]	; (80029e8 <xTaskResumeAll+0x114>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3b01      	subs	r3, #1
 800290a:	4a37      	ldr	r2, [pc, #220]	; (80029e8 <xTaskResumeAll+0x114>)
 800290c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800290e:	4b36      	ldr	r3, [pc, #216]	; (80029e8 <xTaskResumeAll+0x114>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d161      	bne.n	80029da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002916:	4b35      	ldr	r3, [pc, #212]	; (80029ec <xTaskResumeAll+0x118>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d05d      	beq.n	80029da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800291e:	e02e      	b.n	800297e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002920:	4b33      	ldr	r3, [pc, #204]	; (80029f0 <xTaskResumeAll+0x11c>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3318      	adds	r3, #24
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fd50 	bl	80023d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3304      	adds	r3, #4
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fd4b 	bl	80023d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	2201      	movs	r2, #1
 8002942:	409a      	lsls	r2, r3
 8002944:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <xTaskResumeAll+0x120>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4313      	orrs	r3, r2
 800294a:	4a2a      	ldr	r2, [pc, #168]	; (80029f4 <xTaskResumeAll+0x120>)
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4a27      	ldr	r2, [pc, #156]	; (80029f8 <xTaskResumeAll+0x124>)
 800295c:	441a      	add	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3304      	adds	r3, #4
 8002962:	4619      	mov	r1, r3
 8002964:	4610      	mov	r0, r2
 8002966:	f7ff fcd7 	bl	8002318 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <xTaskResumeAll+0x128>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	429a      	cmp	r2, r3
 8002976:	d302      	bcc.n	800297e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002978:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <xTaskResumeAll+0x12c>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800297e:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <xTaskResumeAll+0x11c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1cc      	bne.n	8002920 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800298c:	f000 fa12 	bl	8002db4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <xTaskResumeAll+0x130>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d010      	beq.n	80029be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800299c:	f000 f836 	bl	8002a0c <xTaskIncrementTick>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <xTaskResumeAll+0x12c>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f1      	bne.n	800299c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <xTaskResumeAll+0x130>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <xTaskResumeAll+0x12c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80029c6:	2301      	movs	r3, #1
 80029c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80029ca:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <xTaskResumeAll+0x134>)
 80029cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80029da:	f000 fbcb 	bl	8003174 <vPortExitCritical>

	return xAlreadyYielded;
 80029de:	68bb      	ldr	r3, [r7, #8]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	200004cc 	.word	0x200004cc
 80029ec:	200004a4 	.word	0x200004a4
 80029f0:	20000464 	.word	0x20000464
 80029f4:	200004ac 	.word	0x200004ac
 80029f8:	200003a8 	.word	0x200003a8
 80029fc:	200003a4 	.word	0x200003a4
 8002a00:	200004b8 	.word	0x200004b8
 8002a04:	200004b4 	.word	0x200004b4
 8002a08:	e000ed04 	.word	0xe000ed04

08002a0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a16:	4b4e      	ldr	r3, [pc, #312]	; (8002b50 <xTaskIncrementTick+0x144>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 808e 	bne.w	8002b3c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a20:	4b4c      	ldr	r3, [pc, #304]	; (8002b54 <xTaskIncrementTick+0x148>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3301      	adds	r3, #1
 8002a26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002a28:	4a4a      	ldr	r2, [pc, #296]	; (8002b54 <xTaskIncrementTick+0x148>)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d120      	bne.n	8002a76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002a34:	4b48      	ldr	r3, [pc, #288]	; (8002b58 <xTaskIncrementTick+0x14c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <xTaskIncrementTick+0x48>
	__asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	603b      	str	r3, [r7, #0]
}
 8002a50:	bf00      	nop
 8002a52:	e7fe      	b.n	8002a52 <xTaskIncrementTick+0x46>
 8002a54:	4b40      	ldr	r3, [pc, #256]	; (8002b58 <xTaskIncrementTick+0x14c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	4b40      	ldr	r3, [pc, #256]	; (8002b5c <xTaskIncrementTick+0x150>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a3e      	ldr	r2, [pc, #248]	; (8002b58 <xTaskIncrementTick+0x14c>)
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4a3e      	ldr	r2, [pc, #248]	; (8002b5c <xTaskIncrementTick+0x150>)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b3d      	ldr	r3, [pc, #244]	; (8002b60 <xTaskIncrementTick+0x154>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	4a3c      	ldr	r2, [pc, #240]	; (8002b60 <xTaskIncrementTick+0x154>)
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	f000 f99f 	bl	8002db4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a76:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <xTaskIncrementTick+0x158>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d348      	bcc.n	8002b12 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a80:	4b35      	ldr	r3, [pc, #212]	; (8002b58 <xTaskIncrementTick+0x14c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d104      	bne.n	8002a94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a8a:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <xTaskIncrementTick+0x158>)
 8002a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a90:	601a      	str	r2, [r3, #0]
					break;
 8002a92:	e03e      	b.n	8002b12 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a94:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <xTaskIncrementTick+0x14c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d203      	bcs.n	8002ab4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002aac:	4a2d      	ldr	r2, [pc, #180]	; (8002b64 <xTaskIncrementTick+0x158>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ab2:	e02e      	b.n	8002b12 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fc8a 	bl	80023d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	3318      	adds	r3, #24
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fc81 	bl	80023d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <xTaskIncrementTick+0x15c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	4a22      	ldr	r2, [pc, #136]	; (8002b68 <xTaskIncrementTick+0x15c>)
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4a1f      	ldr	r2, [pc, #124]	; (8002b6c <xTaskIncrementTick+0x160>)
 8002af0:	441a      	add	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	3304      	adds	r3, #4
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7ff fc0d 	bl	8002318 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b02:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <xTaskIncrementTick+0x164>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d3b9      	bcc.n	8002a80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b10:	e7b6      	b.n	8002a80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b12:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <xTaskIncrementTick+0x164>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b18:	4914      	ldr	r1, [pc, #80]	; (8002b6c <xTaskIncrementTick+0x160>)
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d901      	bls.n	8002b2e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <xTaskIncrementTick+0x168>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002b36:	2301      	movs	r3, #1
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	e004      	b.n	8002b46 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <xTaskIncrementTick+0x16c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3301      	adds	r3, #1
 8002b42:	4a0d      	ldr	r2, [pc, #52]	; (8002b78 <xTaskIncrementTick+0x16c>)
 8002b44:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002b46:	697b      	ldr	r3, [r7, #20]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	200004cc 	.word	0x200004cc
 8002b54:	200004a8 	.word	0x200004a8
 8002b58:	2000045c 	.word	0x2000045c
 8002b5c:	20000460 	.word	0x20000460
 8002b60:	200004bc 	.word	0x200004bc
 8002b64:	200004c4 	.word	0x200004c4
 8002b68:	200004ac 	.word	0x200004ac
 8002b6c:	200003a8 	.word	0x200003a8
 8002b70:	200003a4 	.word	0x200003a4
 8002b74:	200004b8 	.word	0x200004b8
 8002b78:	200004b4 	.word	0x200004b4

08002b7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b82:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <vTaskSwitchContext+0xac>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002b8a:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <vTaskSwitchContext+0xb0>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002b90:	e044      	b.n	8002c1c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002b92:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <vTaskSwitchContext+0xb0>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b98:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <vTaskSwitchContext+0xb4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	fab3 f383 	clz	r3, r3
 8002ba4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002ba6:	7afb      	ldrb	r3, [r7, #11]
 8002ba8:	f1c3 031f 	rsb	r3, r3, #31
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	4921      	ldr	r1, [pc, #132]	; (8002c34 <vTaskSwitchContext+0xb8>)
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	607b      	str	r3, [r7, #4]
}
 8002bd4:	bf00      	nop
 8002bd6:	e7fe      	b.n	8002bd6 <vTaskSwitchContext+0x5a>
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <vTaskSwitchContext+0xb8>)
 8002be4:	4413      	add	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d104      	bne.n	8002c08 <vTaskSwitchContext+0x8c>
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <vTaskSwitchContext+0xbc>)
 8002c10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <vTaskSwitchContext+0xbc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	334c      	adds	r3, #76	; 0x4c
 8002c18:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <vTaskSwitchContext+0xc0>)
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	371c      	adds	r7, #28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	200004cc 	.word	0x200004cc
 8002c2c:	200004b8 	.word	0x200004b8
 8002c30:	200004ac 	.word	0x200004ac
 8002c34:	200003a8 	.word	0x200003a8
 8002c38:	200003a4 	.word	0x200003a4
 8002c3c:	20000010 	.word	0x20000010

08002c40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c48:	f000 f852 	bl	8002cf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <prvIdleTask+0x28>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d9f9      	bls.n	8002c48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <prvIdleTask+0x2c>)
 8002c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c64:	e7f0      	b.n	8002c48 <prvIdleTask+0x8>
 8002c66:	bf00      	nop
 8002c68:	200003a8 	.word	0x200003a8
 8002c6c:	e000ed04 	.word	0xe000ed04

08002c70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	e00c      	b.n	8002c96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <prvInitialiseTaskLists+0x60>)
 8002c88:	4413      	add	r3, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fb17 	bl	80022be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3301      	adds	r3, #1
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b06      	cmp	r3, #6
 8002c9a:	d9ef      	bls.n	8002c7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002c9c:	480d      	ldr	r0, [pc, #52]	; (8002cd4 <prvInitialiseTaskLists+0x64>)
 8002c9e:	f7ff fb0e 	bl	80022be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ca2:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <prvInitialiseTaskLists+0x68>)
 8002ca4:	f7ff fb0b 	bl	80022be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ca8:	480c      	ldr	r0, [pc, #48]	; (8002cdc <prvInitialiseTaskLists+0x6c>)
 8002caa:	f7ff fb08 	bl	80022be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002cae:	480c      	ldr	r0, [pc, #48]	; (8002ce0 <prvInitialiseTaskLists+0x70>)
 8002cb0:	f7ff fb05 	bl	80022be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002cb4:	480b      	ldr	r0, [pc, #44]	; (8002ce4 <prvInitialiseTaskLists+0x74>)
 8002cb6:	f7ff fb02 	bl	80022be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <prvInitialiseTaskLists+0x78>)
 8002cbc:	4a05      	ldr	r2, [pc, #20]	; (8002cd4 <prvInitialiseTaskLists+0x64>)
 8002cbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <prvInitialiseTaskLists+0x7c>)
 8002cc2:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <prvInitialiseTaskLists+0x68>)
 8002cc4:	601a      	str	r2, [r3, #0]
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	200003a8 	.word	0x200003a8
 8002cd4:	20000434 	.word	0x20000434
 8002cd8:	20000448 	.word	0x20000448
 8002cdc:	20000464 	.word	0x20000464
 8002ce0:	20000478 	.word	0x20000478
 8002ce4:	20000490 	.word	0x20000490
 8002ce8:	2000045c 	.word	0x2000045c
 8002cec:	20000460 	.word	0x20000460

08002cf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cf6:	e019      	b.n	8002d2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002cf8:	f000 fa0c 	bl	8003114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <prvCheckTasksWaitingTermination+0x50>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3304      	adds	r3, #4
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fb62 	bl	80023d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <prvCheckTasksWaitingTermination+0x54>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <prvCheckTasksWaitingTermination+0x54>)
 8002d16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <prvCheckTasksWaitingTermination+0x58>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <prvCheckTasksWaitingTermination+0x58>)
 8002d20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002d22:	f000 fa27 	bl	8003174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f810 	bl	8002d4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <prvCheckTasksWaitingTermination+0x58>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1e1      	bne.n	8002cf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000478 	.word	0x20000478
 8002d44:	200004a4 	.word	0x200004a4
 8002d48:	2000048c 	.word	0x2000048c

08002d4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	334c      	adds	r3, #76	; 0x4c
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 feeb 	bl	8003b34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d108      	bne.n	8002d7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fb7f 	bl	8003470 <vPortFree>
				vPortFree( pxTCB );
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fb7c 	bl	8003470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d78:	e018      	b.n	8002dac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d103      	bne.n	8002d8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fb73 	bl	8003470 <vPortFree>
	}
 8002d8a:	e00f      	b.n	8002dac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d00a      	beq.n	8002dac <prvDeleteTCB+0x60>
	__asm volatile
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	60fb      	str	r3, [r7, #12]
}
 8002da8:	bf00      	nop
 8002daa:	e7fe      	b.n	8002daa <prvDeleteTCB+0x5e>
	}
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <prvResetNextTaskUnblockTime+0x38>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d104      	bne.n	8002dce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <prvResetNextTaskUnblockTime+0x3c>)
 8002dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002dcc:	e008      	b.n	8002de0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dce:	4b07      	ldr	r3, [pc, #28]	; (8002dec <prvResetNextTaskUnblockTime+0x38>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4a04      	ldr	r2, [pc, #16]	; (8002df0 <prvResetNextTaskUnblockTime+0x3c>)
 8002dde:	6013      	str	r3, [r2, #0]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	2000045c 	.word	0x2000045c
 8002df0:	200004c4 	.word	0x200004c4

08002df4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002dfe:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e04:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fae1 	bl	80023d2 <uxListRemove>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10b      	bne.n	8002e2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002e16:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43da      	mvns	r2, r3
 8002e24:	4b21      	ldr	r3, [pc, #132]	; (8002eac <prvAddCurrentTaskToDelayedList+0xb8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	4a20      	ldr	r2, [pc, #128]	; (8002eac <prvAddCurrentTaskToDelayedList+0xb8>)
 8002e2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d10a      	bne.n	8002e4c <prvAddCurrentTaskToDelayedList+0x58>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3304      	adds	r3, #4
 8002e42:	4619      	mov	r1, r3
 8002e44:	481a      	ldr	r0, [pc, #104]	; (8002eb0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002e46:	f7ff fa67 	bl	8002318 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002e4a:	e026      	b.n	8002e9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4413      	add	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e54:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d209      	bcs.n	8002e78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e64:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4610      	mov	r0, r2
 8002e72:	f7ff fa75 	bl	8002360 <vListInsert>
}
 8002e76:	e010      	b.n	8002e9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3304      	adds	r3, #4
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f7ff fa6b 	bl	8002360 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d202      	bcs.n	8002e9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002e94:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	6013      	str	r3, [r2, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	200004a8 	.word	0x200004a8
 8002ea8:	200003a4 	.word	0x200003a4
 8002eac:	200004ac 	.word	0x200004ac
 8002eb0:	20000490 	.word	0x20000490
 8002eb4:	20000460 	.word	0x20000460
 8002eb8:	2000045c 	.word	0x2000045c
 8002ebc:	200004c4 	.word	0x200004c4

08002ec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3b04      	subs	r3, #4
 8002ed0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3b04      	subs	r3, #4
 8002ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f023 0201 	bic.w	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	3b04      	subs	r3, #4
 8002eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002ef0:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <pxPortInitialiseStack+0x64>)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3b14      	subs	r3, #20
 8002efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3b04      	subs	r3, #4
 8002f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f06f 0202 	mvn.w	r2, #2
 8002f0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	3b20      	subs	r3, #32
 8002f14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002f16:	68fb      	ldr	r3, [r7, #12]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	08002f29 	.word	0x08002f29

08002f28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <prvTaskExitError+0x54>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d00a      	beq.n	8002f52 <prvTaskExitError+0x2a>
	__asm volatile
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	60fb      	str	r3, [r7, #12]
}
 8002f4e:	bf00      	nop
 8002f50:	e7fe      	b.n	8002f50 <prvTaskExitError+0x28>
	__asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	60bb      	str	r3, [r7, #8]
}
 8002f64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002f66:	bf00      	nop
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0fc      	beq.n	8002f68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002f6e:	bf00      	nop
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	2000000c 	.word	0x2000000c

08002f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <pxCurrentTCBConst2>)
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	6808      	ldr	r0, [r1, #0]
 8002f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f8a:	f380 8809 	msr	PSP, r0
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f04f 0000 	mov.w	r0, #0
 8002f96:	f380 8811 	msr	BASEPRI, r0
 8002f9a:	4770      	bx	lr
 8002f9c:	f3af 8000 	nop.w

08002fa0 <pxCurrentTCBConst2>:
 8002fa0:	200003a4 	.word	0x200003a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop

08002fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002fa8:	4808      	ldr	r0, [pc, #32]	; (8002fcc <prvPortStartFirstTask+0x24>)
 8002faa:	6800      	ldr	r0, [r0, #0]
 8002fac:	6800      	ldr	r0, [r0, #0]
 8002fae:	f380 8808 	msr	MSP, r0
 8002fb2:	f04f 0000 	mov.w	r0, #0
 8002fb6:	f380 8814 	msr	CONTROL, r0
 8002fba:	b662      	cpsie	i
 8002fbc:	b661      	cpsie	f
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	df00      	svc	0
 8002fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002fca:	bf00      	nop
 8002fcc:	e000ed08 	.word	0xe000ed08

08002fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002fd6:	4b46      	ldr	r3, [pc, #280]	; (80030f0 <xPortStartScheduler+0x120>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a46      	ldr	r2, [pc, #280]	; (80030f4 <xPortStartScheduler+0x124>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d10a      	bne.n	8002ff6 <xPortStartScheduler+0x26>
	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	613b      	str	r3, [r7, #16]
}
 8002ff2:	bf00      	nop
 8002ff4:	e7fe      	b.n	8002ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002ff6:	4b3e      	ldr	r3, [pc, #248]	; (80030f0 <xPortStartScheduler+0x120>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a3f      	ldr	r2, [pc, #252]	; (80030f8 <xPortStartScheduler+0x128>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10a      	bne.n	8003016 <xPortStartScheduler+0x46>
	__asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	60fb      	str	r3, [r7, #12]
}
 8003012:	bf00      	nop
 8003014:	e7fe      	b.n	8003014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003016:	4b39      	ldr	r3, [pc, #228]	; (80030fc <xPortStartScheduler+0x12c>)
 8003018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	22ff      	movs	r2, #255	; 0xff
 8003026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4b31      	ldr	r3, [pc, #196]	; (8003100 <xPortStartScheduler+0x130>)
 800303c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800303e:	4b31      	ldr	r3, [pc, #196]	; (8003104 <xPortStartScheduler+0x134>)
 8003040:	2207      	movs	r2, #7
 8003042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003044:	e009      	b.n	800305a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003046:	4b2f      	ldr	r3, [pc, #188]	; (8003104 <xPortStartScheduler+0x134>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3b01      	subs	r3, #1
 800304c:	4a2d      	ldr	r2, [pc, #180]	; (8003104 <xPortStartScheduler+0x134>)
 800304e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	b2db      	uxtb	r3, r3
 8003058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003062:	2b80      	cmp	r3, #128	; 0x80
 8003064:	d0ef      	beq.n	8003046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003066:	4b27      	ldr	r3, [pc, #156]	; (8003104 <xPortStartScheduler+0x134>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f1c3 0307 	rsb	r3, r3, #7
 800306e:	2b04      	cmp	r3, #4
 8003070:	d00a      	beq.n	8003088 <xPortStartScheduler+0xb8>
	__asm volatile
 8003072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	60bb      	str	r3, [r7, #8]
}
 8003084:	bf00      	nop
 8003086:	e7fe      	b.n	8003086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <xPortStartScheduler+0x134>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <xPortStartScheduler+0x134>)
 8003090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003092:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <xPortStartScheduler+0x134>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800309a:	4a1a      	ldr	r2, [pc, #104]	; (8003104 <xPortStartScheduler+0x134>)
 800309c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80030a6:	4b18      	ldr	r3, [pc, #96]	; (8003108 <xPortStartScheduler+0x138>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a17      	ldr	r2, [pc, #92]	; (8003108 <xPortStartScheduler+0x138>)
 80030ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <xPortStartScheduler+0x138>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a14      	ldr	r2, [pc, #80]	; (8003108 <xPortStartScheduler+0x138>)
 80030b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80030bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80030be:	f000 f8dd 	bl	800327c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80030c2:	4b12      	ldr	r3, [pc, #72]	; (800310c <xPortStartScheduler+0x13c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80030c8:	f000 f8fc 	bl	80032c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80030cc:	4b10      	ldr	r3, [pc, #64]	; (8003110 <xPortStartScheduler+0x140>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0f      	ldr	r2, [pc, #60]	; (8003110 <xPortStartScheduler+0x140>)
 80030d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80030d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80030d8:	f7ff ff66 	bl	8002fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80030dc:	f7ff fd4e 	bl	8002b7c <vTaskSwitchContext>
	prvTaskExitError();
 80030e0:	f7ff ff22 	bl	8002f28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	e000ed00 	.word	0xe000ed00
 80030f4:	410fc271 	.word	0x410fc271
 80030f8:	410fc270 	.word	0x410fc270
 80030fc:	e000e400 	.word	0xe000e400
 8003100:	200004d0 	.word	0x200004d0
 8003104:	200004d4 	.word	0x200004d4
 8003108:	e000ed20 	.word	0xe000ed20
 800310c:	2000000c 	.word	0x2000000c
 8003110:	e000ef34 	.word	0xe000ef34

08003114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	607b      	str	r3, [r7, #4]
}
 800312c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800312e:	4b0f      	ldr	r3, [pc, #60]	; (800316c <vPortEnterCritical+0x58>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3301      	adds	r3, #1
 8003134:	4a0d      	ldr	r2, [pc, #52]	; (800316c <vPortEnterCritical+0x58>)
 8003136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <vPortEnterCritical+0x58>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d10f      	bne.n	8003160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <vPortEnterCritical+0x5c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <vPortEnterCritical+0x4c>
	__asm volatile
 800314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	603b      	str	r3, [r7, #0]
}
 800315c:	bf00      	nop
 800315e:	e7fe      	b.n	800315e <vPortEnterCritical+0x4a>
	}
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	2000000c 	.word	0x2000000c
 8003170:	e000ed04 	.word	0xe000ed04

08003174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <vPortExitCritical+0x50>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10a      	bne.n	8003198 <vPortExitCritical+0x24>
	__asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	607b      	str	r3, [r7, #4]
}
 8003194:	bf00      	nop
 8003196:	e7fe      	b.n	8003196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <vPortExitCritical+0x50>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3b01      	subs	r3, #1
 800319e:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <vPortExitCritical+0x50>)
 80031a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <vPortExitCritical+0x50>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <vPortExitCritical+0x42>
 80031aa:	2300      	movs	r3, #0
 80031ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	2000000c 	.word	0x2000000c
	...

080031d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80031d0:	f3ef 8009 	mrs	r0, PSP
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	4b15      	ldr	r3, [pc, #84]	; (8003230 <pxCurrentTCBConst>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	f01e 0f10 	tst.w	lr, #16
 80031e0:	bf08      	it	eq
 80031e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80031e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ea:	6010      	str	r0, [r2, #0]
 80031ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80031f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80031f4:	f380 8811 	msr	BASEPRI, r0
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f7ff fcbc 	bl	8002b7c <vTaskSwitchContext>
 8003204:	f04f 0000 	mov.w	r0, #0
 8003208:	f380 8811 	msr	BASEPRI, r0
 800320c:	bc09      	pop	{r0, r3}
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	6808      	ldr	r0, [r1, #0]
 8003212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003216:	f01e 0f10 	tst.w	lr, #16
 800321a:	bf08      	it	eq
 800321c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003220:	f380 8809 	msr	PSP, r0
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	f3af 8000 	nop.w

08003230 <pxCurrentTCBConst>:
 8003230:	200003a4 	.word	0x200003a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop

08003238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
	__asm volatile
 800323e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	607b      	str	r3, [r7, #4]
}
 8003250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003252:	f7ff fbdb 	bl	8002a0c <xTaskIncrementTick>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <SysTick_Handler+0x40>)
 800325e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	2300      	movs	r3, #0
 8003266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	f383 8811 	msr	BASEPRI, r3
}
 800326e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	e000ed04 	.word	0xe000ed04

0800327c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <vPortSetupTimerInterrupt+0x34>)
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003286:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <vPortSetupTimerInterrupt+0x38>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800328c:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <vPortSetupTimerInterrupt+0x3c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <vPortSetupTimerInterrupt+0x40>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	099b      	lsrs	r3, r3, #6
 8003298:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <vPortSetupTimerInterrupt+0x44>)
 800329a:	3b01      	subs	r3, #1
 800329c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <vPortSetupTimerInterrupt+0x34>)
 80032a0:	2207      	movs	r2, #7
 80032a2:	601a      	str	r2, [r3, #0]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	e000e010 	.word	0xe000e010
 80032b4:	e000e018 	.word	0xe000e018
 80032b8:	20000000 	.word	0x20000000
 80032bc:	10624dd3 	.word	0x10624dd3
 80032c0:	e000e014 	.word	0xe000e014

080032c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80032c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80032d4 <vPortEnableVFP+0x10>
 80032c8:	6801      	ldr	r1, [r0, #0]
 80032ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80032ce:	6001      	str	r1, [r0, #0]
 80032d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80032d2:	bf00      	nop
 80032d4:	e000ed88 	.word	0xe000ed88

080032d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	; 0x28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80032e4:	f7ff fae8 	bl	80028b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80032e8:	4b5b      	ldr	r3, [pc, #364]	; (8003458 <pvPortMalloc+0x180>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80032f0:	f000 f920 	bl	8003534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80032f4:	4b59      	ldr	r3, [pc, #356]	; (800345c <pvPortMalloc+0x184>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f040 8093 	bne.w	8003428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01d      	beq.n	8003344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003308:	2208      	movs	r2, #8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	2b00      	cmp	r3, #0
 8003318:	d014      	beq.n	8003344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f023 0307 	bic.w	r3, r3, #7
 8003320:	3308      	adds	r3, #8
 8003322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <pvPortMalloc+0x6c>
	__asm volatile
 800332e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003332:	f383 8811 	msr	BASEPRI, r3
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	617b      	str	r3, [r7, #20]
}
 8003340:	bf00      	nop
 8003342:	e7fe      	b.n	8003342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d06e      	beq.n	8003428 <pvPortMalloc+0x150>
 800334a:	4b45      	ldr	r3, [pc, #276]	; (8003460 <pvPortMalloc+0x188>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	429a      	cmp	r2, r3
 8003352:	d869      	bhi.n	8003428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003354:	4b43      	ldr	r3, [pc, #268]	; (8003464 <pvPortMalloc+0x18c>)
 8003356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003358:	4b42      	ldr	r3, [pc, #264]	; (8003464 <pvPortMalloc+0x18c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800335e:	e004      	b.n	800336a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	429a      	cmp	r2, r3
 8003372:	d903      	bls.n	800337c <pvPortMalloc+0xa4>
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f1      	bne.n	8003360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800337c:	4b36      	ldr	r3, [pc, #216]	; (8003458 <pvPortMalloc+0x180>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003382:	429a      	cmp	r2, r3
 8003384:	d050      	beq.n	8003428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2208      	movs	r2, #8
 800338c:	4413      	add	r3, r2
 800338e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	1ad2      	subs	r2, r2, r3
 80033a0:	2308      	movs	r3, #8
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d91f      	bls.n	80033e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80033a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <pvPortMalloc+0xf8>
	__asm volatile
 80033ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	613b      	str	r3, [r7, #16]
}
 80033cc:	bf00      	nop
 80033ce:	e7fe      	b.n	80033ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	1ad2      	subs	r2, r2, r3
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80033e2:	69b8      	ldr	r0, [r7, #24]
 80033e4:	f000 f908 	bl	80035f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033e8:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <pvPortMalloc+0x188>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <pvPortMalloc+0x188>)
 80033f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033f6:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <pvPortMalloc+0x188>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <pvPortMalloc+0x190>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d203      	bcs.n	800340a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003402:	4b17      	ldr	r3, [pc, #92]	; (8003460 <pvPortMalloc+0x188>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a18      	ldr	r2, [pc, #96]	; (8003468 <pvPortMalloc+0x190>)
 8003408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	4b13      	ldr	r3, [pc, #76]	; (800345c <pvPortMalloc+0x184>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	431a      	orrs	r2, r3
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800341e:	4b13      	ldr	r3, [pc, #76]	; (800346c <pvPortMalloc+0x194>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3301      	adds	r3, #1
 8003424:	4a11      	ldr	r2, [pc, #68]	; (800346c <pvPortMalloc+0x194>)
 8003426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003428:	f7ff fa54 	bl	80028d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <pvPortMalloc+0x174>
	__asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	60fb      	str	r3, [r7, #12]
}
 8003448:	bf00      	nop
 800344a:	e7fe      	b.n	800344a <pvPortMalloc+0x172>
	return pvReturn;
 800344c:	69fb      	ldr	r3, [r7, #28]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3728      	adds	r7, #40	; 0x28
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	200040e0 	.word	0x200040e0
 800345c:	200040f4 	.word	0x200040f4
 8003460:	200040e4 	.word	0x200040e4
 8003464:	200040d8 	.word	0x200040d8
 8003468:	200040e8 	.word	0x200040e8
 800346c:	200040ec 	.word	0x200040ec

08003470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d04d      	beq.n	800351e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003482:	2308      	movs	r3, #8
 8003484:	425b      	negs	r3, r3
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4413      	add	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <vPortFree+0xb8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10a      	bne.n	80034b4 <vPortFree+0x44>
	__asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	60fb      	str	r3, [r7, #12]
}
 80034b0:	bf00      	nop
 80034b2:	e7fe      	b.n	80034b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <vPortFree+0x62>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	60bb      	str	r3, [r7, #8]
}
 80034ce:	bf00      	nop
 80034d0:	e7fe      	b.n	80034d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	4b14      	ldr	r3, [pc, #80]	; (8003528 <vPortFree+0xb8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01e      	beq.n	800351e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d11a      	bne.n	800351e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <vPortFree+0xb8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	401a      	ands	r2, r3
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80034f8:	f7ff f9de 	bl	80028b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <vPortFree+0xbc>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4413      	add	r3, r2
 8003506:	4a09      	ldr	r2, [pc, #36]	; (800352c <vPortFree+0xbc>)
 8003508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800350a:	6938      	ldr	r0, [r7, #16]
 800350c:	f000 f874 	bl	80035f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <vPortFree+0xc0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	4a06      	ldr	r2, [pc, #24]	; (8003530 <vPortFree+0xc0>)
 8003518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800351a:	f7ff f9db 	bl	80028d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800351e:	bf00      	nop
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200040f4 	.word	0x200040f4
 800352c:	200040e4 	.word	0x200040e4
 8003530:	200040f0 	.word	0x200040f0

08003534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800353a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800353e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003540:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <prvHeapInit+0xac>)
 8003542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00c      	beq.n	8003568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3307      	adds	r3, #7
 8003552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0307 	bic.w	r3, r3, #7
 800355a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	4a1f      	ldr	r2, [pc, #124]	; (80035e0 <prvHeapInit+0xac>)
 8003564:	4413      	add	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800356c:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <prvHeapInit+0xb0>)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003572:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <prvHeapInit+0xb0>)
 8003574:	2200      	movs	r2, #0
 8003576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	4413      	add	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003580:	2208      	movs	r2, #8
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0307 	bic.w	r3, r3, #7
 800358e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <prvHeapInit+0xb4>)
 8003594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003596:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <prvHeapInit+0xb4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2200      	movs	r2, #0
 800359c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <prvHeapInit+0xb4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	1ad2      	subs	r2, r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <prvHeapInit+0xb4>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <prvHeapInit+0xb8>)
 80035c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <prvHeapInit+0xbc>)
 80035ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80035cc:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <prvHeapInit+0xc0>)
 80035ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80035d2:	601a      	str	r2, [r3, #0]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	200004d8 	.word	0x200004d8
 80035e4:	200040d8 	.word	0x200040d8
 80035e8:	200040e0 	.word	0x200040e0
 80035ec:	200040e8 	.word	0x200040e8
 80035f0:	200040e4 	.word	0x200040e4
 80035f4:	200040f4 	.word	0x200040f4

080035f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003600:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <prvInsertBlockIntoFreeList+0xac>)
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e002      	b.n	800360c <prvInsertBlockIntoFreeList+0x14>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	429a      	cmp	r2, r3
 8003614:	d8f7      	bhi.n	8003606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	4413      	add	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	429a      	cmp	r2, r3
 8003626:	d108      	bne.n	800363a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	441a      	add	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	441a      	add	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d118      	bne.n	8003680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <prvInsertBlockIntoFreeList+0xb0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d00d      	beq.n	8003676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	441a      	add	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	e008      	b.n	8003688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003676:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <prvInsertBlockIntoFreeList+0xb0>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e003      	b.n	8003688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	429a      	cmp	r2, r3
 800368e:	d002      	beq.n	8003696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	200040d8 	.word	0x200040d8
 80036a8:	200040e0 	.word	0x200040e0

080036ac <__errno>:
 80036ac:	4b01      	ldr	r3, [pc, #4]	; (80036b4 <__errno+0x8>)
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20000010 	.word	0x20000010

080036b8 <std>:
 80036b8:	2300      	movs	r3, #0
 80036ba:	b510      	push	{r4, lr}
 80036bc:	4604      	mov	r4, r0
 80036be:	e9c0 3300 	strd	r3, r3, [r0]
 80036c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036c6:	6083      	str	r3, [r0, #8]
 80036c8:	8181      	strh	r1, [r0, #12]
 80036ca:	6643      	str	r3, [r0, #100]	; 0x64
 80036cc:	81c2      	strh	r2, [r0, #14]
 80036ce:	6183      	str	r3, [r0, #24]
 80036d0:	4619      	mov	r1, r3
 80036d2:	2208      	movs	r2, #8
 80036d4:	305c      	adds	r0, #92	; 0x5c
 80036d6:	f000 f90c 	bl	80038f2 <memset>
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <std+0x38>)
 80036dc:	6263      	str	r3, [r4, #36]	; 0x24
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <std+0x3c>)
 80036e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <std+0x40>)
 80036e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <std+0x44>)
 80036e8:	6224      	str	r4, [r4, #32]
 80036ea:	6323      	str	r3, [r4, #48]	; 0x30
 80036ec:	bd10      	pop	{r4, pc}
 80036ee:	bf00      	nop
 80036f0:	08003c0d 	.word	0x08003c0d
 80036f4:	08003c2f 	.word	0x08003c2f
 80036f8:	08003c67 	.word	0x08003c67
 80036fc:	08003c8b 	.word	0x08003c8b

08003700 <_cleanup_r>:
 8003700:	4901      	ldr	r1, [pc, #4]	; (8003708 <_cleanup_r+0x8>)
 8003702:	f000 b8af 	b.w	8003864 <_fwalk_reent>
 8003706:	bf00      	nop
 8003708:	08003f65 	.word	0x08003f65

0800370c <__sfmoreglue>:
 800370c:	b570      	push	{r4, r5, r6, lr}
 800370e:	2268      	movs	r2, #104	; 0x68
 8003710:	1e4d      	subs	r5, r1, #1
 8003712:	4355      	muls	r5, r2
 8003714:	460e      	mov	r6, r1
 8003716:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800371a:	f000 f913 	bl	8003944 <_malloc_r>
 800371e:	4604      	mov	r4, r0
 8003720:	b140      	cbz	r0, 8003734 <__sfmoreglue+0x28>
 8003722:	2100      	movs	r1, #0
 8003724:	e9c0 1600 	strd	r1, r6, [r0]
 8003728:	300c      	adds	r0, #12
 800372a:	60a0      	str	r0, [r4, #8]
 800372c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003730:	f000 f8df 	bl	80038f2 <memset>
 8003734:	4620      	mov	r0, r4
 8003736:	bd70      	pop	{r4, r5, r6, pc}

08003738 <__sfp_lock_acquire>:
 8003738:	4801      	ldr	r0, [pc, #4]	; (8003740 <__sfp_lock_acquire+0x8>)
 800373a:	f000 b8d8 	b.w	80038ee <__retarget_lock_acquire_recursive>
 800373e:	bf00      	nop
 8003740:	200040f9 	.word	0x200040f9

08003744 <__sfp_lock_release>:
 8003744:	4801      	ldr	r0, [pc, #4]	; (800374c <__sfp_lock_release+0x8>)
 8003746:	f000 b8d3 	b.w	80038f0 <__retarget_lock_release_recursive>
 800374a:	bf00      	nop
 800374c:	200040f9 	.word	0x200040f9

08003750 <__sinit_lock_acquire>:
 8003750:	4801      	ldr	r0, [pc, #4]	; (8003758 <__sinit_lock_acquire+0x8>)
 8003752:	f000 b8cc 	b.w	80038ee <__retarget_lock_acquire_recursive>
 8003756:	bf00      	nop
 8003758:	200040fa 	.word	0x200040fa

0800375c <__sinit_lock_release>:
 800375c:	4801      	ldr	r0, [pc, #4]	; (8003764 <__sinit_lock_release+0x8>)
 800375e:	f000 b8c7 	b.w	80038f0 <__retarget_lock_release_recursive>
 8003762:	bf00      	nop
 8003764:	200040fa 	.word	0x200040fa

08003768 <__sinit>:
 8003768:	b510      	push	{r4, lr}
 800376a:	4604      	mov	r4, r0
 800376c:	f7ff fff0 	bl	8003750 <__sinit_lock_acquire>
 8003770:	69a3      	ldr	r3, [r4, #24]
 8003772:	b11b      	cbz	r3, 800377c <__sinit+0x14>
 8003774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003778:	f7ff bff0 	b.w	800375c <__sinit_lock_release>
 800377c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003780:	6523      	str	r3, [r4, #80]	; 0x50
 8003782:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <__sinit+0x68>)
 8003784:	4a13      	ldr	r2, [pc, #76]	; (80037d4 <__sinit+0x6c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	62a2      	str	r2, [r4, #40]	; 0x28
 800378a:	42a3      	cmp	r3, r4
 800378c:	bf04      	itt	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	61a3      	streq	r3, [r4, #24]
 8003792:	4620      	mov	r0, r4
 8003794:	f000 f820 	bl	80037d8 <__sfp>
 8003798:	6060      	str	r0, [r4, #4]
 800379a:	4620      	mov	r0, r4
 800379c:	f000 f81c 	bl	80037d8 <__sfp>
 80037a0:	60a0      	str	r0, [r4, #8]
 80037a2:	4620      	mov	r0, r4
 80037a4:	f000 f818 	bl	80037d8 <__sfp>
 80037a8:	2200      	movs	r2, #0
 80037aa:	60e0      	str	r0, [r4, #12]
 80037ac:	2104      	movs	r1, #4
 80037ae:	6860      	ldr	r0, [r4, #4]
 80037b0:	f7ff ff82 	bl	80036b8 <std>
 80037b4:	68a0      	ldr	r0, [r4, #8]
 80037b6:	2201      	movs	r2, #1
 80037b8:	2109      	movs	r1, #9
 80037ba:	f7ff ff7d 	bl	80036b8 <std>
 80037be:	68e0      	ldr	r0, [r4, #12]
 80037c0:	2202      	movs	r2, #2
 80037c2:	2112      	movs	r1, #18
 80037c4:	f7ff ff78 	bl	80036b8 <std>
 80037c8:	2301      	movs	r3, #1
 80037ca:	61a3      	str	r3, [r4, #24]
 80037cc:	e7d2      	b.n	8003774 <__sinit+0xc>
 80037ce:	bf00      	nop
 80037d0:	080042d4 	.word	0x080042d4
 80037d4:	08003701 	.word	0x08003701

080037d8 <__sfp>:
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	4607      	mov	r7, r0
 80037dc:	f7ff ffac 	bl	8003738 <__sfp_lock_acquire>
 80037e0:	4b1e      	ldr	r3, [pc, #120]	; (800385c <__sfp+0x84>)
 80037e2:	681e      	ldr	r6, [r3, #0]
 80037e4:	69b3      	ldr	r3, [r6, #24]
 80037e6:	b913      	cbnz	r3, 80037ee <__sfp+0x16>
 80037e8:	4630      	mov	r0, r6
 80037ea:	f7ff ffbd 	bl	8003768 <__sinit>
 80037ee:	3648      	adds	r6, #72	; 0x48
 80037f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	d503      	bpl.n	8003800 <__sfp+0x28>
 80037f8:	6833      	ldr	r3, [r6, #0]
 80037fa:	b30b      	cbz	r3, 8003840 <__sfp+0x68>
 80037fc:	6836      	ldr	r6, [r6, #0]
 80037fe:	e7f7      	b.n	80037f0 <__sfp+0x18>
 8003800:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003804:	b9d5      	cbnz	r5, 800383c <__sfp+0x64>
 8003806:	4b16      	ldr	r3, [pc, #88]	; (8003860 <__sfp+0x88>)
 8003808:	60e3      	str	r3, [r4, #12]
 800380a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800380e:	6665      	str	r5, [r4, #100]	; 0x64
 8003810:	f000 f86c 	bl	80038ec <__retarget_lock_init_recursive>
 8003814:	f7ff ff96 	bl	8003744 <__sfp_lock_release>
 8003818:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800381c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003820:	6025      	str	r5, [r4, #0]
 8003822:	61a5      	str	r5, [r4, #24]
 8003824:	2208      	movs	r2, #8
 8003826:	4629      	mov	r1, r5
 8003828:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800382c:	f000 f861 	bl	80038f2 <memset>
 8003830:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003834:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003838:	4620      	mov	r0, r4
 800383a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800383c:	3468      	adds	r4, #104	; 0x68
 800383e:	e7d9      	b.n	80037f4 <__sfp+0x1c>
 8003840:	2104      	movs	r1, #4
 8003842:	4638      	mov	r0, r7
 8003844:	f7ff ff62 	bl	800370c <__sfmoreglue>
 8003848:	4604      	mov	r4, r0
 800384a:	6030      	str	r0, [r6, #0]
 800384c:	2800      	cmp	r0, #0
 800384e:	d1d5      	bne.n	80037fc <__sfp+0x24>
 8003850:	f7ff ff78 	bl	8003744 <__sfp_lock_release>
 8003854:	230c      	movs	r3, #12
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	e7ee      	b.n	8003838 <__sfp+0x60>
 800385a:	bf00      	nop
 800385c:	080042d4 	.word	0x080042d4
 8003860:	ffff0001 	.word	0xffff0001

08003864 <_fwalk_reent>:
 8003864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003868:	4606      	mov	r6, r0
 800386a:	4688      	mov	r8, r1
 800386c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003870:	2700      	movs	r7, #0
 8003872:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003876:	f1b9 0901 	subs.w	r9, r9, #1
 800387a:	d505      	bpl.n	8003888 <_fwalk_reent+0x24>
 800387c:	6824      	ldr	r4, [r4, #0]
 800387e:	2c00      	cmp	r4, #0
 8003880:	d1f7      	bne.n	8003872 <_fwalk_reent+0xe>
 8003882:	4638      	mov	r0, r7
 8003884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003888:	89ab      	ldrh	r3, [r5, #12]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d907      	bls.n	800389e <_fwalk_reent+0x3a>
 800388e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003892:	3301      	adds	r3, #1
 8003894:	d003      	beq.n	800389e <_fwalk_reent+0x3a>
 8003896:	4629      	mov	r1, r5
 8003898:	4630      	mov	r0, r6
 800389a:	47c0      	blx	r8
 800389c:	4307      	orrs	r7, r0
 800389e:	3568      	adds	r5, #104	; 0x68
 80038a0:	e7e9      	b.n	8003876 <_fwalk_reent+0x12>
	...

080038a4 <__libc_init_array>:
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	4d0d      	ldr	r5, [pc, #52]	; (80038dc <__libc_init_array+0x38>)
 80038a8:	4c0d      	ldr	r4, [pc, #52]	; (80038e0 <__libc_init_array+0x3c>)
 80038aa:	1b64      	subs	r4, r4, r5
 80038ac:	10a4      	asrs	r4, r4, #2
 80038ae:	2600      	movs	r6, #0
 80038b0:	42a6      	cmp	r6, r4
 80038b2:	d109      	bne.n	80038c8 <__libc_init_array+0x24>
 80038b4:	4d0b      	ldr	r5, [pc, #44]	; (80038e4 <__libc_init_array+0x40>)
 80038b6:	4c0c      	ldr	r4, [pc, #48]	; (80038e8 <__libc_init_array+0x44>)
 80038b8:	f000 fc94 	bl	80041e4 <_init>
 80038bc:	1b64      	subs	r4, r4, r5
 80038be:	10a4      	asrs	r4, r4, #2
 80038c0:	2600      	movs	r6, #0
 80038c2:	42a6      	cmp	r6, r4
 80038c4:	d105      	bne.n	80038d2 <__libc_init_array+0x2e>
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038cc:	4798      	blx	r3
 80038ce:	3601      	adds	r6, #1
 80038d0:	e7ee      	b.n	80038b0 <__libc_init_array+0xc>
 80038d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d6:	4798      	blx	r3
 80038d8:	3601      	adds	r6, #1
 80038da:	e7f2      	b.n	80038c2 <__libc_init_array+0x1e>
 80038dc:	080042e0 	.word	0x080042e0
 80038e0:	080042e0 	.word	0x080042e0
 80038e4:	080042e0 	.word	0x080042e0
 80038e8:	080042e4 	.word	0x080042e4

080038ec <__retarget_lock_init_recursive>:
 80038ec:	4770      	bx	lr

080038ee <__retarget_lock_acquire_recursive>:
 80038ee:	4770      	bx	lr

080038f0 <__retarget_lock_release_recursive>:
 80038f0:	4770      	bx	lr

080038f2 <memset>:
 80038f2:	4402      	add	r2, r0
 80038f4:	4603      	mov	r3, r0
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d100      	bne.n	80038fc <memset+0xa>
 80038fa:	4770      	bx	lr
 80038fc:	f803 1b01 	strb.w	r1, [r3], #1
 8003900:	e7f9      	b.n	80038f6 <memset+0x4>
	...

08003904 <sbrk_aligned>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	4e0e      	ldr	r6, [pc, #56]	; (8003940 <sbrk_aligned+0x3c>)
 8003908:	460c      	mov	r4, r1
 800390a:	6831      	ldr	r1, [r6, #0]
 800390c:	4605      	mov	r5, r0
 800390e:	b911      	cbnz	r1, 8003916 <sbrk_aligned+0x12>
 8003910:	f000 f96c 	bl	8003bec <_sbrk_r>
 8003914:	6030      	str	r0, [r6, #0]
 8003916:	4621      	mov	r1, r4
 8003918:	4628      	mov	r0, r5
 800391a:	f000 f967 	bl	8003bec <_sbrk_r>
 800391e:	1c43      	adds	r3, r0, #1
 8003920:	d00a      	beq.n	8003938 <sbrk_aligned+0x34>
 8003922:	1cc4      	adds	r4, r0, #3
 8003924:	f024 0403 	bic.w	r4, r4, #3
 8003928:	42a0      	cmp	r0, r4
 800392a:	d007      	beq.n	800393c <sbrk_aligned+0x38>
 800392c:	1a21      	subs	r1, r4, r0
 800392e:	4628      	mov	r0, r5
 8003930:	f000 f95c 	bl	8003bec <_sbrk_r>
 8003934:	3001      	adds	r0, #1
 8003936:	d101      	bne.n	800393c <sbrk_aligned+0x38>
 8003938:	f04f 34ff 	mov.w	r4, #4294967295
 800393c:	4620      	mov	r0, r4
 800393e:	bd70      	pop	{r4, r5, r6, pc}
 8003940:	20004100 	.word	0x20004100

08003944 <_malloc_r>:
 8003944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003948:	1ccd      	adds	r5, r1, #3
 800394a:	f025 0503 	bic.w	r5, r5, #3
 800394e:	3508      	adds	r5, #8
 8003950:	2d0c      	cmp	r5, #12
 8003952:	bf38      	it	cc
 8003954:	250c      	movcc	r5, #12
 8003956:	2d00      	cmp	r5, #0
 8003958:	4607      	mov	r7, r0
 800395a:	db01      	blt.n	8003960 <_malloc_r+0x1c>
 800395c:	42a9      	cmp	r1, r5
 800395e:	d905      	bls.n	800396c <_malloc_r+0x28>
 8003960:	230c      	movs	r3, #12
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	2600      	movs	r6, #0
 8003966:	4630      	mov	r0, r6
 8003968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800396c:	4e2e      	ldr	r6, [pc, #184]	; (8003a28 <_malloc_r+0xe4>)
 800396e:	f000 fbad 	bl	80040cc <__malloc_lock>
 8003972:	6833      	ldr	r3, [r6, #0]
 8003974:	461c      	mov	r4, r3
 8003976:	bb34      	cbnz	r4, 80039c6 <_malloc_r+0x82>
 8003978:	4629      	mov	r1, r5
 800397a:	4638      	mov	r0, r7
 800397c:	f7ff ffc2 	bl	8003904 <sbrk_aligned>
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	4604      	mov	r4, r0
 8003984:	d14d      	bne.n	8003a22 <_malloc_r+0xde>
 8003986:	6834      	ldr	r4, [r6, #0]
 8003988:	4626      	mov	r6, r4
 800398a:	2e00      	cmp	r6, #0
 800398c:	d140      	bne.n	8003a10 <_malloc_r+0xcc>
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	4631      	mov	r1, r6
 8003992:	4638      	mov	r0, r7
 8003994:	eb04 0803 	add.w	r8, r4, r3
 8003998:	f000 f928 	bl	8003bec <_sbrk_r>
 800399c:	4580      	cmp	r8, r0
 800399e:	d13a      	bne.n	8003a16 <_malloc_r+0xd2>
 80039a0:	6821      	ldr	r1, [r4, #0]
 80039a2:	3503      	adds	r5, #3
 80039a4:	1a6d      	subs	r5, r5, r1
 80039a6:	f025 0503 	bic.w	r5, r5, #3
 80039aa:	3508      	adds	r5, #8
 80039ac:	2d0c      	cmp	r5, #12
 80039ae:	bf38      	it	cc
 80039b0:	250c      	movcc	r5, #12
 80039b2:	4629      	mov	r1, r5
 80039b4:	4638      	mov	r0, r7
 80039b6:	f7ff ffa5 	bl	8003904 <sbrk_aligned>
 80039ba:	3001      	adds	r0, #1
 80039bc:	d02b      	beq.n	8003a16 <_malloc_r+0xd2>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	442b      	add	r3, r5
 80039c2:	6023      	str	r3, [r4, #0]
 80039c4:	e00e      	b.n	80039e4 <_malloc_r+0xa0>
 80039c6:	6822      	ldr	r2, [r4, #0]
 80039c8:	1b52      	subs	r2, r2, r5
 80039ca:	d41e      	bmi.n	8003a0a <_malloc_r+0xc6>
 80039cc:	2a0b      	cmp	r2, #11
 80039ce:	d916      	bls.n	80039fe <_malloc_r+0xba>
 80039d0:	1961      	adds	r1, r4, r5
 80039d2:	42a3      	cmp	r3, r4
 80039d4:	6025      	str	r5, [r4, #0]
 80039d6:	bf18      	it	ne
 80039d8:	6059      	strne	r1, [r3, #4]
 80039da:	6863      	ldr	r3, [r4, #4]
 80039dc:	bf08      	it	eq
 80039de:	6031      	streq	r1, [r6, #0]
 80039e0:	5162      	str	r2, [r4, r5]
 80039e2:	604b      	str	r3, [r1, #4]
 80039e4:	4638      	mov	r0, r7
 80039e6:	f104 060b 	add.w	r6, r4, #11
 80039ea:	f000 fb75 	bl	80040d8 <__malloc_unlock>
 80039ee:	f026 0607 	bic.w	r6, r6, #7
 80039f2:	1d23      	adds	r3, r4, #4
 80039f4:	1af2      	subs	r2, r6, r3
 80039f6:	d0b6      	beq.n	8003966 <_malloc_r+0x22>
 80039f8:	1b9b      	subs	r3, r3, r6
 80039fa:	50a3      	str	r3, [r4, r2]
 80039fc:	e7b3      	b.n	8003966 <_malloc_r+0x22>
 80039fe:	6862      	ldr	r2, [r4, #4]
 8003a00:	42a3      	cmp	r3, r4
 8003a02:	bf0c      	ite	eq
 8003a04:	6032      	streq	r2, [r6, #0]
 8003a06:	605a      	strne	r2, [r3, #4]
 8003a08:	e7ec      	b.n	80039e4 <_malloc_r+0xa0>
 8003a0a:	4623      	mov	r3, r4
 8003a0c:	6864      	ldr	r4, [r4, #4]
 8003a0e:	e7b2      	b.n	8003976 <_malloc_r+0x32>
 8003a10:	4634      	mov	r4, r6
 8003a12:	6876      	ldr	r6, [r6, #4]
 8003a14:	e7b9      	b.n	800398a <_malloc_r+0x46>
 8003a16:	230c      	movs	r3, #12
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	4638      	mov	r0, r7
 8003a1c:	f000 fb5c 	bl	80040d8 <__malloc_unlock>
 8003a20:	e7a1      	b.n	8003966 <_malloc_r+0x22>
 8003a22:	6025      	str	r5, [r4, #0]
 8003a24:	e7de      	b.n	80039e4 <_malloc_r+0xa0>
 8003a26:	bf00      	nop
 8003a28:	200040fc 	.word	0x200040fc

08003a2c <_puts_r>:
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	460e      	mov	r6, r1
 8003a30:	4605      	mov	r5, r0
 8003a32:	b118      	cbz	r0, 8003a3c <_puts_r+0x10>
 8003a34:	6983      	ldr	r3, [r0, #24]
 8003a36:	b90b      	cbnz	r3, 8003a3c <_puts_r+0x10>
 8003a38:	f7ff fe96 	bl	8003768 <__sinit>
 8003a3c:	69ab      	ldr	r3, [r5, #24]
 8003a3e:	68ac      	ldr	r4, [r5, #8]
 8003a40:	b913      	cbnz	r3, 8003a48 <_puts_r+0x1c>
 8003a42:	4628      	mov	r0, r5
 8003a44:	f7ff fe90 	bl	8003768 <__sinit>
 8003a48:	4b2c      	ldr	r3, [pc, #176]	; (8003afc <_puts_r+0xd0>)
 8003a4a:	429c      	cmp	r4, r3
 8003a4c:	d120      	bne.n	8003a90 <_puts_r+0x64>
 8003a4e:	686c      	ldr	r4, [r5, #4]
 8003a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a52:	07db      	lsls	r3, r3, #31
 8003a54:	d405      	bmi.n	8003a62 <_puts_r+0x36>
 8003a56:	89a3      	ldrh	r3, [r4, #12]
 8003a58:	0598      	lsls	r0, r3, #22
 8003a5a:	d402      	bmi.n	8003a62 <_puts_r+0x36>
 8003a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a5e:	f7ff ff46 	bl	80038ee <__retarget_lock_acquire_recursive>
 8003a62:	89a3      	ldrh	r3, [r4, #12]
 8003a64:	0719      	lsls	r1, r3, #28
 8003a66:	d51d      	bpl.n	8003aa4 <_puts_r+0x78>
 8003a68:	6923      	ldr	r3, [r4, #16]
 8003a6a:	b1db      	cbz	r3, 8003aa4 <_puts_r+0x78>
 8003a6c:	3e01      	subs	r6, #1
 8003a6e:	68a3      	ldr	r3, [r4, #8]
 8003a70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a74:	3b01      	subs	r3, #1
 8003a76:	60a3      	str	r3, [r4, #8]
 8003a78:	bb39      	cbnz	r1, 8003aca <_puts_r+0x9e>
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	da38      	bge.n	8003af0 <_puts_r+0xc4>
 8003a7e:	4622      	mov	r2, r4
 8003a80:	210a      	movs	r1, #10
 8003a82:	4628      	mov	r0, r5
 8003a84:	f000 f906 	bl	8003c94 <__swbuf_r>
 8003a88:	3001      	adds	r0, #1
 8003a8a:	d011      	beq.n	8003ab0 <_puts_r+0x84>
 8003a8c:	250a      	movs	r5, #10
 8003a8e:	e011      	b.n	8003ab4 <_puts_r+0x88>
 8003a90:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <_puts_r+0xd4>)
 8003a92:	429c      	cmp	r4, r3
 8003a94:	d101      	bne.n	8003a9a <_puts_r+0x6e>
 8003a96:	68ac      	ldr	r4, [r5, #8]
 8003a98:	e7da      	b.n	8003a50 <_puts_r+0x24>
 8003a9a:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <_puts_r+0xd8>)
 8003a9c:	429c      	cmp	r4, r3
 8003a9e:	bf08      	it	eq
 8003aa0:	68ec      	ldreq	r4, [r5, #12]
 8003aa2:	e7d5      	b.n	8003a50 <_puts_r+0x24>
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	f000 f958 	bl	8003d5c <__swsetup_r>
 8003aac:	2800      	cmp	r0, #0
 8003aae:	d0dd      	beq.n	8003a6c <_puts_r+0x40>
 8003ab0:	f04f 35ff 	mov.w	r5, #4294967295
 8003ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ab6:	07da      	lsls	r2, r3, #31
 8003ab8:	d405      	bmi.n	8003ac6 <_puts_r+0x9a>
 8003aba:	89a3      	ldrh	r3, [r4, #12]
 8003abc:	059b      	lsls	r3, r3, #22
 8003abe:	d402      	bmi.n	8003ac6 <_puts_r+0x9a>
 8003ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ac2:	f7ff ff15 	bl	80038f0 <__retarget_lock_release_recursive>
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	da04      	bge.n	8003ad8 <_puts_r+0xac>
 8003ace:	69a2      	ldr	r2, [r4, #24]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	dc06      	bgt.n	8003ae2 <_puts_r+0xb6>
 8003ad4:	290a      	cmp	r1, #10
 8003ad6:	d004      	beq.n	8003ae2 <_puts_r+0xb6>
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	6022      	str	r2, [r4, #0]
 8003ade:	7019      	strb	r1, [r3, #0]
 8003ae0:	e7c5      	b.n	8003a6e <_puts_r+0x42>
 8003ae2:	4622      	mov	r2, r4
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	f000 f8d5 	bl	8003c94 <__swbuf_r>
 8003aea:	3001      	adds	r0, #1
 8003aec:	d1bf      	bne.n	8003a6e <_puts_r+0x42>
 8003aee:	e7df      	b.n	8003ab0 <_puts_r+0x84>
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	250a      	movs	r5, #10
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	6022      	str	r2, [r4, #0]
 8003af8:	701d      	strb	r5, [r3, #0]
 8003afa:	e7db      	b.n	8003ab4 <_puts_r+0x88>
 8003afc:	08004294 	.word	0x08004294
 8003b00:	080042b4 	.word	0x080042b4
 8003b04:	08004274 	.word	0x08004274

08003b08 <puts>:
 8003b08:	4b02      	ldr	r3, [pc, #8]	; (8003b14 <puts+0xc>)
 8003b0a:	4601      	mov	r1, r0
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	f7ff bf8d 	b.w	8003a2c <_puts_r>
 8003b12:	bf00      	nop
 8003b14:	20000010 	.word	0x20000010

08003b18 <cleanup_glue>:
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	6809      	ldr	r1, [r1, #0]
 8003b1e:	4605      	mov	r5, r0
 8003b20:	b109      	cbz	r1, 8003b26 <cleanup_glue+0xe>
 8003b22:	f7ff fff9 	bl	8003b18 <cleanup_glue>
 8003b26:	4621      	mov	r1, r4
 8003b28:	4628      	mov	r0, r5
 8003b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b2e:	f000 bad9 	b.w	80040e4 <_free_r>
	...

08003b34 <_reclaim_reent>:
 8003b34:	4b2c      	ldr	r3, [pc, #176]	; (8003be8 <_reclaim_reent+0xb4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4283      	cmp	r3, r0
 8003b3a:	b570      	push	{r4, r5, r6, lr}
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	d051      	beq.n	8003be4 <_reclaim_reent+0xb0>
 8003b40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003b42:	b143      	cbz	r3, 8003b56 <_reclaim_reent+0x22>
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d14a      	bne.n	8003be0 <_reclaim_reent+0xac>
 8003b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b4c:	6819      	ldr	r1, [r3, #0]
 8003b4e:	b111      	cbz	r1, 8003b56 <_reclaim_reent+0x22>
 8003b50:	4620      	mov	r0, r4
 8003b52:	f000 fac7 	bl	80040e4 <_free_r>
 8003b56:	6961      	ldr	r1, [r4, #20]
 8003b58:	b111      	cbz	r1, 8003b60 <_reclaim_reent+0x2c>
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f000 fac2 	bl	80040e4 <_free_r>
 8003b60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b62:	b111      	cbz	r1, 8003b6a <_reclaim_reent+0x36>
 8003b64:	4620      	mov	r0, r4
 8003b66:	f000 fabd 	bl	80040e4 <_free_r>
 8003b6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003b6c:	b111      	cbz	r1, 8003b74 <_reclaim_reent+0x40>
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f000 fab8 	bl	80040e4 <_free_r>
 8003b74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003b76:	b111      	cbz	r1, 8003b7e <_reclaim_reent+0x4a>
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f000 fab3 	bl	80040e4 <_free_r>
 8003b7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003b80:	b111      	cbz	r1, 8003b88 <_reclaim_reent+0x54>
 8003b82:	4620      	mov	r0, r4
 8003b84:	f000 faae 	bl	80040e4 <_free_r>
 8003b88:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003b8a:	b111      	cbz	r1, 8003b92 <_reclaim_reent+0x5e>
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f000 faa9 	bl	80040e4 <_free_r>
 8003b92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003b94:	b111      	cbz	r1, 8003b9c <_reclaim_reent+0x68>
 8003b96:	4620      	mov	r0, r4
 8003b98:	f000 faa4 	bl	80040e4 <_free_r>
 8003b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b9e:	b111      	cbz	r1, 8003ba6 <_reclaim_reent+0x72>
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f000 fa9f 	bl	80040e4 <_free_r>
 8003ba6:	69a3      	ldr	r3, [r4, #24]
 8003ba8:	b1e3      	cbz	r3, 8003be4 <_reclaim_reent+0xb0>
 8003baa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003bac:	4620      	mov	r0, r4
 8003bae:	4798      	blx	r3
 8003bb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003bb2:	b1b9      	cbz	r1, 8003be4 <_reclaim_reent+0xb0>
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003bba:	f7ff bfad 	b.w	8003b18 <cleanup_glue>
 8003bbe:	5949      	ldr	r1, [r1, r5]
 8003bc0:	b941      	cbnz	r1, 8003bd4 <_reclaim_reent+0xa0>
 8003bc2:	3504      	adds	r5, #4
 8003bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bc6:	2d80      	cmp	r5, #128	; 0x80
 8003bc8:	68d9      	ldr	r1, [r3, #12]
 8003bca:	d1f8      	bne.n	8003bbe <_reclaim_reent+0x8a>
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f000 fa89 	bl	80040e4 <_free_r>
 8003bd2:	e7ba      	b.n	8003b4a <_reclaim_reent+0x16>
 8003bd4:	680e      	ldr	r6, [r1, #0]
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f000 fa84 	bl	80040e4 <_free_r>
 8003bdc:	4631      	mov	r1, r6
 8003bde:	e7ef      	b.n	8003bc0 <_reclaim_reent+0x8c>
 8003be0:	2500      	movs	r5, #0
 8003be2:	e7ef      	b.n	8003bc4 <_reclaim_reent+0x90>
 8003be4:	bd70      	pop	{r4, r5, r6, pc}
 8003be6:	bf00      	nop
 8003be8:	20000010 	.word	0x20000010

08003bec <_sbrk_r>:
 8003bec:	b538      	push	{r3, r4, r5, lr}
 8003bee:	4d06      	ldr	r5, [pc, #24]	; (8003c08 <_sbrk_r+0x1c>)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	602b      	str	r3, [r5, #0]
 8003bf8:	f7fd f832 	bl	8000c60 <_sbrk>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	d102      	bne.n	8003c06 <_sbrk_r+0x1a>
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	b103      	cbz	r3, 8003c06 <_sbrk_r+0x1a>
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	bd38      	pop	{r3, r4, r5, pc}
 8003c08:	20004104 	.word	0x20004104

08003c0c <__sread>:
 8003c0c:	b510      	push	{r4, lr}
 8003c0e:	460c      	mov	r4, r1
 8003c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c14:	f000 fab2 	bl	800417c <_read_r>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	bfab      	itete	ge
 8003c1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8003c20:	181b      	addge	r3, r3, r0
 8003c22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c26:	bfac      	ite	ge
 8003c28:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c2a:	81a3      	strhlt	r3, [r4, #12]
 8003c2c:	bd10      	pop	{r4, pc}

08003c2e <__swrite>:
 8003c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c32:	461f      	mov	r7, r3
 8003c34:	898b      	ldrh	r3, [r1, #12]
 8003c36:	05db      	lsls	r3, r3, #23
 8003c38:	4605      	mov	r5, r0
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	4616      	mov	r6, r2
 8003c3e:	d505      	bpl.n	8003c4c <__swrite+0x1e>
 8003c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c44:	2302      	movs	r3, #2
 8003c46:	2200      	movs	r2, #0
 8003c48:	f000 f9c8 	bl	8003fdc <_lseek_r>
 8003c4c:	89a3      	ldrh	r3, [r4, #12]
 8003c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c56:	81a3      	strh	r3, [r4, #12]
 8003c58:	4632      	mov	r2, r6
 8003c5a:	463b      	mov	r3, r7
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c62:	f000 b869 	b.w	8003d38 <_write_r>

08003c66 <__sseek>:
 8003c66:	b510      	push	{r4, lr}
 8003c68:	460c      	mov	r4, r1
 8003c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c6e:	f000 f9b5 	bl	8003fdc <_lseek_r>
 8003c72:	1c43      	adds	r3, r0, #1
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	bf15      	itete	ne
 8003c78:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c82:	81a3      	strheq	r3, [r4, #12]
 8003c84:	bf18      	it	ne
 8003c86:	81a3      	strhne	r3, [r4, #12]
 8003c88:	bd10      	pop	{r4, pc}

08003c8a <__sclose>:
 8003c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c8e:	f000 b8d3 	b.w	8003e38 <_close_r>
	...

08003c94 <__swbuf_r>:
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	460e      	mov	r6, r1
 8003c98:	4614      	mov	r4, r2
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	b118      	cbz	r0, 8003ca6 <__swbuf_r+0x12>
 8003c9e:	6983      	ldr	r3, [r0, #24]
 8003ca0:	b90b      	cbnz	r3, 8003ca6 <__swbuf_r+0x12>
 8003ca2:	f7ff fd61 	bl	8003768 <__sinit>
 8003ca6:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <__swbuf_r+0x98>)
 8003ca8:	429c      	cmp	r4, r3
 8003caa:	d12b      	bne.n	8003d04 <__swbuf_r+0x70>
 8003cac:	686c      	ldr	r4, [r5, #4]
 8003cae:	69a3      	ldr	r3, [r4, #24]
 8003cb0:	60a3      	str	r3, [r4, #8]
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	071a      	lsls	r2, r3, #28
 8003cb6:	d52f      	bpl.n	8003d18 <__swbuf_r+0x84>
 8003cb8:	6923      	ldr	r3, [r4, #16]
 8003cba:	b36b      	cbz	r3, 8003d18 <__swbuf_r+0x84>
 8003cbc:	6923      	ldr	r3, [r4, #16]
 8003cbe:	6820      	ldr	r0, [r4, #0]
 8003cc0:	1ac0      	subs	r0, r0, r3
 8003cc2:	6963      	ldr	r3, [r4, #20]
 8003cc4:	b2f6      	uxtb	r6, r6
 8003cc6:	4283      	cmp	r3, r0
 8003cc8:	4637      	mov	r7, r6
 8003cca:	dc04      	bgt.n	8003cd6 <__swbuf_r+0x42>
 8003ccc:	4621      	mov	r1, r4
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f000 f948 	bl	8003f64 <_fflush_r>
 8003cd4:	bb30      	cbnz	r0, 8003d24 <__swbuf_r+0x90>
 8003cd6:	68a3      	ldr	r3, [r4, #8]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	60a3      	str	r3, [r4, #8]
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	6022      	str	r2, [r4, #0]
 8003ce2:	701e      	strb	r6, [r3, #0]
 8003ce4:	6963      	ldr	r3, [r4, #20]
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	4283      	cmp	r3, r0
 8003cea:	d004      	beq.n	8003cf6 <__swbuf_r+0x62>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	07db      	lsls	r3, r3, #31
 8003cf0:	d506      	bpl.n	8003d00 <__swbuf_r+0x6c>
 8003cf2:	2e0a      	cmp	r6, #10
 8003cf4:	d104      	bne.n	8003d00 <__swbuf_r+0x6c>
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	f000 f933 	bl	8003f64 <_fflush_r>
 8003cfe:	b988      	cbnz	r0, 8003d24 <__swbuf_r+0x90>
 8003d00:	4638      	mov	r0, r7
 8003d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d04:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <__swbuf_r+0x9c>)
 8003d06:	429c      	cmp	r4, r3
 8003d08:	d101      	bne.n	8003d0e <__swbuf_r+0x7a>
 8003d0a:	68ac      	ldr	r4, [r5, #8]
 8003d0c:	e7cf      	b.n	8003cae <__swbuf_r+0x1a>
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <__swbuf_r+0xa0>)
 8003d10:	429c      	cmp	r4, r3
 8003d12:	bf08      	it	eq
 8003d14:	68ec      	ldreq	r4, [r5, #12]
 8003d16:	e7ca      	b.n	8003cae <__swbuf_r+0x1a>
 8003d18:	4621      	mov	r1, r4
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	f000 f81e 	bl	8003d5c <__swsetup_r>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d0cb      	beq.n	8003cbc <__swbuf_r+0x28>
 8003d24:	f04f 37ff 	mov.w	r7, #4294967295
 8003d28:	e7ea      	b.n	8003d00 <__swbuf_r+0x6c>
 8003d2a:	bf00      	nop
 8003d2c:	08004294 	.word	0x08004294
 8003d30:	080042b4 	.word	0x080042b4
 8003d34:	08004274 	.word	0x08004274

08003d38 <_write_r>:
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	4d07      	ldr	r5, [pc, #28]	; (8003d58 <_write_r+0x20>)
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	4608      	mov	r0, r1
 8003d40:	4611      	mov	r1, r2
 8003d42:	2200      	movs	r2, #0
 8003d44:	602a      	str	r2, [r5, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	f7fc ff39 	bl	8000bbe <_write>
 8003d4c:	1c43      	adds	r3, r0, #1
 8003d4e:	d102      	bne.n	8003d56 <_write_r+0x1e>
 8003d50:	682b      	ldr	r3, [r5, #0]
 8003d52:	b103      	cbz	r3, 8003d56 <_write_r+0x1e>
 8003d54:	6023      	str	r3, [r4, #0]
 8003d56:	bd38      	pop	{r3, r4, r5, pc}
 8003d58:	20004104 	.word	0x20004104

08003d5c <__swsetup_r>:
 8003d5c:	4b32      	ldr	r3, [pc, #200]	; (8003e28 <__swsetup_r+0xcc>)
 8003d5e:	b570      	push	{r4, r5, r6, lr}
 8003d60:	681d      	ldr	r5, [r3, #0]
 8003d62:	4606      	mov	r6, r0
 8003d64:	460c      	mov	r4, r1
 8003d66:	b125      	cbz	r5, 8003d72 <__swsetup_r+0x16>
 8003d68:	69ab      	ldr	r3, [r5, #24]
 8003d6a:	b913      	cbnz	r3, 8003d72 <__swsetup_r+0x16>
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	f7ff fcfb 	bl	8003768 <__sinit>
 8003d72:	4b2e      	ldr	r3, [pc, #184]	; (8003e2c <__swsetup_r+0xd0>)
 8003d74:	429c      	cmp	r4, r3
 8003d76:	d10f      	bne.n	8003d98 <__swsetup_r+0x3c>
 8003d78:	686c      	ldr	r4, [r5, #4]
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d80:	0719      	lsls	r1, r3, #28
 8003d82:	d42c      	bmi.n	8003dde <__swsetup_r+0x82>
 8003d84:	06dd      	lsls	r5, r3, #27
 8003d86:	d411      	bmi.n	8003dac <__swsetup_r+0x50>
 8003d88:	2309      	movs	r3, #9
 8003d8a:	6033      	str	r3, [r6, #0]
 8003d8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d90:	81a3      	strh	r3, [r4, #12]
 8003d92:	f04f 30ff 	mov.w	r0, #4294967295
 8003d96:	e03e      	b.n	8003e16 <__swsetup_r+0xba>
 8003d98:	4b25      	ldr	r3, [pc, #148]	; (8003e30 <__swsetup_r+0xd4>)
 8003d9a:	429c      	cmp	r4, r3
 8003d9c:	d101      	bne.n	8003da2 <__swsetup_r+0x46>
 8003d9e:	68ac      	ldr	r4, [r5, #8]
 8003da0:	e7eb      	b.n	8003d7a <__swsetup_r+0x1e>
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <__swsetup_r+0xd8>)
 8003da4:	429c      	cmp	r4, r3
 8003da6:	bf08      	it	eq
 8003da8:	68ec      	ldreq	r4, [r5, #12]
 8003daa:	e7e6      	b.n	8003d7a <__swsetup_r+0x1e>
 8003dac:	0758      	lsls	r0, r3, #29
 8003dae:	d512      	bpl.n	8003dd6 <__swsetup_r+0x7a>
 8003db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003db2:	b141      	cbz	r1, 8003dc6 <__swsetup_r+0x6a>
 8003db4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003db8:	4299      	cmp	r1, r3
 8003dba:	d002      	beq.n	8003dc2 <__swsetup_r+0x66>
 8003dbc:	4630      	mov	r0, r6
 8003dbe:	f000 f991 	bl	80040e4 <_free_r>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	6363      	str	r3, [r4, #52]	; 0x34
 8003dc6:	89a3      	ldrh	r3, [r4, #12]
 8003dc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003dcc:	81a3      	strh	r3, [r4, #12]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	6063      	str	r3, [r4, #4]
 8003dd2:	6923      	ldr	r3, [r4, #16]
 8003dd4:	6023      	str	r3, [r4, #0]
 8003dd6:	89a3      	ldrh	r3, [r4, #12]
 8003dd8:	f043 0308 	orr.w	r3, r3, #8
 8003ddc:	81a3      	strh	r3, [r4, #12]
 8003dde:	6923      	ldr	r3, [r4, #16]
 8003de0:	b94b      	cbnz	r3, 8003df6 <__swsetup_r+0x9a>
 8003de2:	89a3      	ldrh	r3, [r4, #12]
 8003de4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dec:	d003      	beq.n	8003df6 <__swsetup_r+0x9a>
 8003dee:	4621      	mov	r1, r4
 8003df0:	4630      	mov	r0, r6
 8003df2:	f000 f92b 	bl	800404c <__smakebuf_r>
 8003df6:	89a0      	ldrh	r0, [r4, #12]
 8003df8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dfc:	f010 0301 	ands.w	r3, r0, #1
 8003e00:	d00a      	beq.n	8003e18 <__swsetup_r+0xbc>
 8003e02:	2300      	movs	r3, #0
 8003e04:	60a3      	str	r3, [r4, #8]
 8003e06:	6963      	ldr	r3, [r4, #20]
 8003e08:	425b      	negs	r3, r3
 8003e0a:	61a3      	str	r3, [r4, #24]
 8003e0c:	6923      	ldr	r3, [r4, #16]
 8003e0e:	b943      	cbnz	r3, 8003e22 <__swsetup_r+0xc6>
 8003e10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e14:	d1ba      	bne.n	8003d8c <__swsetup_r+0x30>
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
 8003e18:	0781      	lsls	r1, r0, #30
 8003e1a:	bf58      	it	pl
 8003e1c:	6963      	ldrpl	r3, [r4, #20]
 8003e1e:	60a3      	str	r3, [r4, #8]
 8003e20:	e7f4      	b.n	8003e0c <__swsetup_r+0xb0>
 8003e22:	2000      	movs	r0, #0
 8003e24:	e7f7      	b.n	8003e16 <__swsetup_r+0xba>
 8003e26:	bf00      	nop
 8003e28:	20000010 	.word	0x20000010
 8003e2c:	08004294 	.word	0x08004294
 8003e30:	080042b4 	.word	0x080042b4
 8003e34:	08004274 	.word	0x08004274

08003e38 <_close_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	4d06      	ldr	r5, [pc, #24]	; (8003e54 <_close_r+0x1c>)
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	4604      	mov	r4, r0
 8003e40:	4608      	mov	r0, r1
 8003e42:	602b      	str	r3, [r5, #0]
 8003e44:	f7fc fed7 	bl	8000bf6 <_close>
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	d102      	bne.n	8003e52 <_close_r+0x1a>
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	b103      	cbz	r3, 8003e52 <_close_r+0x1a>
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	bd38      	pop	{r3, r4, r5, pc}
 8003e54:	20004104 	.word	0x20004104

08003e58 <__sflush_r>:
 8003e58:	898a      	ldrh	r2, [r1, #12]
 8003e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5e:	4605      	mov	r5, r0
 8003e60:	0710      	lsls	r0, r2, #28
 8003e62:	460c      	mov	r4, r1
 8003e64:	d458      	bmi.n	8003f18 <__sflush_r+0xc0>
 8003e66:	684b      	ldr	r3, [r1, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	dc05      	bgt.n	8003e78 <__sflush_r+0x20>
 8003e6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	dc02      	bgt.n	8003e78 <__sflush_r+0x20>
 8003e72:	2000      	movs	r0, #0
 8003e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e7a:	2e00      	cmp	r6, #0
 8003e7c:	d0f9      	beq.n	8003e72 <__sflush_r+0x1a>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e84:	682f      	ldr	r7, [r5, #0]
 8003e86:	602b      	str	r3, [r5, #0]
 8003e88:	d032      	beq.n	8003ef0 <__sflush_r+0x98>
 8003e8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e8c:	89a3      	ldrh	r3, [r4, #12]
 8003e8e:	075a      	lsls	r2, r3, #29
 8003e90:	d505      	bpl.n	8003e9e <__sflush_r+0x46>
 8003e92:	6863      	ldr	r3, [r4, #4]
 8003e94:	1ac0      	subs	r0, r0, r3
 8003e96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e98:	b10b      	cbz	r3, 8003e9e <__sflush_r+0x46>
 8003e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e9c:	1ac0      	subs	r0, r0, r3
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ea4:	6a21      	ldr	r1, [r4, #32]
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	47b0      	blx	r6
 8003eaa:	1c43      	adds	r3, r0, #1
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	d106      	bne.n	8003ebe <__sflush_r+0x66>
 8003eb0:	6829      	ldr	r1, [r5, #0]
 8003eb2:	291d      	cmp	r1, #29
 8003eb4:	d82c      	bhi.n	8003f10 <__sflush_r+0xb8>
 8003eb6:	4a2a      	ldr	r2, [pc, #168]	; (8003f60 <__sflush_r+0x108>)
 8003eb8:	40ca      	lsrs	r2, r1
 8003eba:	07d6      	lsls	r6, r2, #31
 8003ebc:	d528      	bpl.n	8003f10 <__sflush_r+0xb8>
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	6062      	str	r2, [r4, #4]
 8003ec2:	04d9      	lsls	r1, r3, #19
 8003ec4:	6922      	ldr	r2, [r4, #16]
 8003ec6:	6022      	str	r2, [r4, #0]
 8003ec8:	d504      	bpl.n	8003ed4 <__sflush_r+0x7c>
 8003eca:	1c42      	adds	r2, r0, #1
 8003ecc:	d101      	bne.n	8003ed2 <__sflush_r+0x7a>
 8003ece:	682b      	ldr	r3, [r5, #0]
 8003ed0:	b903      	cbnz	r3, 8003ed4 <__sflush_r+0x7c>
 8003ed2:	6560      	str	r0, [r4, #84]	; 0x54
 8003ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ed6:	602f      	str	r7, [r5, #0]
 8003ed8:	2900      	cmp	r1, #0
 8003eda:	d0ca      	beq.n	8003e72 <__sflush_r+0x1a>
 8003edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ee0:	4299      	cmp	r1, r3
 8003ee2:	d002      	beq.n	8003eea <__sflush_r+0x92>
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f000 f8fd 	bl	80040e4 <_free_r>
 8003eea:	2000      	movs	r0, #0
 8003eec:	6360      	str	r0, [r4, #52]	; 0x34
 8003eee:	e7c1      	b.n	8003e74 <__sflush_r+0x1c>
 8003ef0:	6a21      	ldr	r1, [r4, #32]
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	47b0      	blx	r6
 8003ef8:	1c41      	adds	r1, r0, #1
 8003efa:	d1c7      	bne.n	8003e8c <__sflush_r+0x34>
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0c4      	beq.n	8003e8c <__sflush_r+0x34>
 8003f02:	2b1d      	cmp	r3, #29
 8003f04:	d001      	beq.n	8003f0a <__sflush_r+0xb2>
 8003f06:	2b16      	cmp	r3, #22
 8003f08:	d101      	bne.n	8003f0e <__sflush_r+0xb6>
 8003f0a:	602f      	str	r7, [r5, #0]
 8003f0c:	e7b1      	b.n	8003e72 <__sflush_r+0x1a>
 8003f0e:	89a3      	ldrh	r3, [r4, #12]
 8003f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f14:	81a3      	strh	r3, [r4, #12]
 8003f16:	e7ad      	b.n	8003e74 <__sflush_r+0x1c>
 8003f18:	690f      	ldr	r7, [r1, #16]
 8003f1a:	2f00      	cmp	r7, #0
 8003f1c:	d0a9      	beq.n	8003e72 <__sflush_r+0x1a>
 8003f1e:	0793      	lsls	r3, r2, #30
 8003f20:	680e      	ldr	r6, [r1, #0]
 8003f22:	bf08      	it	eq
 8003f24:	694b      	ldreq	r3, [r1, #20]
 8003f26:	600f      	str	r7, [r1, #0]
 8003f28:	bf18      	it	ne
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	eba6 0807 	sub.w	r8, r6, r7
 8003f30:	608b      	str	r3, [r1, #8]
 8003f32:	f1b8 0f00 	cmp.w	r8, #0
 8003f36:	dd9c      	ble.n	8003e72 <__sflush_r+0x1a>
 8003f38:	6a21      	ldr	r1, [r4, #32]
 8003f3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f3c:	4643      	mov	r3, r8
 8003f3e:	463a      	mov	r2, r7
 8003f40:	4628      	mov	r0, r5
 8003f42:	47b0      	blx	r6
 8003f44:	2800      	cmp	r0, #0
 8003f46:	dc06      	bgt.n	8003f56 <__sflush_r+0xfe>
 8003f48:	89a3      	ldrh	r3, [r4, #12]
 8003f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f4e:	81a3      	strh	r3, [r4, #12]
 8003f50:	f04f 30ff 	mov.w	r0, #4294967295
 8003f54:	e78e      	b.n	8003e74 <__sflush_r+0x1c>
 8003f56:	4407      	add	r7, r0
 8003f58:	eba8 0800 	sub.w	r8, r8, r0
 8003f5c:	e7e9      	b.n	8003f32 <__sflush_r+0xda>
 8003f5e:	bf00      	nop
 8003f60:	20400001 	.word	0x20400001

08003f64 <_fflush_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	690b      	ldr	r3, [r1, #16]
 8003f68:	4605      	mov	r5, r0
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	b913      	cbnz	r3, 8003f74 <_fflush_r+0x10>
 8003f6e:	2500      	movs	r5, #0
 8003f70:	4628      	mov	r0, r5
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
 8003f74:	b118      	cbz	r0, 8003f7e <_fflush_r+0x1a>
 8003f76:	6983      	ldr	r3, [r0, #24]
 8003f78:	b90b      	cbnz	r3, 8003f7e <_fflush_r+0x1a>
 8003f7a:	f7ff fbf5 	bl	8003768 <__sinit>
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <_fflush_r+0x6c>)
 8003f80:	429c      	cmp	r4, r3
 8003f82:	d11b      	bne.n	8003fbc <_fflush_r+0x58>
 8003f84:	686c      	ldr	r4, [r5, #4]
 8003f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0ef      	beq.n	8003f6e <_fflush_r+0xa>
 8003f8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f90:	07d0      	lsls	r0, r2, #31
 8003f92:	d404      	bmi.n	8003f9e <_fflush_r+0x3a>
 8003f94:	0599      	lsls	r1, r3, #22
 8003f96:	d402      	bmi.n	8003f9e <_fflush_r+0x3a>
 8003f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f9a:	f7ff fca8 	bl	80038ee <__retarget_lock_acquire_recursive>
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	f7ff ff59 	bl	8003e58 <__sflush_r>
 8003fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fa8:	07da      	lsls	r2, r3, #31
 8003faa:	4605      	mov	r5, r0
 8003fac:	d4e0      	bmi.n	8003f70 <_fflush_r+0xc>
 8003fae:	89a3      	ldrh	r3, [r4, #12]
 8003fb0:	059b      	lsls	r3, r3, #22
 8003fb2:	d4dd      	bmi.n	8003f70 <_fflush_r+0xc>
 8003fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fb6:	f7ff fc9b 	bl	80038f0 <__retarget_lock_release_recursive>
 8003fba:	e7d9      	b.n	8003f70 <_fflush_r+0xc>
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <_fflush_r+0x70>)
 8003fbe:	429c      	cmp	r4, r3
 8003fc0:	d101      	bne.n	8003fc6 <_fflush_r+0x62>
 8003fc2:	68ac      	ldr	r4, [r5, #8]
 8003fc4:	e7df      	b.n	8003f86 <_fflush_r+0x22>
 8003fc6:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <_fflush_r+0x74>)
 8003fc8:	429c      	cmp	r4, r3
 8003fca:	bf08      	it	eq
 8003fcc:	68ec      	ldreq	r4, [r5, #12]
 8003fce:	e7da      	b.n	8003f86 <_fflush_r+0x22>
 8003fd0:	08004294 	.word	0x08004294
 8003fd4:	080042b4 	.word	0x080042b4
 8003fd8:	08004274 	.word	0x08004274

08003fdc <_lseek_r>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	4d07      	ldr	r5, [pc, #28]	; (8003ffc <_lseek_r+0x20>)
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	4608      	mov	r0, r1
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	602a      	str	r2, [r5, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f7fc fe2a 	bl	8000c44 <_lseek>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	d102      	bne.n	8003ffa <_lseek_r+0x1e>
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	b103      	cbz	r3, 8003ffa <_lseek_r+0x1e>
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	bd38      	pop	{r3, r4, r5, pc}
 8003ffc:	20004104 	.word	0x20004104

08004000 <__swhatbuf_r>:
 8004000:	b570      	push	{r4, r5, r6, lr}
 8004002:	460e      	mov	r6, r1
 8004004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004008:	2900      	cmp	r1, #0
 800400a:	b096      	sub	sp, #88	; 0x58
 800400c:	4614      	mov	r4, r2
 800400e:	461d      	mov	r5, r3
 8004010:	da08      	bge.n	8004024 <__swhatbuf_r+0x24>
 8004012:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	602a      	str	r2, [r5, #0]
 800401a:	061a      	lsls	r2, r3, #24
 800401c:	d410      	bmi.n	8004040 <__swhatbuf_r+0x40>
 800401e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004022:	e00e      	b.n	8004042 <__swhatbuf_r+0x42>
 8004024:	466a      	mov	r2, sp
 8004026:	f000 f8bb 	bl	80041a0 <_fstat_r>
 800402a:	2800      	cmp	r0, #0
 800402c:	dbf1      	blt.n	8004012 <__swhatbuf_r+0x12>
 800402e:	9a01      	ldr	r2, [sp, #4]
 8004030:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004034:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004038:	425a      	negs	r2, r3
 800403a:	415a      	adcs	r2, r3
 800403c:	602a      	str	r2, [r5, #0]
 800403e:	e7ee      	b.n	800401e <__swhatbuf_r+0x1e>
 8004040:	2340      	movs	r3, #64	; 0x40
 8004042:	2000      	movs	r0, #0
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	b016      	add	sp, #88	; 0x58
 8004048:	bd70      	pop	{r4, r5, r6, pc}
	...

0800404c <__smakebuf_r>:
 800404c:	898b      	ldrh	r3, [r1, #12]
 800404e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004050:	079d      	lsls	r5, r3, #30
 8004052:	4606      	mov	r6, r0
 8004054:	460c      	mov	r4, r1
 8004056:	d507      	bpl.n	8004068 <__smakebuf_r+0x1c>
 8004058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800405c:	6023      	str	r3, [r4, #0]
 800405e:	6123      	str	r3, [r4, #16]
 8004060:	2301      	movs	r3, #1
 8004062:	6163      	str	r3, [r4, #20]
 8004064:	b002      	add	sp, #8
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	ab01      	add	r3, sp, #4
 800406a:	466a      	mov	r2, sp
 800406c:	f7ff ffc8 	bl	8004000 <__swhatbuf_r>
 8004070:	9900      	ldr	r1, [sp, #0]
 8004072:	4605      	mov	r5, r0
 8004074:	4630      	mov	r0, r6
 8004076:	f7ff fc65 	bl	8003944 <_malloc_r>
 800407a:	b948      	cbnz	r0, 8004090 <__smakebuf_r+0x44>
 800407c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004080:	059a      	lsls	r2, r3, #22
 8004082:	d4ef      	bmi.n	8004064 <__smakebuf_r+0x18>
 8004084:	f023 0303 	bic.w	r3, r3, #3
 8004088:	f043 0302 	orr.w	r3, r3, #2
 800408c:	81a3      	strh	r3, [r4, #12]
 800408e:	e7e3      	b.n	8004058 <__smakebuf_r+0xc>
 8004090:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <__smakebuf_r+0x7c>)
 8004092:	62b3      	str	r3, [r6, #40]	; 0x28
 8004094:	89a3      	ldrh	r3, [r4, #12]
 8004096:	6020      	str	r0, [r4, #0]
 8004098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409c:	81a3      	strh	r3, [r4, #12]
 800409e:	9b00      	ldr	r3, [sp, #0]
 80040a0:	6163      	str	r3, [r4, #20]
 80040a2:	9b01      	ldr	r3, [sp, #4]
 80040a4:	6120      	str	r0, [r4, #16]
 80040a6:	b15b      	cbz	r3, 80040c0 <__smakebuf_r+0x74>
 80040a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040ac:	4630      	mov	r0, r6
 80040ae:	f000 f889 	bl	80041c4 <_isatty_r>
 80040b2:	b128      	cbz	r0, 80040c0 <__smakebuf_r+0x74>
 80040b4:	89a3      	ldrh	r3, [r4, #12]
 80040b6:	f023 0303 	bic.w	r3, r3, #3
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	81a3      	strh	r3, [r4, #12]
 80040c0:	89a0      	ldrh	r0, [r4, #12]
 80040c2:	4305      	orrs	r5, r0
 80040c4:	81a5      	strh	r5, [r4, #12]
 80040c6:	e7cd      	b.n	8004064 <__smakebuf_r+0x18>
 80040c8:	08003701 	.word	0x08003701

080040cc <__malloc_lock>:
 80040cc:	4801      	ldr	r0, [pc, #4]	; (80040d4 <__malloc_lock+0x8>)
 80040ce:	f7ff bc0e 	b.w	80038ee <__retarget_lock_acquire_recursive>
 80040d2:	bf00      	nop
 80040d4:	200040f8 	.word	0x200040f8

080040d8 <__malloc_unlock>:
 80040d8:	4801      	ldr	r0, [pc, #4]	; (80040e0 <__malloc_unlock+0x8>)
 80040da:	f7ff bc09 	b.w	80038f0 <__retarget_lock_release_recursive>
 80040de:	bf00      	nop
 80040e0:	200040f8 	.word	0x200040f8

080040e4 <_free_r>:
 80040e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040e6:	2900      	cmp	r1, #0
 80040e8:	d044      	beq.n	8004174 <_free_r+0x90>
 80040ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ee:	9001      	str	r0, [sp, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f1a1 0404 	sub.w	r4, r1, #4
 80040f6:	bfb8      	it	lt
 80040f8:	18e4      	addlt	r4, r4, r3
 80040fa:	f7ff ffe7 	bl	80040cc <__malloc_lock>
 80040fe:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <_free_r+0x94>)
 8004100:	9801      	ldr	r0, [sp, #4]
 8004102:	6813      	ldr	r3, [r2, #0]
 8004104:	b933      	cbnz	r3, 8004114 <_free_r+0x30>
 8004106:	6063      	str	r3, [r4, #4]
 8004108:	6014      	str	r4, [r2, #0]
 800410a:	b003      	add	sp, #12
 800410c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004110:	f7ff bfe2 	b.w	80040d8 <__malloc_unlock>
 8004114:	42a3      	cmp	r3, r4
 8004116:	d908      	bls.n	800412a <_free_r+0x46>
 8004118:	6825      	ldr	r5, [r4, #0]
 800411a:	1961      	adds	r1, r4, r5
 800411c:	428b      	cmp	r3, r1
 800411e:	bf01      	itttt	eq
 8004120:	6819      	ldreq	r1, [r3, #0]
 8004122:	685b      	ldreq	r3, [r3, #4]
 8004124:	1949      	addeq	r1, r1, r5
 8004126:	6021      	streq	r1, [r4, #0]
 8004128:	e7ed      	b.n	8004106 <_free_r+0x22>
 800412a:	461a      	mov	r2, r3
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	b10b      	cbz	r3, 8004134 <_free_r+0x50>
 8004130:	42a3      	cmp	r3, r4
 8004132:	d9fa      	bls.n	800412a <_free_r+0x46>
 8004134:	6811      	ldr	r1, [r2, #0]
 8004136:	1855      	adds	r5, r2, r1
 8004138:	42a5      	cmp	r5, r4
 800413a:	d10b      	bne.n	8004154 <_free_r+0x70>
 800413c:	6824      	ldr	r4, [r4, #0]
 800413e:	4421      	add	r1, r4
 8004140:	1854      	adds	r4, r2, r1
 8004142:	42a3      	cmp	r3, r4
 8004144:	6011      	str	r1, [r2, #0]
 8004146:	d1e0      	bne.n	800410a <_free_r+0x26>
 8004148:	681c      	ldr	r4, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	6053      	str	r3, [r2, #4]
 800414e:	4421      	add	r1, r4
 8004150:	6011      	str	r1, [r2, #0]
 8004152:	e7da      	b.n	800410a <_free_r+0x26>
 8004154:	d902      	bls.n	800415c <_free_r+0x78>
 8004156:	230c      	movs	r3, #12
 8004158:	6003      	str	r3, [r0, #0]
 800415a:	e7d6      	b.n	800410a <_free_r+0x26>
 800415c:	6825      	ldr	r5, [r4, #0]
 800415e:	1961      	adds	r1, r4, r5
 8004160:	428b      	cmp	r3, r1
 8004162:	bf04      	itt	eq
 8004164:	6819      	ldreq	r1, [r3, #0]
 8004166:	685b      	ldreq	r3, [r3, #4]
 8004168:	6063      	str	r3, [r4, #4]
 800416a:	bf04      	itt	eq
 800416c:	1949      	addeq	r1, r1, r5
 800416e:	6021      	streq	r1, [r4, #0]
 8004170:	6054      	str	r4, [r2, #4]
 8004172:	e7ca      	b.n	800410a <_free_r+0x26>
 8004174:	b003      	add	sp, #12
 8004176:	bd30      	pop	{r4, r5, pc}
 8004178:	200040fc 	.word	0x200040fc

0800417c <_read_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4d07      	ldr	r5, [pc, #28]	; (800419c <_read_r+0x20>)
 8004180:	4604      	mov	r4, r0
 8004182:	4608      	mov	r0, r1
 8004184:	4611      	mov	r1, r2
 8004186:	2200      	movs	r2, #0
 8004188:	602a      	str	r2, [r5, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	f7fc fcfa 	bl	8000b84 <_read>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d102      	bne.n	800419a <_read_r+0x1e>
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	b103      	cbz	r3, 800419a <_read_r+0x1e>
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	bd38      	pop	{r3, r4, r5, pc}
 800419c:	20004104 	.word	0x20004104

080041a0 <_fstat_r>:
 80041a0:	b538      	push	{r3, r4, r5, lr}
 80041a2:	4d07      	ldr	r5, [pc, #28]	; (80041c0 <_fstat_r+0x20>)
 80041a4:	2300      	movs	r3, #0
 80041a6:	4604      	mov	r4, r0
 80041a8:	4608      	mov	r0, r1
 80041aa:	4611      	mov	r1, r2
 80041ac:	602b      	str	r3, [r5, #0]
 80041ae:	f7fc fd2e 	bl	8000c0e <_fstat>
 80041b2:	1c43      	adds	r3, r0, #1
 80041b4:	d102      	bne.n	80041bc <_fstat_r+0x1c>
 80041b6:	682b      	ldr	r3, [r5, #0]
 80041b8:	b103      	cbz	r3, 80041bc <_fstat_r+0x1c>
 80041ba:	6023      	str	r3, [r4, #0]
 80041bc:	bd38      	pop	{r3, r4, r5, pc}
 80041be:	bf00      	nop
 80041c0:	20004104 	.word	0x20004104

080041c4 <_isatty_r>:
 80041c4:	b538      	push	{r3, r4, r5, lr}
 80041c6:	4d06      	ldr	r5, [pc, #24]	; (80041e0 <_isatty_r+0x1c>)
 80041c8:	2300      	movs	r3, #0
 80041ca:	4604      	mov	r4, r0
 80041cc:	4608      	mov	r0, r1
 80041ce:	602b      	str	r3, [r5, #0]
 80041d0:	f7fc fd2d 	bl	8000c2e <_isatty>
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	d102      	bne.n	80041de <_isatty_r+0x1a>
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	b103      	cbz	r3, 80041de <_isatty_r+0x1a>
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	bd38      	pop	{r3, r4, r5, pc}
 80041e0:	20004104 	.word	0x20004104

080041e4 <_init>:
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e6:	bf00      	nop
 80041e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ea:	bc08      	pop	{r3}
 80041ec:	469e      	mov	lr, r3
 80041ee:	4770      	bx	lr

080041f0 <_fini>:
 80041f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f2:	bf00      	nop
 80041f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f6:	bc08      	pop	{r3}
 80041f8:	469e      	mov	lr, r3
 80041fa:	4770      	bx	lr
