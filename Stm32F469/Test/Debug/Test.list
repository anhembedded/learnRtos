
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000332c  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080034e0  080034e0  000134e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003500  08003500  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003500  08003500  00013500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003508  08003508  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003508  08003508  00013508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800350c  0800350c  0001350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000001b0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f973  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a58  00000000  00000000  0002f9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  00032410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c98  00000000  00000000  00033210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a3e8  00000000  00000000  00033ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000118e7  00000000  00000000  0005e290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7aaa  00000000  00000000  0006fb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00167621  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003834  00000000  00000000  00167674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000010 	.word	0x20000010
 80001d0:	00000000 	.word	0x00000000
 80001d4:	080034c8 	.word	0x080034c8

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000014 	.word	0x20000014
 80001f0:	080034c8 	.word	0x080034c8

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b974 	b.w	80004f4 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468e      	mov	lr, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14d      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000232:	428a      	cmp	r2, r1
 8000234:	4694      	mov	ip, r2
 8000236:	d969      	bls.n	800030c <__udivmoddi4+0xe8>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b152      	cbz	r2, 8000254 <__udivmoddi4+0x30>
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	f1c2 0120 	rsb	r1, r2, #32
 8000246:	fa20 f101 	lsr.w	r1, r0, r1
 800024a:	fa0c fc02 	lsl.w	ip, ip, r2
 800024e:	ea41 0e03 	orr.w	lr, r1, r3
 8000252:	4094      	lsls	r4, r2
 8000254:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000258:	0c21      	lsrs	r1, r4, #16
 800025a:	fbbe f6f8 	udiv	r6, lr, r8
 800025e:	fa1f f78c 	uxth.w	r7, ip
 8000262:	fb08 e316 	mls	r3, r8, r6, lr
 8000266:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026a:	fb06 f107 	mul.w	r1, r6, r7
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f106 30ff 	add.w	r0, r6, #4294967295
 800027a:	f080 811f 	bcs.w	80004bc <__udivmoddi4+0x298>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 811c 	bls.w	80004bc <__udivmoddi4+0x298>
 8000284:	3e02      	subs	r6, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000290:	fb08 3310 	mls	r3, r8, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 f707 	mul.w	r7, r0, r7
 800029c:	42a7      	cmp	r7, r4
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x92>
 80002a0:	eb1c 0404 	adds.w	r4, ip, r4
 80002a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a8:	f080 810a 	bcs.w	80004c0 <__udivmoddi4+0x29c>
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	f240 8107 	bls.w	80004c0 <__udivmoddi4+0x29c>
 80002b2:	4464      	add	r4, ip
 80002b4:	3802      	subs	r0, #2
 80002b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ba:	1be4      	subs	r4, r4, r7
 80002bc:	2600      	movs	r6, #0
 80002be:	b11d      	cbz	r5, 80002c8 <__udivmoddi4+0xa4>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c5 4300 	strd	r4, r3, [r5]
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xc2>
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	f000 80ef 	beq.w	80004b6 <__udivmoddi4+0x292>
 80002d8:	2600      	movs	r6, #0
 80002da:	e9c5 0100 	strd	r0, r1, [r5]
 80002de:	4630      	mov	r0, r6
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f683 	clz	r6, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d14a      	bne.n	8000384 <__udivmoddi4+0x160>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd4>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80f9 	bhi.w	80004ea <__udivmoddi4+0x2c6>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	469e      	mov	lr, r3
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa4>
 8000306:	e9c5 4e00 	strd	r4, lr, [r5]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa4>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xec>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 8092 	bne.w	800043e <__udivmoddi4+0x21a>
 800031a:	eba1 010c 	sub.w	r1, r1, ip
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2601      	movs	r6, #1
 8000328:	0c20      	lsrs	r0, r4, #16
 800032a:	fbb1 f3f7 	udiv	r3, r1, r7
 800032e:	fb07 1113 	mls	r1, r7, r3, r1
 8000332:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000336:	fb0e f003 	mul.w	r0, lr, r3
 800033a:	4288      	cmp	r0, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x12c>
 800033e:	eb1c 0101 	adds.w	r1, ip, r1
 8000342:	f103 38ff 	add.w	r8, r3, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x12a>
 8000348:	4288      	cmp	r0, r1
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2c0>
 800034e:	4643      	mov	r3, r8
 8000350:	1a09      	subs	r1, r1, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb1 f0f7 	udiv	r0, r1, r7
 8000358:	fb07 1110 	mls	r1, r7, r0, r1
 800035c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x156>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x154>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 8000378:	4608      	mov	r0, r1
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000382:	e79c      	b.n	80002be <__udivmoddi4+0x9a>
 8000384:	f1c6 0720 	rsb	r7, r6, #32
 8000388:	40b3      	lsls	r3, r6
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa20 f407 	lsr.w	r4, r0, r7
 8000396:	fa01 f306 	lsl.w	r3, r1, r6
 800039a:	431c      	orrs	r4, r3
 800039c:	40f9      	lsrs	r1, r7
 800039e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a2:	fa00 f306 	lsl.w	r3, r0, r6
 80003a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003aa:	0c20      	lsrs	r0, r4, #16
 80003ac:	fa1f fe8c 	uxth.w	lr, ip
 80003b0:	fb09 1118 	mls	r1, r9, r8, r1
 80003b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b8:	fb08 f00e 	mul.w	r0, r8, lr
 80003bc:	4288      	cmp	r0, r1
 80003be:	fa02 f206 	lsl.w	r2, r2, r6
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b8>
 80003c4:	eb1c 0101 	adds.w	r1, ip, r1
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2bc>
 80003d0:	4288      	cmp	r0, r1
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2bc>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4461      	add	r1, ip
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e4:	fb09 1110 	mls	r1, r9, r0, r1
 80003e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f0:	458e      	cmp	lr, r1
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1e2>
 80003f4:	eb1c 0101 	adds.w	r1, ip, r1
 80003f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2b4>
 80003fe:	458e      	cmp	lr, r1
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2b4>
 8000402:	3802      	subs	r0, #2
 8000404:	4461      	add	r1, ip
 8000406:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040a:	fba0 9402 	umull	r9, r4, r0, r2
 800040e:	eba1 010e 	sub.w	r1, r1, lr
 8000412:	42a1      	cmp	r1, r4
 8000414:	46c8      	mov	r8, r9
 8000416:	46a6      	mov	lr, r4
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x2a4>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x2a0>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x212>
 800041e:	ebb3 0208 	subs.w	r2, r3, r8
 8000422:	eb61 010e 	sbc.w	r1, r1, lr
 8000426:	fa01 f707 	lsl.w	r7, r1, r7
 800042a:	fa22 f306 	lsr.w	r3, r2, r6
 800042e:	40f1      	lsrs	r1, r6
 8000430:	431f      	orrs	r7, r3
 8000432:	e9c5 7100 	strd	r7, r1, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1c2 0320 	rsb	r3, r2, #32
 8000442:	40d8      	lsrs	r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa21 f303 	lsr.w	r3, r1, r3
 800044c:	4091      	lsls	r1, r2
 800044e:	4301      	orrs	r1, r0
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb3 f0f7 	udiv	r0, r3, r7
 800045c:	fb07 3610 	mls	r6, r7, r0, r3
 8000460:	0c0b      	lsrs	r3, r1, #16
 8000462:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000466:	fb00 f60e 	mul.w	r6, r0, lr
 800046a:	429e      	cmp	r6, r3
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x260>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b8>
 800047c:	429e      	cmp	r6, r3
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b8>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	b289      	uxth	r1, r1
 8000488:	fbb3 f6f7 	udiv	r6, r3, r7
 800048c:	fb07 3316 	mls	r3, r7, r6, r3
 8000490:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000494:	fb06 f30e 	mul.w	r3, r6, lr
 8000498:	428b      	cmp	r3, r1
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x28a>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 80004aa:	3e02      	subs	r6, #2
 80004ac:	4461      	add	r1, ip
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0x104>
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e705      	b.n	80002c8 <__udivmoddi4+0xa4>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e3      	b.n	8000288 <__udivmoddi4+0x64>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6f8      	b.n	80002b6 <__udivmoddi4+0x92>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f8>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f8>
 80004d4:	4646      	mov	r6, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x28a>
 80004d8:	4620      	mov	r0, r4
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1e2>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x260>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b8>
 80004e4:	3b02      	subs	r3, #2
 80004e6:	4461      	add	r1, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x12c>
 80004ea:	4630      	mov	r0, r6
 80004ec:	e709      	b.n	8000302 <__udivmoddi4+0xde>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x156>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <MX_CRC_Init+0x20>)
 80004fe:	4a07      	ldr	r2, [pc, #28]	; (800051c <MX_CRC_Init+0x24>)
 8000500:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <MX_CRC_Init+0x20>)
 8000504:	f001 f8d6 	bl	80016b4 <HAL_CRC_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800050e:	f000 fc17 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	2000002c 	.word	0x2000002c
 800051c:	40023000 	.word	0x40023000

08000520 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0b      	ldr	r2, [pc, #44]	; (800055c <HAL_CRC_MspInit+0x3c>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d10d      	bne.n	800054e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <HAL_CRC_MspInit+0x40>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a09      	ldr	r2, [pc, #36]	; (8000560 <HAL_CRC_MspInit+0x40>)
 800053c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <HAL_CRC_MspInit+0x40>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40023000 	.word	0x40023000
 8000560:	40023800 	.word	0x40023800

08000564 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
 8000578:	615a      	str	r2, [r3, #20]
 800057a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <MX_FMC_Init+0x98>)
 800057e:	4a20      	ldr	r2, [pc, #128]	; (8000600 <MX_FMC_Init+0x9c>)
 8000580:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000582:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <MX_FMC_Init+0x98>)
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <MX_FMC_Init+0x98>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800058e:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <MX_FMC_Init+0x98>)
 8000590:	2204      	movs	r2, #4
 8000592:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000594:	4b19      	ldr	r3, [pc, #100]	; (80005fc <MX_FMC_Init+0x98>)
 8000596:	2220      	movs	r2, #32
 8000598:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800059a:	4b18      	ldr	r3, [pc, #96]	; (80005fc <MX_FMC_Init+0x98>)
 800059c:	2240      	movs	r2, #64	; 0x40
 800059e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <MX_FMC_Init+0x98>)
 80005a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80005a6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <MX_FMC_Init+0x98>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <MX_FMC_Init+0x98>)
 80005b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005b4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_FMC_Init+0x98>)
 80005b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MX_FMC_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80005c8:	2307      	movs	r3, #7
 80005ca:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80005d0:	2307      	movs	r3, #7
 80005d2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80005d4:	2303      	movs	r3, #3
 80005d6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80005dc:	2302      	movs	r3, #2
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	4619      	mov	r1, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <MX_FMC_Init+0x98>)
 80005e6:	f002 f917 	bl	8002818 <HAL_SDRAM_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80005f0:	f000 fba6 	bl	8000d40 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80005f4:	bf00      	nop
 80005f6:	3720      	adds	r7, #32
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000034 	.word	0x20000034
 8000600:	a0000140 	.word	0xa0000140

08000604 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000618:	4b44      	ldr	r3, [pc, #272]	; (800072c <HAL_FMC_MspInit+0x128>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	f040 8081 	bne.w	8000724 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8000622:	4b42      	ldr	r3, [pc, #264]	; (800072c <HAL_FMC_MspInit+0x128>)
 8000624:	2201      	movs	r2, #1
 8000626:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b40      	ldr	r3, [pc, #256]	; (8000730 <HAL_FMC_MspInit+0x12c>)
 800062e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000630:	4a3f      	ldr	r2, [pc, #252]	; (8000730 <HAL_FMC_MspInit+0x12c>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6393      	str	r3, [r2, #56]	; 0x38
 8000638:	4b3d      	ldr	r3, [pc, #244]	; (8000730 <HAL_FMC_MspInit+0x12c>)
 800063a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8000644:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000648:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064a:	2302      	movs	r3, #2
 800064c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000652:	2303      	movs	r3, #3
 8000654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000656:	230c      	movs	r3, #12
 8000658:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	4619      	mov	r1, r3
 800065e:	4835      	ldr	r0, [pc, #212]	; (8000734 <HAL_FMC_MspInit+0x130>)
 8000660:	f001 fa02 	bl	8001a68 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8000664:	f248 1333 	movw	r3, #33075	; 0x8133
 8000668:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	2302      	movs	r3, #2
 800066c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000672:	2303      	movs	r3, #3
 8000674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000676:	230c      	movs	r3, #12
 8000678:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4619      	mov	r1, r3
 800067e:	482e      	ldr	r0, [pc, #184]	; (8000738 <HAL_FMC_MspInit+0x134>)
 8000680:	f001 f9f2 	bl	8001a68 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8000684:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000688:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000696:	230c      	movs	r3, #12
 8000698:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4619      	mov	r1, r3
 800069e:	4827      	ldr	r0, [pc, #156]	; (800073c <HAL_FMC_MspInit+0x138>)
 80006a0:	f001 f9e2 	bl	8001a68 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 80006a4:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80006a8:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b2:	2303      	movs	r3, #3
 80006b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006b6:	230c      	movs	r3, #12
 80006b8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4619      	mov	r1, r3
 80006be:	4820      	ldr	r0, [pc, #128]	; (8000740 <HAL_FMC_MspInit+0x13c>)
 80006c0:	f001 f9d2 	bl	8001a68 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80006c4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80006c8:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	2302      	movs	r3, #2
 80006cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006d6:	230c      	movs	r3, #12
 80006d8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4619      	mov	r1, r3
 80006de:	4819      	ldr	r0, [pc, #100]	; (8000744 <HAL_FMC_MspInit+0x140>)
 80006e0:	f001 f9c2 	bl	8001a68 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 80006e4:	f64f 730c 	movw	r3, #65292	; 0xff0c
 80006e8:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006f6:	230c      	movs	r3, #12
 80006f8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	4812      	ldr	r0, [pc, #72]	; (8000748 <HAL_FMC_MspInit+0x144>)
 8000700:	f001 f9b2 	bl	8001a68 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000704:	2301      	movs	r3, #1
 8000706:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000714:	230c      	movs	r3, #12
 8000716:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4619      	mov	r1, r3
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <HAL_FMC_MspInit+0x148>)
 800071e:	f001 f9a3 	bl	8001a68 <HAL_GPIO_Init>
 8000722:	e000      	b.n	8000726 <HAL_FMC_MspInit+0x122>
    return;
 8000724:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000068 	.word	0x20000068
 8000730:	40023800 	.word	0x40023800
 8000734:	40021000 	.word	0x40021000
 8000738:	40021800 	.word	0x40021800
 800073c:	40020c00 	.word	0x40020c00
 8000740:	40022000 	.word	0x40022000
 8000744:	40021400 	.word	0x40021400
 8000748:	40021c00 	.word	0x40021c00
 800074c:	40020800 	.word	0x40020800

08000750 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000758:	f7ff ff54 	bl	8000604 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <MX_GPIO_Init>:
     PJ2   ------> DSIHOST_TE
     PB10   ------> USART3_TX
     PB11   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b090      	sub	sp, #64	; 0x40
 8000768:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
 800077e:	4bad      	ldr	r3, [pc, #692]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4aac      	ldr	r2, [pc, #688]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 8000784:	f043 0310 	orr.w	r3, r3, #16
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4baa      	ldr	r3, [pc, #680]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0310 	and.w	r3, r3, #16
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
 8000794:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
 800079a:	4ba6      	ldr	r3, [pc, #664]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4aa5      	ldr	r2, [pc, #660]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 80007a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4ba3      	ldr	r3, [pc, #652]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
 80007b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
 80007b6:	4b9f      	ldr	r3, [pc, #636]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a9e      	ldr	r2, [pc, #632]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b9c      	ldr	r3, [pc, #624]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	623b      	str	r3, [r7, #32]
 80007cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
 80007d2:	4b98      	ldr	r3, [pc, #608]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a97      	ldr	r2, [pc, #604]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b95      	ldr	r3, [pc, #596]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	61fb      	str	r3, [r7, #28]
 80007e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
 80007ee:	4b91      	ldr	r3, [pc, #580]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a90      	ldr	r2, [pc, #576]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b8e      	ldr	r3, [pc, #568]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	61bb      	str	r3, [r7, #24]
 8000804:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	4b8a      	ldr	r3, [pc, #552]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a89      	ldr	r2, [pc, #548]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b87      	ldr	r3, [pc, #540]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b83      	ldr	r3, [pc, #524]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a82      	ldr	r2, [pc, #520]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 800082c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b80      	ldr	r3, [pc, #512]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b7c      	ldr	r3, [pc, #496]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a7b      	ldr	r2, [pc, #492]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 8000848:	f043 0320 	orr.w	r3, r3, #32
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b79      	ldr	r3, [pc, #484]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0320 	and.w	r3, r3, #32
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b75      	ldr	r3, [pc, #468]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a74      	ldr	r2, [pc, #464]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 8000864:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b72      	ldr	r3, [pc, #456]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b6e      	ldr	r3, [pc, #440]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a6d      	ldr	r2, [pc, #436]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b6b      	ldr	r3, [pc, #428]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b67      	ldr	r3, [pc, #412]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a66      	ldr	r2, [pc, #408]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 800089c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b64      	ldr	r3, [pc, #400]	; (8000a34 <MX_GPIO_Init+0x2d0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	210c      	movs	r1, #12
 80008b2:	4861      	ldr	r0, [pc, #388]	; (8000a38 <MX_GPIO_Init+0x2d4>)
 80008b4:	f001 fa84 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2130      	movs	r1, #48	; 0x30
 80008bc:	485f      	ldr	r0, [pc, #380]	; (8000a3c <MX_GPIO_Init+0x2d8>)
 80008be:	f001 fa7f 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2108      	movs	r1, #8
 80008c6:	485e      	ldr	r0, [pc, #376]	; (8000a40 <MX_GPIO_Init+0x2dc>)
 80008c8:	f001 fa7a 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2140      	movs	r1, #64	; 0x40
 80008d0:	485c      	ldr	r0, [pc, #368]	; (8000a44 <MX_GPIO_Init+0x2e0>)
 80008d2:	f001 fa75 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2105      	movs	r1, #5
 80008da:	485b      	ldr	r0, [pc, #364]	; (8000a48 <MX_GPIO_Init+0x2e4>)
 80008dc:	f001 fa70 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2180      	movs	r1, #128	; 0x80
 80008e4:	4859      	ldr	r0, [pc, #356]	; (8000a4c <MX_GPIO_Init+0x2e8>)
 80008e6:	f001 fa6b 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2108      	movs	r1, #8
 80008ee:	4858      	ldr	r0, [pc, #352]	; (8000a50 <MX_GPIO_Init+0x2ec>)
 80008f0:	f001 fa66 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 80008f4:	2330      	movs	r3, #48	; 0x30
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000904:	2306      	movs	r3, #6
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800090c:	4619      	mov	r1, r3
 800090e:	484a      	ldr	r0, [pc, #296]	; (8000a38 <MX_GPIO_Init+0x2d4>)
 8000910:	f001 f8aa 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8000914:	230c      	movs	r3, #12
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000928:	4619      	mov	r1, r3
 800092a:	4843      	ldr	r0, [pc, #268]	; (8000a38 <MX_GPIO_Init+0x2d4>)
 800092c:	f001 f89c 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8000930:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000942:	2308      	movs	r3, #8
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800094a:	4619      	mov	r1, r3
 800094c:	483d      	ldr	r0, [pc, #244]	; (8000a44 <MX_GPIO_Init+0x2e0>)
 800094e:	f001 f88b 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000952:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000958:	2312      	movs	r3, #18
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800095c:	2301      	movs	r3, #1
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000964:	2304      	movs	r3, #4
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096c:	4619      	mov	r1, r3
 800096e:	4836      	ldr	r0, [pc, #216]	; (8000a48 <MX_GPIO_Init+0x2e4>)
 8000970:	f001 f87a 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8000974:	2308      	movs	r3, #8
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000984:	2306      	movs	r3, #6
 8000986:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098c:	4619      	mov	r1, r3
 800098e:	482e      	ldr	r0, [pc, #184]	; (8000a48 <MX_GPIO_Init+0x2e4>)
 8000990:	f001 f86a 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8000994:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |uSD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009a6:	230c      	movs	r3, #12
 80009a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ae:	4619      	mov	r1, r3
 80009b0:	4828      	ldr	r0, [pc, #160]	; (8000a54 <MX_GPIO_Init+0x2f0>)
 80009b2:	f001 f859 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c8:	4619      	mov	r1, r3
 80009ca:	481f      	ldr	r0, [pc, #124]	; (8000a48 <MX_GPIO_Init+0x2e4>)
 80009cc:	f001 f84c 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_DATA_Pin;
 80009d0:	2340      	movs	r3, #64	; 0x40
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80009e0:	2306      	movs	r3, #6
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e8:	4619      	mov	r1, r3
 80009ea:	4814      	ldr	r0, [pc, #80]	; (8000a3c <MX_GPIO_Init+0x2d8>)
 80009ec:	f001 f83c 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 80009f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a02:	230a      	movs	r3, #10
 8000a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4810      	ldr	r0, [pc, #64]	; (8000a50 <MX_GPIO_Init+0x2ec>)
 8000a0e:	f001 f82b 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000a12:	2330      	movs	r3, #48	; 0x30
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a16:	2311      	movs	r3, #17
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a26:	4619      	mov	r1, r3
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_GPIO_Init+0x2d8>)
 8000a2a:	f001 f81d 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a32:	e011      	b.n	8000a58 <MX_GPIO_Init+0x2f4>
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40022800 	.word	0x40022800
 8000a44:	40021800 	.word	0x40021800
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40021c00 	.word	0x40021c00
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020800 	.word	0x40020800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a58:	2311      	movs	r3, #17
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4863      	ldr	r0, [pc, #396]	; (8000bf8 <MX_GPIO_Init+0x494>)
 8000a6c:	f000 fffc 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8000a70:	2304      	movs	r3, #4
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a80:	230c      	movs	r3, #12
 8000a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a88:	4619      	mov	r1, r3
 8000a8a:	485c      	ldr	r0, [pc, #368]	; (8000bfc <MX_GPIO_Init+0x498>)
 8000a8c:	f000 ffec 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8000a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4856      	ldr	r0, [pc, #344]	; (8000c00 <MX_GPIO_Init+0x49c>)
 8000aa6:	f000 ffdf 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000aaa:	2330      	movs	r3, #48	; 0x30
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aae:	2312      	movs	r3, #18
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000aba:	2304      	movs	r3, #4
 8000abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	484f      	ldr	r0, [pc, #316]	; (8000c04 <MX_GPIO_Init+0x4a0>)
 8000ac6:	f000 ffcf 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000ada:	2306      	movs	r3, #6
 8000adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4848      	ldr	r0, [pc, #288]	; (8000c08 <MX_GPIO_Init+0x4a4>)
 8000ae6:	f000 ffbf 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000aea:	2340      	movs	r3, #64	; 0x40
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000aee:	2311      	movs	r3, #17
 8000af0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afe:	4619      	mov	r1, r3
 8000b00:	4841      	ldr	r0, [pc, #260]	; (8000c08 <MX_GPIO_Init+0x4a4>)
 8000b02:	f000 ffb1 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8000b06:	2305      	movs	r3, #5
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	483b      	ldr	r0, [pc, #236]	; (8000c0c <MX_GPIO_Init+0x4a8>)
 8000b1e:	f000 ffa3 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8000b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b34:	2302      	movs	r3, #2
 8000b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	482f      	ldr	r0, [pc, #188]	; (8000bfc <MX_GPIO_Init+0x498>)
 8000b40:	f000 ff92 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b44:	2304      	movs	r3, #4
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b54:	4619      	mov	r1, r3
 8000b56:	482c      	ldr	r0, [pc, #176]	; (8000c08 <MX_GPIO_Init+0x4a4>)
 8000b58:	f000 ff86 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000b5c:	2320      	movs	r3, #32
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4827      	ldr	r0, [pc, #156]	; (8000c10 <MX_GPIO_Init+0x4ac>)
 8000b72:	f000 ff79 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481d      	ldr	r0, [pc, #116]	; (8000c04 <MX_GPIO_Init+0x4a0>)
 8000b8e:	f000 ff6b 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000b92:	2304      	movs	r3, #4
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000ba2:	230d      	movs	r3, #13
 8000ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000baa:	4619      	mov	r1, r3
 8000bac:	4818      	ldr	r0, [pc, #96]	; (8000c10 <MX_GPIO_Init+0x4ac>)
 8000bae:	f000 ff5b 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480f      	ldr	r0, [pc, #60]	; (8000c0c <MX_GPIO_Init+0x4a8>)
 8000bd0:	f000 ff4a 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be8:	4619      	mov	r1, r3
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_GPIO_Init+0x49c>)
 8000bec:	f000 ff3c 	bl	8001a68 <HAL_GPIO_Init>

}
 8000bf0:	bf00      	nop
 8000bf2:	3740      	adds	r7, #64	; 0x40
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40022800 	.word	0x40022800
 8000bfc:	40020c00 	.word	0x40020c00
 8000c00:	40020000 	.word	0x40020000
 8000c04:	40021c00 	.word	0x40021c00
 8000c08:	40021800 	.word	0x40021800
 8000c0c:	40020400 	.word	0x40020400
 8000c10:	40022400 	.word	0x40022400

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c18:	f000 fc04 	bl	8001424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1c:	f000 f80c 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c20:	f7ff fda0 	bl	8000764 <MX_GPIO_Init>
  MX_CRC_Init();
 8000c24:	f7ff fc68 	bl	80004f8 <MX_CRC_Init>
  MX_FMC_Init();
 8000c28:	f7ff fc9c 	bl	8000564 <MX_FMC_Init>
 // MX_QUADSPI_Init();
 BSP_SDRAM_Init();
 8000c2c:	f000 f88e 	bl	8000d4c <BSP_SDRAM_Init>
  MX_TIM1_Init();
 8000c30:	f000 fb5c 	bl	80012ec <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <main+0x20>
	...

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b094      	sub	sp, #80	; 0x50
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	2234      	movs	r2, #52	; 0x34
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fc36 	bl	80034b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <SystemClock_Config+0xdc>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a2b      	ldr	r2, [pc, #172]	; (8000d14 <SystemClock_Config+0xdc>)
 8000c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <SystemClock_Config+0xdc>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <SystemClock_Config+0xe0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a25      	ldr	r2, [pc, #148]	; (8000d18 <SystemClock_Config+0xe0>)
 8000c82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <SystemClock_Config+0xe0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c94:	2301      	movs	r3, #1
 8000c96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000cac:	23b4      	movs	r3, #180	; 0xb4
 8000cae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000cb4:	2306      	movs	r3, #6
 8000cb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000cb8:	2306      	movs	r3, #6
 8000cba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 fb25 	bl	8002310 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ccc:	f000 f838 	bl	8000d40 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cd0:	f001 f890 	bl	8001df4 <HAL_PWREx_EnableOverDrive>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cda:	f000 f831 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	230f      	movs	r3, #15
 8000ce0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	2105      	movs	r1, #5
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 f8c9 	bl	8001e94 <HAL_RCC_ClockConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000d08:	f000 f81a 	bl	8000d40 <Error_Handler>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	3750      	adds	r7, #80	; 0x50
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40007000 	.word	0x40007000

08000d1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d101      	bne.n	8000d32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d2e:	f000 fb9b 	bl	8001468 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40001000 	.word	0x40001000

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>
	...

08000d4c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000d50:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <BSP_SDRAM_Init+0xac>)
 8000d52:	4a2a      	ldr	r2, [pc, #168]	; (8000dfc <BSP_SDRAM_Init+0xb0>)
 8000d54:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 8000d56:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <BSP_SDRAM_Init+0xb4>)
 8000d58:	2202      	movs	r2, #2
 8000d5a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8000d5c:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <BSP_SDRAM_Init+0xb4>)
 8000d5e:	2207      	movs	r2, #7
 8000d60:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8000d62:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <BSP_SDRAM_Init+0xb4>)
 8000d64:	2204      	movs	r2, #4
 8000d66:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8000d68:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <BSP_SDRAM_Init+0xb4>)
 8000d6a:	2207      	movs	r2, #7
 8000d6c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8000d6e:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <BSP_SDRAM_Init+0xb4>)
 8000d70:	2202      	movs	r2, #2
 8000d72:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <BSP_SDRAM_Init+0xb4>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <BSP_SDRAM_Init+0xb4>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <BSP_SDRAM_Init+0xac>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <BSP_SDRAM_Init+0xac>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <BSP_SDRAM_Init+0xac>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <BSP_SDRAM_Init+0xac>)
 8000d94:	2220      	movs	r2, #32
 8000d96:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <BSP_SDRAM_Init+0xac>)
 8000d9a:	2240      	movs	r2, #64	; 0x40
 8000d9c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <BSP_SDRAM_Init+0xac>)
 8000da0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000da4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <BSP_SDRAM_Init+0xac>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <BSP_SDRAM_Init+0xac>)
 8000dae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000db2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8000db4:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <BSP_SDRAM_Init+0xac>)
 8000db6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dba:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <BSP_SDRAM_Init+0xac>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <BSP_SDRAM_Init+0xac>)
 8000dc6:	f000 f87f 	bl	8000ec8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8000dca:	490d      	ldr	r1, [pc, #52]	; (8000e00 <BSP_SDRAM_Init+0xb4>)
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <BSP_SDRAM_Init+0xac>)
 8000dce:	f001 fd23 	bl	8002818 <HAL_SDRAM_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <BSP_SDRAM_Init+0xb8>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
 8000dde:	e002      	b.n	8000de6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <BSP_SDRAM_Init+0xb8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8000de6:	f240 5069 	movw	r0, #1385	; 0x569
 8000dea:	f000 f80d 	bl	8000e08 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <BSP_SDRAM_Init+0xb8>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000006c 	.word	0x2000006c
 8000dfc:	a0000140 	.word	0xa0000140
 8000e00:	200000a0 	.word	0x200000a0
 8000e04:	20000000 	.word	0x20000000

08000e08 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000e14:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e1c:	2210      	movs	r2, #16
 8000e1e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e30:	4923      	ldr	r1, [pc, #140]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e32:	4824      	ldr	r0, [pc, #144]	; (8000ec4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000e34:	f001 fd24 	bl	8002880 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f000 fb35 	bl	80014a8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e46:	2210      	movs	r2, #16
 8000e48:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e5a:	4919      	ldr	r1, [pc, #100]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e5c:	4819      	ldr	r0, [pc, #100]	; (8000ec4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000e5e:	f001 fd0f 	bl	8002880 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e64:	2203      	movs	r2, #3
 8000e66:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e70:	2208      	movs	r2, #8
 8000e72:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e7e:	4910      	ldr	r1, [pc, #64]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e80:	4810      	ldr	r0, [pc, #64]	; (8000ec4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000e82:	f001 fcfd 	bl	8002880 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000e86:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000e8a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e8e:	2204      	movs	r2, #4
 8000e90:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e94:	2210      	movs	r2, #16
 8000e96:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000ea2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea8:	4905      	ldr	r1, [pc, #20]	; (8000ec0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000eac:	f001 fce8 	bl	8002880 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000eb4:	f001 fd19 	bl	80028ea <HAL_SDRAM_ProgramRefreshRate>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200000bc 	.word	0x200000bc
 8000ec4:	2000006c 	.word	0x2000006c

08000ec8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b090      	sub	sp, #64	; 0x40
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 8104 	beq.w	80010e2 <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ede:	4b83      	ldr	r3, [pc, #524]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee2:	4a82      	ldr	r2, [pc, #520]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6393      	str	r3, [r2, #56]	; 0x38
 8000eea:	4b80      	ldr	r3, [pc, #512]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8000efa:	4b7c      	ldr	r3, [pc, #496]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a7b      	ldr	r2, [pc, #492]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b79      	ldr	r3, [pc, #484]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
 8000f16:	4b75      	ldr	r3, [pc, #468]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a74      	ldr	r2, [pc, #464]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b72      	ldr	r3, [pc, #456]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	623b      	str	r3, [r7, #32]
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	4b6e      	ldr	r3, [pc, #440]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a6d      	ldr	r2, [pc, #436]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f38:	f043 0308 	orr.w	r3, r3, #8
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b6b      	ldr	r3, [pc, #428]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0308 	and.w	r3, r3, #8
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
 8000f4e:	4b67      	ldr	r3, [pc, #412]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a66      	ldr	r2, [pc, #408]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b64      	ldr	r3, [pc, #400]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	4b60      	ldr	r3, [pc, #384]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a5f      	ldr	r2, [pc, #380]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f70:	f043 0320 	orr.w	r3, r3, #32
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0320 	and.w	r3, r3, #32
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b59      	ldr	r3, [pc, #356]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a58      	ldr	r2, [pc, #352]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b56      	ldr	r3, [pc, #344]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b52      	ldr	r3, [pc, #328]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a51      	ldr	r2, [pc, #324]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b4f      	ldr	r3, [pc, #316]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b4b      	ldr	r3, [pc, #300]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a4a      	ldr	r2, [pc, #296]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b48      	ldr	r3, [pc, #288]	; (80010ec <BSP_SDRAM_MspInit+0x224>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000fe2:	230c      	movs	r3, #12
 8000fe4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8000fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fee:	4619      	mov	r1, r3
 8000ff0:	483f      	ldr	r0, [pc, #252]	; (80010f0 <BSP_SDRAM_MspInit+0x228>)
 8000ff2:	f000 fd39 	bl	8001a68 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000ff6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001000:	4619      	mov	r1, r3
 8001002:	483c      	ldr	r0, [pc, #240]	; (80010f4 <BSP_SDRAM_MspInit+0x22c>)
 8001004:	f000 fd30 	bl	8001a68 <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001008:	f64f 7383 	movw	r3, #65411	; 0xff83
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800100e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001012:	4619      	mov	r1, r3
 8001014:	4838      	ldr	r0, [pc, #224]	; (80010f8 <BSP_SDRAM_MspInit+0x230>)
 8001016:	f000 fd27 	bl	8001a68 <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800101a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001020:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001024:	4619      	mov	r1, r3
 8001026:	4835      	ldr	r0, [pc, #212]	; (80010fc <BSP_SDRAM_MspInit+0x234>)
 8001028:	f000 fd1e 	bl	8001a68 <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800102c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001036:	4619      	mov	r1, r3
 8001038:	4831      	ldr	r0, [pc, #196]	; (8001100 <BSP_SDRAM_MspInit+0x238>)
 800103a:	f000 fd15 	bl	8001a68 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800103e:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8001044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001048:	4619      	mov	r1, r3
 800104a:	482e      	ldr	r0, [pc, #184]	; (8001104 <BSP_SDRAM_MspInit+0x23c>)
 800104c:	f000 fd0c 	bl	8001a68 <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001050:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001056:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105a:	4619      	mov	r1, r3
 800105c:	482a      	ldr	r0, [pc, #168]	; (8001108 <BSP_SDRAM_MspInit+0x240>)
 800105e:	f000 fd03 	bl	8001a68 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 8001070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001074:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 8001078:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800107c:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 8001080:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001084:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 8001088:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800108c:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 8001096:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800109a:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 80010a4:	2203      	movs	r2, #3
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	; 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 80010b6:	4a16      	ldr	r2, [pc, #88]	; (8001110 <BSP_SDRAM_MspInit+0x248>)
 80010b8:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a13      	ldr	r2, [pc, #76]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 80010be:	631a      	str	r2, [r3, #48]	; 0x30
 80010c0:	4a12      	ldr	r2, [pc, #72]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 80010c6:	4811      	ldr	r0, [pc, #68]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 80010c8:	f000 fbbe 	bl	8001848 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 80010cc:	480f      	ldr	r0, [pc, #60]	; (800110c <BSP_SDRAM_MspInit+0x244>)
 80010ce:	f000 fb0d 	bl	80016ec <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2105      	movs	r1, #5
 80010d6:	2038      	movs	r0, #56	; 0x38
 80010d8:	f000 fac2 	bl	8001660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80010dc:	2038      	movs	r0, #56	; 0x38
 80010de:	f000 fadb 	bl	8001698 <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80010e2:	bf00      	nop
 80010e4:	3740      	adds	r7, #64	; 0x40
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020c00 	.word	0x40020c00
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40021400 	.word	0x40021400
 8001100:	40021800 	.word	0x40021800
 8001104:	40021c00 	.word	0x40021c00
 8001108:	40022000 	.word	0x40022000
 800110c:	200000cc 	.word	0x200000cc
 8001110:	40026410 	.word	0x40026410

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <HAL_MspInit+0x4c>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_MspInit+0x4c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_MspInit+0x4c>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_MspInit+0x4c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	; 0x38
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	4b33      	ldr	r3, [pc, #204]	; (8001248 <HAL_InitTick+0xe4>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	4a32      	ldr	r2, [pc, #200]	; (8001248 <HAL_InitTick+0xe4>)
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	6413      	str	r3, [r2, #64]	; 0x40
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <HAL_InitTick+0xe4>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f003 0310 	and.w	r3, r3, #16
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001190:	f107 0210 	add.w	r2, r7, #16
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f001 f886 	bl	80022ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d103      	bne.n	80011b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011aa:	f001 f86b 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 80011ae:	6378      	str	r0, [r7, #52]	; 0x34
 80011b0:	e004      	b.n	80011bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011b2:	f001 f867 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 80011b6:	4603      	mov	r3, r0
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011be:	4a23      	ldr	r2, [pc, #140]	; (800124c <HAL_InitTick+0xe8>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	0c9b      	lsrs	r3, r3, #18
 80011c6:	3b01      	subs	r3, #1
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <HAL_InitTick+0xec>)
 80011cc:	4a21      	ldr	r2, [pc, #132]	; (8001254 <HAL_InitTick+0xf0>)
 80011ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <HAL_InitTick+0xec>)
 80011d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011d8:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_InitTick+0xec>)
 80011da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <HAL_InitTick+0xec>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <HAL_InitTick+0xec>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_InitTick+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80011f0:	4817      	ldr	r0, [pc, #92]	; (8001250 <HAL_InitTick+0xec>)
 80011f2:	f001 fba2 	bl	800293a <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80011fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001200:	2b00      	cmp	r3, #0
 8001202:	d11b      	bne.n	800123c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001204:	4812      	ldr	r0, [pc, #72]	; (8001250 <HAL_InitTick+0xec>)
 8001206:	f001 fbe7 	bl	80029d8 <HAL_TIM_Base_Start_IT>
 800120a:	4603      	mov	r3, r0
 800120c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001210:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001214:	2b00      	cmp	r3, #0
 8001216:	d111      	bne.n	800123c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001218:	2036      	movs	r0, #54	; 0x36
 800121a:	f000 fa3d 	bl	8001698 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d808      	bhi.n	8001236 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	2036      	movs	r0, #54	; 0x36
 800122a:	f000 fa19 	bl	8001660 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_InitTick+0xf4>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	e002      	b.n	800123c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800123c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001240:	4618      	mov	r0, r3
 8001242:	3738      	adds	r7, #56	; 0x38
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	431bde83 	.word	0x431bde83
 8001250:	2000012c 	.word	0x2000012c
 8001254:	40001000 	.word	0x40001000
 8001258:	20000008 	.word	0x20000008

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <TIM6_DAC_IRQHandler+0x10>)
 80012ba:	f001 fbfd 	bl	8002ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000012c 	.word	0x2000012c

080012c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <SystemInit+0x20>)
 80012ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <SystemInit+0x20>)
 80012d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001308:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MX_TIM1_Init+0x98>)
 800130a:	4a1f      	ldr	r2, [pc, #124]	; (8001388 <MX_TIM1_Init+0x9c>)
 800130c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_TIM1_Init+0x98>)
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_TIM1_Init+0x98>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_TIM1_Init+0x98>)
 800131c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001320:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <MX_TIM1_Init+0x98>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_TIM1_Init+0x98>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_TIM1_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001334:	4813      	ldr	r0, [pc, #76]	; (8001384 <MX_TIM1_Init+0x98>)
 8001336:	f001 fb00 	bl	800293a <HAL_TIM_Base_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001340:	f7ff fcfe 	bl	8000d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001348:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4619      	mov	r1, r3
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <MX_TIM1_Init+0x98>)
 8001352:	f001 fcb9 	bl	8002cc8 <HAL_TIM_ConfigClockSource>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800135c:	f7ff fcf0 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_TIM1_Init+0x98>)
 800136e:	f001 fed5 	bl	800311c <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001378:	f7ff fce2 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000174 	.word	0x20000174
 8001388:	40010000 	.word	0x40010000

0800138c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <HAL_TIM_Base_MspInit+0x3c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d10d      	bne.n	80013ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_TIM_Base_MspInit+0x40>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <HAL_TIM_Base_MspInit+0x40>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <HAL_TIM_Base_MspInit+0x40>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40010000 	.word	0x40010000
 80013cc:	40023800 	.word	0x40023800

080013d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001408 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013d6:	490e      	ldr	r1, [pc, #56]	; (8001410 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013d8:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013ec:	4c0b      	ldr	r4, [pc, #44]	; (800141c <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013fa:	f7ff ff65 	bl	80012c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fe:	f002 f837 	bl	8003470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001402:	f7ff fc07 	bl	8000c14 <main>
  bx  lr    
 8001406:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001408:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800140c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001410:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001414:	08003510 	.word	0x08003510
  ldr r2, =_sbss
 8001418:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800141c:	200001c0 	.word	0x200001c0

08001420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC_IRQHandler>
	...

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <HAL_Init+0x40>)
 800142e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001432:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_Init+0x40>)
 800143a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a07      	ldr	r2, [pc, #28]	; (8001464 <HAL_Init+0x40>)
 8001446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144c:	2003      	movs	r0, #3
 800144e:	f000 f8fc 	bl	800164a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001452:	200f      	movs	r0, #15
 8001454:	f7ff fe86 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001458:	f7ff fe5c 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023c00 	.word	0x40023c00

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	2000000c 	.word	0x2000000c
 800148c:	200001bc 	.word	0x200001bc

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	200001bc 	.word	0x200001bc

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffde 	bl	8001490 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000000c 	.word	0x2000000c

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4907      	ldr	r1, [pc, #28]	; (800158c <__NVIC_EnableIRQ+0x38>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ff4c 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001672:	f7ff ff61 	bl	8001538 <__NVIC_GetPriorityGrouping>
 8001676:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	6978      	ldr	r0, [r7, #20]
 800167e:	f7ff ffb1 	bl	80015e4 <NVIC_EncodePriority>
 8001682:	4602      	mov	r2, r0
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff80 	bl	8001590 <__NVIC_SetPriority>
}
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff54 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00e      	b.n	80016e4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	795b      	ldrb	r3, [r3, #5]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d105      	bne.n	80016dc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7fe ff22 	bl	8000520 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff feca 	bl	8001490 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e099      	b.n	800183c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2202      	movs	r2, #2
 800170c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001728:	e00f      	b.n	800174a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800172a:	f7ff feb1 	bl	8001490 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b05      	cmp	r3, #5
 8001736:	d908      	bls.n	800174a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2220      	movs	r2, #32
 800173c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2203      	movs	r2, #3
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e078      	b.n	800183c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1e8      	bne.n	800172a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	4b38      	ldr	r3, [pc, #224]	; (8001844 <HAL_DMA_Init+0x158>)
 8001764:	4013      	ands	r3, r2
 8001766:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001776:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4313      	orrs	r3, r2
 800179a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d107      	bne.n	80017b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	4313      	orrs	r3, r2
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f023 0307 	bic.w	r3, r3, #7
 80017ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d117      	bne.n	800180e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00e      	beq.n	800180e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f8bd 	bl	8001970 <DMA_CheckFifoParam>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2240      	movs	r2, #64	; 0x40
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800180a:	2301      	movs	r3, #1
 800180c:	e016      	b.n	800183c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f874 	bl	8001904 <DMA_CalcBaseAndBitshift>
 800181c:	4603      	mov	r3, r0
 800181e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001824:	223f      	movs	r2, #63	; 0x3f
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	f010803f 	.word	0xf010803f

08001848 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e050      	b.n	80018fc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d101      	bne.n	800186a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001866:	2302      	movs	r3, #2
 8001868:	e048      	b.n	80018fc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0201 	bic.w	r2, r2, #1
 8001878:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2200      	movs	r2, #0
 8001888:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2221      	movs	r2, #33	; 0x21
 80018a8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f82a 	bl	8001904 <DMA_CalcBaseAndBitshift>
 80018b0:	4603      	mov	r3, r0
 80018b2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018dc:	223f      	movs	r2, #63	; 0x3f
 80018de:	409a      	lsls	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	3b10      	subs	r3, #16
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <DMA_CalcBaseAndBitshift+0x64>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800191e:	4a13      	ldr	r2, [pc, #76]	; (800196c <DMA_CalcBaseAndBitshift+0x68>)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d909      	bls.n	8001946 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800193a:	f023 0303 	bic.w	r3, r3, #3
 800193e:	1d1a      	adds	r2, r3, #4
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	659a      	str	r2, [r3, #88]	; 0x58
 8001944:	e007      	b.n	8001956 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	aaaaaaab 	.word	0xaaaaaaab
 800196c:	080034f8 	.word	0x080034f8

08001970 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d11f      	bne.n	80019ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b03      	cmp	r3, #3
 800198e:	d856      	bhi.n	8001a3e <DMA_CheckFifoParam+0xce>
 8001990:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <DMA_CheckFifoParam+0x28>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	080019a9 	.word	0x080019a9
 800199c:	080019bb 	.word	0x080019bb
 80019a0:	080019a9 	.word	0x080019a9
 80019a4:	08001a3f 	.word	0x08001a3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d046      	beq.n	8001a42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b8:	e043      	b.n	8001a42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019c2:	d140      	bne.n	8001a46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c8:	e03d      	b.n	8001a46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019d2:	d121      	bne.n	8001a18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d837      	bhi.n	8001a4a <DMA_CheckFifoParam+0xda>
 80019da:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <DMA_CheckFifoParam+0x70>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	080019f1 	.word	0x080019f1
 80019e4:	080019f7 	.word	0x080019f7
 80019e8:	080019f1 	.word	0x080019f1
 80019ec:	08001a09 	.word	0x08001a09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
      break;
 80019f4:	e030      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d025      	beq.n	8001a4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a06:	e022      	b.n	8001a4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a10:	d11f      	bne.n	8001a52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a16:	e01c      	b.n	8001a52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d903      	bls.n	8001a26 <DMA_CheckFifoParam+0xb6>
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d003      	beq.n	8001a2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a24:	e018      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
      break;
 8001a2a:	e015      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00e      	beq.n	8001a56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a3c:	e00b      	b.n	8001a56 <DMA_CheckFifoParam+0xe6>
      break;
 8001a3e:	bf00      	nop
 8001a40:	e00a      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a42:	bf00      	nop
 8001a44:	e008      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a46:	bf00      	nop
 8001a48:	e006      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4a:	bf00      	nop
 8001a4c:	e004      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4e:	bf00      	nop
 8001a50:	e002      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a52:	bf00      	nop
 8001a54:	e000      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a56:	bf00      	nop
    }
  } 
  
  return status; 
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop

08001a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	e177      	b.n	8001d74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a84:	2201      	movs	r2, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	f040 8166 	bne.w	8001d6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d005      	beq.n	8001aba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d130      	bne.n	8001b1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 0201 	and.w	r2, r3, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d017      	beq.n	8001b58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d123      	bne.n	8001bac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	08da      	lsrs	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3208      	adds	r2, #8
 8001b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0203 	and.w	r2, r3, #3
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80c0 	beq.w	8001d6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b66      	ldr	r3, [pc, #408]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a65      	ldr	r2, [pc, #404]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b63      	ldr	r3, [pc, #396]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c0a:	4a61      	ldr	r2, [pc, #388]	; (8001d90 <HAL_GPIO_Init+0x328>)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	3302      	adds	r3, #2
 8001c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a58      	ldr	r2, [pc, #352]	; (8001d94 <HAL_GPIO_Init+0x32c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d037      	beq.n	8001ca6 <HAL_GPIO_Init+0x23e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a57      	ldr	r2, [pc, #348]	; (8001d98 <HAL_GPIO_Init+0x330>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d031      	beq.n	8001ca2 <HAL_GPIO_Init+0x23a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a56      	ldr	r2, [pc, #344]	; (8001d9c <HAL_GPIO_Init+0x334>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02b      	beq.n	8001c9e <HAL_GPIO_Init+0x236>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a55      	ldr	r2, [pc, #340]	; (8001da0 <HAL_GPIO_Init+0x338>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d025      	beq.n	8001c9a <HAL_GPIO_Init+0x232>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a54      	ldr	r2, [pc, #336]	; (8001da4 <HAL_GPIO_Init+0x33c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01f      	beq.n	8001c96 <HAL_GPIO_Init+0x22e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a53      	ldr	r2, [pc, #332]	; (8001da8 <HAL_GPIO_Init+0x340>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d019      	beq.n	8001c92 <HAL_GPIO_Init+0x22a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a52      	ldr	r2, [pc, #328]	; (8001dac <HAL_GPIO_Init+0x344>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0x226>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a51      	ldr	r2, [pc, #324]	; (8001db0 <HAL_GPIO_Init+0x348>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00d      	beq.n	8001c8a <HAL_GPIO_Init+0x222>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a50      	ldr	r2, [pc, #320]	; (8001db4 <HAL_GPIO_Init+0x34c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d007      	beq.n	8001c86 <HAL_GPIO_Init+0x21e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4f      	ldr	r2, [pc, #316]	; (8001db8 <HAL_GPIO_Init+0x350>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_GPIO_Init+0x21a>
 8001c7e:	2309      	movs	r3, #9
 8001c80:	e012      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c82:	230a      	movs	r3, #10
 8001c84:	e010      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c86:	2308      	movs	r3, #8
 8001c88:	e00e      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	e00c      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c8e:	2306      	movs	r3, #6
 8001c90:	e00a      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c92:	2305      	movs	r3, #5
 8001c94:	e008      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c96:	2304      	movs	r3, #4
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e004      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f002 0203 	and.w	r2, r2, #3
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb8:	4935      	ldr	r1, [pc, #212]	; (8001d90 <HAL_GPIO_Init+0x328>)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cea:	4a34      	ldr	r2, [pc, #208]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf0:	4b32      	ldr	r3, [pc, #200]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d14:	4a29      	ldr	r2, [pc, #164]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d1a:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3e:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3301      	adds	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	f67f ae84 	bls.w	8001a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40013800 	.word	0x40013800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020c00 	.word	0x40020c00
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40021400 	.word	0x40021400
 8001dac:	40021800 	.word	0x40021800
 8001db0:	40021c00 	.word	0x40021c00
 8001db4:	40022000 	.word	0x40022000
 8001db8:	40022400 	.word	0x40022400
 8001dbc:	40013c00 	.word	0x40013c00

08001dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd0:	787b      	ldrb	r3, [r7, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ddc:	e003      	b.n	8001de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dde:	887b      	ldrh	r3, [r7, #2]
 8001de0:	041a      	lsls	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	619a      	str	r2, [r3, #24]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a1f      	ldr	r2, [pc, #124]	; (8001e84 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_PWREx_EnableOverDrive+0x94>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e20:	f7ff fb36 	bl	8001490 <HAL_GetTick>
 8001e24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e26:	e009      	b.n	8001e3c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e28:	f7ff fb32 	bl	8001490 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e36:	d901      	bls.n	8001e3c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e01f      	b.n	8001e7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_PWREx_EnableOverDrive+0x98>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e48:	d1ee      	bne.n	8001e28 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e50:	f7ff fb1e 	bl	8001490 <HAL_GetTick>
 8001e54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e56:	e009      	b.n	8001e6c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e58:	f7ff fb1a 	bl	8001490 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e66:	d901      	bls.n	8001e6c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e007      	b.n	8001e7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <HAL_PWREx_EnableOverDrive+0x98>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e78:	d1ee      	bne.n	8001e58 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	420e0040 	.word	0x420e0040
 8001e8c:	40007000 	.word	0x40007000
 8001e90:	420e0044 	.word	0x420e0044

08001e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0cc      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b68      	ldr	r3, [pc, #416]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d90c      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b65      	ldr	r3, [pc, #404]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b63      	ldr	r3, [pc, #396]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0b8      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee8:	4b59      	ldr	r3, [pc, #356]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a58      	ldr	r2, [pc, #352]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ef2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f00:	4b53      	ldr	r3, [pc, #332]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0c:	4b50      	ldr	r3, [pc, #320]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	494d      	ldr	r1, [pc, #308]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d044      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d119      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e07f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d003      	beq.n	8001f52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f52:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d109      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e067      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f72:	4b37      	ldr	r3, [pc, #220]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f023 0203 	bic.w	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4934      	ldr	r1, [pc, #208]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f84:	f7ff fa84 	bl	8001490 <HAL_GetTick>
 8001f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8c:	f7ff fa80 	bl	8001490 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e04f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 020c 	and.w	r2, r3, #12
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d1eb      	bne.n	8001f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b25      	ldr	r3, [pc, #148]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d20c      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e032      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4916      	ldr	r1, [pc, #88]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	490e      	ldr	r1, [pc, #56]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800201a:	f000 f821 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 800201e:	4602      	mov	r2, r0
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	490a      	ldr	r1, [pc, #40]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	5ccb      	ldrb	r3, [r1, r3]
 800202e:	fa22 f303 	lsr.w	r3, r2, r3
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_RCC_ClockConfig+0x1c8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f892 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023c00 	.word	0x40023c00
 8002050:	40023800 	.word	0x40023800
 8002054:	080034e0 	.word	0x080034e0
 8002058:	20000004 	.word	0x20000004
 800205c:	20000008 	.word	0x20000008

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002064:	b094      	sub	sp, #80	; 0x50
 8002066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	647b      	str	r3, [r7, #68]	; 0x44
 800206c:	2300      	movs	r3, #0
 800206e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002070:	2300      	movs	r3, #0
 8002072:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002078:	4b79      	ldr	r3, [pc, #484]	; (8002260 <HAL_RCC_GetSysClockFreq+0x200>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d00d      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002084:	2b08      	cmp	r3, #8
 8002086:	f200 80e1 	bhi.w	800224c <HAL_RCC_GetSysClockFreq+0x1ec>
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x34>
 800208e:	2b04      	cmp	r3, #4
 8002090:	d003      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0x3a>
 8002092:	e0db      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002094:	4b73      	ldr	r3, [pc, #460]	; (8002264 <HAL_RCC_GetSysClockFreq+0x204>)
 8002096:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002098:	e0db      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800209a:	4b73      	ldr	r3, [pc, #460]	; (8002268 <HAL_RCC_GetSysClockFreq+0x208>)
 800209c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800209e:	e0d8      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020a0:	4b6f      	ldr	r3, [pc, #444]	; (8002260 <HAL_RCC_GetSysClockFreq+0x200>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020aa:	4b6d      	ldr	r3, [pc, #436]	; (8002260 <HAL_RCC_GetSysClockFreq+0x200>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d063      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b6:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <HAL_RCC_GetSysClockFreq+0x200>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	099b      	lsrs	r3, r3, #6
 80020bc:	2200      	movs	r2, #0
 80020be:	63bb      	str	r3, [r7, #56]	; 0x38
 80020c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020c8:	633b      	str	r3, [r7, #48]	; 0x30
 80020ca:	2300      	movs	r3, #0
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
 80020ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020d2:	4622      	mov	r2, r4
 80020d4:	462b      	mov	r3, r5
 80020d6:	f04f 0000 	mov.w	r0, #0
 80020da:	f04f 0100 	mov.w	r1, #0
 80020de:	0159      	lsls	r1, r3, #5
 80020e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020e4:	0150      	lsls	r0, r2, #5
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4621      	mov	r1, r4
 80020ec:	1a51      	subs	r1, r2, r1
 80020ee:	6139      	str	r1, [r7, #16]
 80020f0:	4629      	mov	r1, r5
 80020f2:	eb63 0301 	sbc.w	r3, r3, r1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002104:	4659      	mov	r1, fp
 8002106:	018b      	lsls	r3, r1, #6
 8002108:	4651      	mov	r1, sl
 800210a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800210e:	4651      	mov	r1, sl
 8002110:	018a      	lsls	r2, r1, #6
 8002112:	4651      	mov	r1, sl
 8002114:	ebb2 0801 	subs.w	r8, r2, r1
 8002118:	4659      	mov	r1, fp
 800211a:	eb63 0901 	sbc.w	r9, r3, r1
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800212a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800212e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4623      	mov	r3, r4
 8002138:	eb18 0303 	adds.w	r3, r8, r3
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	462b      	mov	r3, r5
 8002140:	eb49 0303 	adc.w	r3, r9, r3
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002152:	4629      	mov	r1, r5
 8002154:	024b      	lsls	r3, r1, #9
 8002156:	4621      	mov	r1, r4
 8002158:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800215c:	4621      	mov	r1, r4
 800215e:	024a      	lsls	r2, r1, #9
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002166:	2200      	movs	r2, #0
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
 800216a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800216c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002170:	f7fe f840 	bl	80001f4 <__aeabi_uldivmod>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4613      	mov	r3, r2
 800217a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800217c:	e058      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800217e:	4b38      	ldr	r3, [pc, #224]	; (8002260 <HAL_RCC_GetSysClockFreq+0x200>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	099b      	lsrs	r3, r3, #6
 8002184:	2200      	movs	r2, #0
 8002186:	4618      	mov	r0, r3
 8002188:	4611      	mov	r1, r2
 800218a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800218e:	623b      	str	r3, [r7, #32]
 8002190:	2300      	movs	r3, #0
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
 8002194:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002198:	4642      	mov	r2, r8
 800219a:	464b      	mov	r3, r9
 800219c:	f04f 0000 	mov.w	r0, #0
 80021a0:	f04f 0100 	mov.w	r1, #0
 80021a4:	0159      	lsls	r1, r3, #5
 80021a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021aa:	0150      	lsls	r0, r2, #5
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4641      	mov	r1, r8
 80021b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80021b6:	4649      	mov	r1, r9
 80021b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021d0:	ebb2 040a 	subs.w	r4, r2, sl
 80021d4:	eb63 050b 	sbc.w	r5, r3, fp
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	00eb      	lsls	r3, r5, #3
 80021e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021e6:	00e2      	lsls	r2, r4, #3
 80021e8:	4614      	mov	r4, r2
 80021ea:	461d      	mov	r5, r3
 80021ec:	4643      	mov	r3, r8
 80021ee:	18e3      	adds	r3, r4, r3
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	464b      	mov	r3, r9
 80021f4:	eb45 0303 	adc.w	r3, r5, r3
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002206:	4629      	mov	r1, r5
 8002208:	028b      	lsls	r3, r1, #10
 800220a:	4621      	mov	r1, r4
 800220c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002210:	4621      	mov	r1, r4
 8002212:	028a      	lsls	r2, r1, #10
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800221a:	2200      	movs	r2, #0
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	61fa      	str	r2, [r7, #28]
 8002220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002224:	f7fd ffe6 	bl	80001f4 <__aeabi_uldivmod>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4613      	mov	r3, r2
 800222e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_GetSysClockFreq+0x200>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	3301      	adds	r3, #1
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002240:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800224a:	e002      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_RCC_GetSysClockFreq+0x204>)
 800224e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002254:	4618      	mov	r0, r3
 8002256:	3750      	adds	r7, #80	; 0x50
 8002258:	46bd      	mov	sp, r7
 800225a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800
 8002264:	00f42400 	.word	0x00f42400
 8002268:	007a1200 	.word	0x007a1200

0800226c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <HAL_RCC_GetHCLKFreq+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000004 	.word	0x20000004

08002284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002288:	f7ff fff0 	bl	800226c <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	0a9b      	lsrs	r3, r3, #10
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4903      	ldr	r1, [pc, #12]	; (80022a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	080034f0 	.word	0x080034f0

080022ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	220f      	movs	r2, #15
 80022ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_RCC_GetClockConfig+0x5c>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0203 	and.w	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <HAL_RCC_GetClockConfig+0x5c>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_RCC_GetClockConfig+0x5c>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_RCC_GetClockConfig+0x5c>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <HAL_RCC_GetClockConfig+0x60>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 020f 	and.w	r2, r3, #15
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	601a      	str	r2, [r3, #0]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
 800230c:	40023c00 	.word	0x40023c00

08002310 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e273      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d075      	beq.n	800241a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800232e:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b04      	cmp	r3, #4
 8002338:	d00c      	beq.n	8002354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233a:	4b85      	ldr	r3, [pc, #532]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002342:	2b08      	cmp	r3, #8
 8002344:	d112      	bne.n	800236c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002346:	4b82      	ldr	r3, [pc, #520]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002352:	d10b      	bne.n	800236c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	4b7e      	ldr	r3, [pc, #504]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d05b      	beq.n	8002418 <HAL_RCC_OscConfig+0x108>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d157      	bne.n	8002418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e24e      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002374:	d106      	bne.n	8002384 <HAL_RCC_OscConfig+0x74>
 8002376:	4b76      	ldr	r3, [pc, #472]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a75      	ldr	r2, [pc, #468]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e01d      	b.n	80023c0 <HAL_RCC_OscConfig+0xb0>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x98>
 800238e:	4b70      	ldr	r3, [pc, #448]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a6f      	ldr	r2, [pc, #444]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6c      	ldr	r2, [pc, #432]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80023a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e00b      	b.n	80023c0 <HAL_RCC_OscConfig+0xb0>
 80023a8:	4b69      	ldr	r3, [pc, #420]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a68      	ldr	r2, [pc, #416]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80023ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b66      	ldr	r3, [pc, #408]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a65      	ldr	r2, [pc, #404]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80023ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d013      	beq.n	80023f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7ff f862 	bl	8001490 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7ff f85e 	bl	8001490 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e213      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0xc0>
 80023ee:	e014      	b.n	800241a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7ff f84e 	bl	8001490 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7ff f84a 	bl	8001490 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1ff      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	4b51      	ldr	r3, [pc, #324]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0xe8>
 8002416:	e000      	b.n	800241a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d063      	beq.n	80024ee <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002426:	4b4a      	ldr	r3, [pc, #296]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00b      	beq.n	800244a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002432:	4b47      	ldr	r3, [pc, #284]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800243a:	2b08      	cmp	r3, #8
 800243c:	d11c      	bne.n	8002478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243e:	4b44      	ldr	r3, [pc, #272]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d116      	bne.n	8002478 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	4b41      	ldr	r3, [pc, #260]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <HAL_RCC_OscConfig+0x152>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e1d3      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4937      	ldr	r1, [pc, #220]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002476:	e03a      	b.n	80024ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d020      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002480:	4b34      	ldr	r3, [pc, #208]	; (8002554 <HAL_RCC_OscConfig+0x244>)
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7ff f803 	bl	8001490 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248e:	f7fe ffff 	bl	8001490 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e1b4      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ac:	4b28      	ldr	r3, [pc, #160]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4925      	ldr	r1, [pc, #148]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
 80024c0:	e015      	b.n	80024ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_RCC_OscConfig+0x244>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe ffe2 	bl	8001490 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d0:	f7fe ffde 	bl	8001490 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e193      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e2:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d036      	beq.n	8002568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d016      	beq.n	8002530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_RCC_OscConfig+0x248>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7fe ffc2 	bl	8001490 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002510:	f7fe ffbe 	bl	8001490 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e173      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_OscConfig+0x240>)
 8002524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x200>
 800252e:	e01b      	b.n	8002568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCC_OscConfig+0x248>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002536:	f7fe ffab 	bl	8001490 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	e00e      	b.n	800255c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253e:	f7fe ffa7 	bl	8001490 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d907      	bls.n	800255c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e15c      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
 8002550:	40023800 	.word	0x40023800
 8002554:	42470000 	.word	0x42470000
 8002558:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255c:	4b8a      	ldr	r3, [pc, #552]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 800255e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1ea      	bne.n	800253e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8097 	beq.w	80026a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257a:	4b83      	ldr	r3, [pc, #524]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	4b7f      	ldr	r3, [pc, #508]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a7e      	ldr	r2, [pc, #504]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b7c      	ldr	r3, [pc, #496]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a2:	2301      	movs	r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a6:	4b79      	ldr	r3, [pc, #484]	; (800278c <HAL_RCC_OscConfig+0x47c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d118      	bne.n	80025e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b2:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCC_OscConfig+0x47c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a75      	ldr	r2, [pc, #468]	; (800278c <HAL_RCC_OscConfig+0x47c>)
 80025b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025be:	f7fe ff67 	bl	8001490 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c6:	f7fe ff63 	bl	8001490 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e118      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	4b6c      	ldr	r3, [pc, #432]	; (800278c <HAL_RCC_OscConfig+0x47c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x2ea>
 80025ec:	4b66      	ldr	r3, [pc, #408]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a65      	ldr	r2, [pc, #404]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	e01c      	b.n	8002634 <HAL_RCC_OscConfig+0x324>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x30c>
 8002602:	4b61      	ldr	r3, [pc, #388]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a60      	ldr	r2, [pc, #384]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
 800260e:	4b5e      	ldr	r3, [pc, #376]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	4a5d      	ldr	r2, [pc, #372]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6713      	str	r3, [r2, #112]	; 0x70
 800261a:	e00b      	b.n	8002634 <HAL_RCC_OscConfig+0x324>
 800261c:	4b5a      	ldr	r3, [pc, #360]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	4a59      	ldr	r2, [pc, #356]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	6713      	str	r3, [r2, #112]	; 0x70
 8002628:	4b57      	ldr	r3, [pc, #348]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	4a56      	ldr	r2, [pc, #344]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 800262e:	f023 0304 	bic.w	r3, r3, #4
 8002632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d015      	beq.n	8002668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe ff28 	bl	8001490 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002644:	f7fe ff24 	bl	8001490 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0d7      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265a:	4b4b      	ldr	r3, [pc, #300]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0ee      	beq.n	8002644 <HAL_RCC_OscConfig+0x334>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe ff12 	bl	8001490 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266e:	e00a      	b.n	8002686 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fe ff0e 	bl	8001490 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e0c1      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002686:	4b40      	ldr	r3, [pc, #256]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1ee      	bne.n	8002670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002692:	7dfb      	ldrb	r3, [r7, #23]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d105      	bne.n	80026a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002698:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	4a3a      	ldr	r2, [pc, #232]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 800269e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80ad 	beq.w	8002808 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ae:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d060      	beq.n	800277c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d145      	bne.n	800274e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c2:	4b33      	ldr	r3, [pc, #204]	; (8002790 <HAL_RCC_OscConfig+0x480>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fee2 	bl	8001490 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d0:	f7fe fede 	bl	8001490 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e093      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e2:	4b29      	ldr	r3, [pc, #164]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69da      	ldr	r2, [r3, #28]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	019b      	lsls	r3, r3, #6
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	085b      	lsrs	r3, r3, #1
 8002706:	3b01      	subs	r3, #1
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	071b      	lsls	r3, r3, #28
 800271a:	491b      	ldr	r1, [pc, #108]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_RCC_OscConfig+0x480>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fe feb3 	bl	8001490 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272e:	f7fe feaf 	bl	8001490 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e064      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x41e>
 800274c:	e05c      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_RCC_OscConfig+0x480>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fe9c 	bl	8001490 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe fe98 	bl	8001490 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e04d      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_RCC_OscConfig+0x478>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x44c>
 800277a:	e045      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d107      	bne.n	8002794 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e040      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
 8002788:	40023800 	.word	0x40023800
 800278c:	40007000 	.word	0x40007000
 8002790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002794:	4b1f      	ldr	r3, [pc, #124]	; (8002814 <HAL_RCC_OscConfig+0x504>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d030      	beq.n	8002804 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d129      	bne.n	8002804 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d122      	bne.n	8002804 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027c4:	4013      	ands	r3, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d119      	bne.n	8002804 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	3b01      	subs	r3, #1
 80027de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d10f      	bne.n	8002804 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e025      	b.n	8002878 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d106      	bne.n	8002846 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7fd ff85 	bl	8000750 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2202      	movs	r2, #2
 800284a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3304      	adds	r3, #4
 8002856:	4619      	mov	r1, r3
 8002858:	4610      	mov	r0, r2
 800285a:	f000 fcef 	bl	800323c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	461a      	mov	r2, r3
 8002868:	6839      	ldr	r1, [r7, #0]
 800286a:	f000 fd44 	bl	80032f6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002892:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d101      	bne.n	800289e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800289a:	2302      	movs	r3, #2
 800289c:	e021      	b.n	80028e2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d002      	beq.n	80028aa <HAL_SDRAM_SendCommand+0x2a>
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	d118      	bne.n	80028dc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2202      	movs	r2, #2
 80028ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fd84 	bl	80033c8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d104      	bne.n	80028d2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2205      	movs	r2, #5
 80028cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80028d0:	e006      	b.n	80028e0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80028da:	e001      	b.n	80028e0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d101      	bne.n	8002904 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8002900:	2302      	movs	r3, #2
 8002902:	e016      	b.n	8002932 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d10f      	bne.n	8002930 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6839      	ldr	r1, [r7, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fd8f 	bl	8003442 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	e000      	b.n	8002932 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e041      	b.n	80029d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d106      	bne.n	8002966 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7fe fd13 	bl	800138c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2202      	movs	r2, #2
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3304      	adds	r3, #4
 8002976:	4619      	mov	r1, r3
 8002978:	4610      	mov	r0, r2
 800297a:	f000 fa95 	bl	8002ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d001      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e04e      	b.n	8002a8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <HAL_TIM_Base_Start_IT+0xc4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d022      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d01d      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d018      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d013      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00e      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <HAL_TIM_Base_Start_IT+0xd4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d009      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d004      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d111      	bne.n	8002a7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d010      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0201 	orr.w	r2, r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7a:	e007      	b.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40000c00 	.word	0x40000c00
 8002aac:	40010400 	.word	0x40010400
 8002ab0:	40014000 	.word	0x40014000
 8002ab4:	40001800 	.word	0x40001800

08002ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d122      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d11b      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0202 	mvn.w	r2, #2
 8002ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f9b5 	bl	8002e6a <HAL_TIM_IC_CaptureCallback>
 8002b00:	e005      	b.n	8002b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f9a7 	bl	8002e56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f9b8 	bl	8002e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d122      	bne.n	8002b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d11b      	bne.n	8002b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0204 	mvn.w	r2, #4
 8002b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f98b 	bl	8002e6a <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f97d 	bl	8002e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f98e 	bl	8002e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0208 	mvn.w	r2, #8
 8002b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2204      	movs	r2, #4
 8002b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f961 	bl	8002e6a <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f953 	bl	8002e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f964 	bl	8002e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b10      	cmp	r3, #16
 8002bc8:	d122      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d11b      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0210 	mvn.w	r2, #16
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2208      	movs	r2, #8
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f937 	bl	8002e6a <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f929 	bl	8002e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f93a 	bl	8002e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d10e      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d107      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0201 	mvn.w	r2, #1
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe f870 	bl	8000d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c46:	2b80      	cmp	r3, #128	; 0x80
 8002c48:	d10e      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c54:	2b80      	cmp	r3, #128	; 0x80
 8002c56:	d107      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fae0 	bl	8003228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d10e      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d107      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8ff 	bl	8002e92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d107      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0220 	mvn.w	r2, #32
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 faaa 	bl	8003214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e0b4      	b.n	8002e4e <HAL_TIM_ConfigClockSource+0x186>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1c:	d03e      	beq.n	8002d9c <HAL_TIM_ConfigClockSource+0xd4>
 8002d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d22:	f200 8087 	bhi.w	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2a:	f000 8086 	beq.w	8002e3a <HAL_TIM_ConfigClockSource+0x172>
 8002d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d32:	d87f      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d34:	2b70      	cmp	r3, #112	; 0x70
 8002d36:	d01a      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0xa6>
 8002d38:	2b70      	cmp	r3, #112	; 0x70
 8002d3a:	d87b      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d3c:	2b60      	cmp	r3, #96	; 0x60
 8002d3e:	d050      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x11a>
 8002d40:	2b60      	cmp	r3, #96	; 0x60
 8002d42:	d877      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d44:	2b50      	cmp	r3, #80	; 0x50
 8002d46:	d03c      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0xfa>
 8002d48:	2b50      	cmp	r3, #80	; 0x50
 8002d4a:	d873      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d4c:	2b40      	cmp	r3, #64	; 0x40
 8002d4e:	d058      	beq.n	8002e02 <HAL_TIM_ConfigClockSource+0x13a>
 8002d50:	2b40      	cmp	r3, #64	; 0x40
 8002d52:	d86f      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d54:	2b30      	cmp	r3, #48	; 0x30
 8002d56:	d064      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x15a>
 8002d58:	2b30      	cmp	r3, #48	; 0x30
 8002d5a:	d86b      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d060      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x15a>
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	d867      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d05c      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x15a>
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d05a      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x15a>
 8002d6c:	e062      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6899      	ldr	r1, [r3, #8]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f000 f9ad 	bl	80030dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	609a      	str	r2, [r3, #8]
      break;
 8002d9a:	e04f      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6899      	ldr	r1, [r3, #8]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f000 f996 	bl	80030dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dbe:	609a      	str	r2, [r3, #8]
      break;
 8002dc0:	e03c      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6859      	ldr	r1, [r3, #4]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f000 f90a 	bl	8002fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2150      	movs	r1, #80	; 0x50
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 f963 	bl	80030a6 <TIM_ITRx_SetConfig>
      break;
 8002de0:	e02c      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6859      	ldr	r1, [r3, #4]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	461a      	mov	r2, r3
 8002df0:	f000 f929 	bl	8003046 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2160      	movs	r1, #96	; 0x60
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f953 	bl	80030a6 <TIM_ITRx_SetConfig>
      break;
 8002e00:	e01c      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f000 f8ea 	bl	8002fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2140      	movs	r1, #64	; 0x40
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 f943 	bl	80030a6 <TIM_ITRx_SetConfig>
      break;
 8002e20:	e00c      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f000 f93a 	bl	80030a6 <TIM_ITRx_SetConfig>
      break;
 8002e32:	e003      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      break;
 8002e38:	e000      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a40      	ldr	r2, [pc, #256]	; (8002fbc <TIM_Base_SetConfig+0x114>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d013      	beq.n	8002ee8 <TIM_Base_SetConfig+0x40>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec6:	d00f      	beq.n	8002ee8 <TIM_Base_SetConfig+0x40>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a3d      	ldr	r2, [pc, #244]	; (8002fc0 <TIM_Base_SetConfig+0x118>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00b      	beq.n	8002ee8 <TIM_Base_SetConfig+0x40>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a3c      	ldr	r2, [pc, #240]	; (8002fc4 <TIM_Base_SetConfig+0x11c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d007      	beq.n	8002ee8 <TIM_Base_SetConfig+0x40>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a3b      	ldr	r2, [pc, #236]	; (8002fc8 <TIM_Base_SetConfig+0x120>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d003      	beq.n	8002ee8 <TIM_Base_SetConfig+0x40>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a3a      	ldr	r2, [pc, #232]	; (8002fcc <TIM_Base_SetConfig+0x124>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d108      	bne.n	8002efa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a2f      	ldr	r2, [pc, #188]	; (8002fbc <TIM_Base_SetConfig+0x114>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d02b      	beq.n	8002f5a <TIM_Base_SetConfig+0xb2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f08:	d027      	beq.n	8002f5a <TIM_Base_SetConfig+0xb2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a2c      	ldr	r2, [pc, #176]	; (8002fc0 <TIM_Base_SetConfig+0x118>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d023      	beq.n	8002f5a <TIM_Base_SetConfig+0xb2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a2b      	ldr	r2, [pc, #172]	; (8002fc4 <TIM_Base_SetConfig+0x11c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01f      	beq.n	8002f5a <TIM_Base_SetConfig+0xb2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a2a      	ldr	r2, [pc, #168]	; (8002fc8 <TIM_Base_SetConfig+0x120>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d01b      	beq.n	8002f5a <TIM_Base_SetConfig+0xb2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a29      	ldr	r2, [pc, #164]	; (8002fcc <TIM_Base_SetConfig+0x124>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d017      	beq.n	8002f5a <TIM_Base_SetConfig+0xb2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a28      	ldr	r2, [pc, #160]	; (8002fd0 <TIM_Base_SetConfig+0x128>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d013      	beq.n	8002f5a <TIM_Base_SetConfig+0xb2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a27      	ldr	r2, [pc, #156]	; (8002fd4 <TIM_Base_SetConfig+0x12c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00f      	beq.n	8002f5a <TIM_Base_SetConfig+0xb2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <TIM_Base_SetConfig+0x130>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00b      	beq.n	8002f5a <TIM_Base_SetConfig+0xb2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a25      	ldr	r2, [pc, #148]	; (8002fdc <TIM_Base_SetConfig+0x134>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <TIM_Base_SetConfig+0xb2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a24      	ldr	r2, [pc, #144]	; (8002fe0 <TIM_Base_SetConfig+0x138>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d003      	beq.n	8002f5a <TIM_Base_SetConfig+0xb2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a23      	ldr	r2, [pc, #140]	; (8002fe4 <TIM_Base_SetConfig+0x13c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d108      	bne.n	8002f6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <TIM_Base_SetConfig+0x114>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <TIM_Base_SetConfig+0xf8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a0c      	ldr	r2, [pc, #48]	; (8002fcc <TIM_Base_SetConfig+0x124>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d103      	bne.n	8002fa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	615a      	str	r2, [r3, #20]
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40010000 	.word	0x40010000
 8002fc0:	40000400 	.word	0x40000400
 8002fc4:	40000800 	.word	0x40000800
 8002fc8:	40000c00 	.word	0x40000c00
 8002fcc:	40010400 	.word	0x40010400
 8002fd0:	40014000 	.word	0x40014000
 8002fd4:	40014400 	.word	0x40014400
 8002fd8:	40014800 	.word	0x40014800
 8002fdc:	40001800 	.word	0x40001800
 8002fe0:	40001c00 	.word	0x40001c00
 8002fe4:	40002000 	.word	0x40002000

08002fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f023 0201 	bic.w	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f023 030a 	bic.w	r3, r3, #10
 8003024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003046:	b480      	push	{r7}
 8003048:	b087      	sub	sp, #28
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f023 0210 	bic.w	r2, r3, #16
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	031b      	lsls	r3, r3, #12
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003082:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	621a      	str	r2, [r3, #32]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b085      	sub	sp, #20
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f043 0307 	orr.w	r3, r3, #7
 80030c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	609a      	str	r2, [r3, #8]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	021a      	lsls	r2, r3, #8
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	431a      	orrs	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4313      	orrs	r3, r2
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4313      	orrs	r3, r2
 8003108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	609a      	str	r2, [r3, #8]
}
 8003110:	bf00      	nop
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003130:	2302      	movs	r3, #2
 8003132:	e05a      	b.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a21      	ldr	r2, [pc, #132]	; (80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d022      	beq.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003180:	d01d      	beq.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d018      	beq.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1b      	ldr	r2, [pc, #108]	; (8003200 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d013      	beq.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1a      	ldr	r2, [pc, #104]	; (8003204 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00e      	beq.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a18      	ldr	r2, [pc, #96]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d009      	beq.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a17      	ldr	r2, [pc, #92]	; (800320c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d004      	beq.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a15      	ldr	r2, [pc, #84]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d10c      	bne.n	80031d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40010000 	.word	0x40010000
 80031fc:	40000400 	.word	0x40000400
 8003200:	40000800 	.word	0x40000800
 8003204:	40000c00 	.word	0x40000c00
 8003208:	40010400 	.word	0x40010400
 800320c:	40014000 	.word	0x40014000
 8003210:	40001800 	.word	0x40001800

08003214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d123      	bne.n	8003296 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003256:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	6851      	ldr	r1, [r2, #4]
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	6892      	ldr	r2, [r2, #8]
 8003262:	4311      	orrs	r1, r2
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	68d2      	ldr	r2, [r2, #12]
 8003268:	4311      	orrs	r1, r2
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	6912      	ldr	r2, [r2, #16]
 800326e:	4311      	orrs	r1, r2
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	6952      	ldr	r2, [r2, #20]
 8003274:	4311      	orrs	r1, r2
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	6992      	ldr	r2, [r2, #24]
 800327a:	4311      	orrs	r1, r2
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	69d2      	ldr	r2, [r2, #28]
 8003280:	4311      	orrs	r1, r2
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	6a12      	ldr	r2, [r2, #32]
 8003286:	4311      	orrs	r1, r2
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800328c:	430a      	orrs	r2, r1
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e028      	b.n	80032e8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	69d9      	ldr	r1, [r3, #28]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	4319      	orrs	r1, r3
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	430b      	orrs	r3, r1
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80032bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	6851      	ldr	r1, [r2, #4]
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	6892      	ldr	r2, [r2, #8]
 80032c8:	4311      	orrs	r1, r2
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	68d2      	ldr	r2, [r2, #12]
 80032ce:	4311      	orrs	r1, r2
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	6912      	ldr	r2, [r2, #16]
 80032d4:	4311      	orrs	r1, r2
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	6952      	ldr	r2, [r2, #20]
 80032da:	4311      	orrs	r1, r2
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	6992      	ldr	r2, [r2, #24]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b085      	sub	sp, #20
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d128      	bne.n	800335a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	1e59      	subs	r1, r3, #1
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	3b01      	subs	r3, #1
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	4319      	orrs	r1, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	3b01      	subs	r3, #1
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	4319      	orrs	r1, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	3b01      	subs	r3, #1
 8003330:	031b      	lsls	r3, r3, #12
 8003332:	4319      	orrs	r1, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	3b01      	subs	r3, #1
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	4319      	orrs	r1, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	3b01      	subs	r3, #1
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4319      	orrs	r1, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	3b01      	subs	r3, #1
 800334e:	061b      	lsls	r3, r3, #24
 8003350:	430b      	orrs	r3, r1
 8003352:	431a      	orrs	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	e02f      	b.n	80033ba <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003362:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	68d2      	ldr	r2, [r2, #12]
 800336a:	3a01      	subs	r2, #1
 800336c:	0311      	lsls	r1, r2, #12
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	6952      	ldr	r2, [r2, #20]
 8003372:	3a01      	subs	r2, #1
 8003374:	0512      	lsls	r2, r2, #20
 8003376:	430a      	orrs	r2, r1
 8003378:	431a      	orrs	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	1e59      	subs	r1, r3, #1
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	3b01      	subs	r3, #1
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	4319      	orrs	r1, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	3b01      	subs	r3, #1
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	4319      	orrs	r1, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	041b      	lsls	r3, r3, #16
 80033a8:	4319      	orrs	r1, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	061b      	lsls	r3, r3, #24
 80033b2:	430b      	orrs	r3, r1
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	0d9b      	lsrs	r3, r3, #22
 80033de:	059b      	lsls	r3, r3, #22
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	6811      	ldr	r1, [r2, #0]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	6852      	ldr	r2, [r2, #4]
 80033e8:	4311      	orrs	r1, r2
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	6892      	ldr	r2, [r2, #8]
 80033ee:	3a01      	subs	r2, #1
 80033f0:	0152      	lsls	r2, r2, #5
 80033f2:	4311      	orrs	r1, r2
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	68d2      	ldr	r2, [r2, #12]
 80033f8:	0252      	lsls	r2, r2, #9
 80033fa:	430a      	orrs	r2, r1
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8003402:	f7fe f845 	bl	8001490 <HAL_GetTick>
 8003406:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8003408:	e010      	b.n	800342c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d00c      	beq.n	800342c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <FMC_SDRAM_SendCommand+0x60>
 8003418:	f7fe f83a 	bl	8001490 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	d201      	bcs.n	800342c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e006      	b.n	800343a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b20      	cmp	r3, #32
 8003436:	d0e8      	beq.n	800340a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003454:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	0052      	lsls	r2, r2, #1
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <__libc_init_array>:
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	4d0d      	ldr	r5, [pc, #52]	; (80034a8 <__libc_init_array+0x38>)
 8003474:	4c0d      	ldr	r4, [pc, #52]	; (80034ac <__libc_init_array+0x3c>)
 8003476:	1b64      	subs	r4, r4, r5
 8003478:	10a4      	asrs	r4, r4, #2
 800347a:	2600      	movs	r6, #0
 800347c:	42a6      	cmp	r6, r4
 800347e:	d109      	bne.n	8003494 <__libc_init_array+0x24>
 8003480:	4d0b      	ldr	r5, [pc, #44]	; (80034b0 <__libc_init_array+0x40>)
 8003482:	4c0c      	ldr	r4, [pc, #48]	; (80034b4 <__libc_init_array+0x44>)
 8003484:	f000 f820 	bl	80034c8 <_init>
 8003488:	1b64      	subs	r4, r4, r5
 800348a:	10a4      	asrs	r4, r4, #2
 800348c:	2600      	movs	r6, #0
 800348e:	42a6      	cmp	r6, r4
 8003490:	d105      	bne.n	800349e <__libc_init_array+0x2e>
 8003492:	bd70      	pop	{r4, r5, r6, pc}
 8003494:	f855 3b04 	ldr.w	r3, [r5], #4
 8003498:	4798      	blx	r3
 800349a:	3601      	adds	r6, #1
 800349c:	e7ee      	b.n	800347c <__libc_init_array+0xc>
 800349e:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a2:	4798      	blx	r3
 80034a4:	3601      	adds	r6, #1
 80034a6:	e7f2      	b.n	800348e <__libc_init_array+0x1e>
 80034a8:	08003508 	.word	0x08003508
 80034ac:	08003508 	.word	0x08003508
 80034b0:	08003508 	.word	0x08003508
 80034b4:	0800350c 	.word	0x0800350c

080034b8 <memset>:
 80034b8:	4402      	add	r2, r0
 80034ba:	4603      	mov	r3, r0
 80034bc:	4293      	cmp	r3, r2
 80034be:	d100      	bne.n	80034c2 <memset+0xa>
 80034c0:	4770      	bx	lr
 80034c2:	f803 1b01 	strb.w	r1, [r3], #1
 80034c6:	e7f9      	b.n	80034bc <memset+0x4>

080034c8 <_init>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	bf00      	nop
 80034cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ce:	bc08      	pop	{r3}
 80034d0:	469e      	mov	lr, r3
 80034d2:	4770      	bx	lr

080034d4 <_fini>:
 80034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d6:	bf00      	nop
 80034d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034da:	bc08      	pop	{r3}
 80034dc:	469e      	mov	lr, r3
 80034de:	4770      	bx	lr
